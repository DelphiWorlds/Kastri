unit DW.iOSapi.UIKit;

{*******************************************************}
{                                                       }
{                      Kastri                           }
{                                                       }
{         Delphi Worlds Cross-Platform Library          }
{                                                       }
{  Copyright 2020-2025 Dave Nottage under MIT license   }
{  which is located in the root folder of this library  }
{                                                       }
{*******************************************************}

interface

uses
  // macOS
  Macapi.ObjectiveC, Macapi.CoreFoundation, Macapi.ObjCRuntime,
  // iOS
  iOSapi.CocoaTypes, iOSapi.Foundation, iOSapi.CoreGraphics, iOSapi.CoreImage, iOSapi.CoreText, iOSapi.QuartzCore,
  iOSapi.AVFoundation, iOSapi.CoreLocation, iOSapi.UserNotifications,
  // DW
  DW.iOSapi.Intents, DW.iOSapi.Foundation, DW.iOSapi.Symbols, DW.iOSapi.CloudKit, DW.iOSapi.CoreData, DW.iOSapi.LinkPresentation,
  DW.iOSapi.QuartzCore;

const
  UIKIT_HAS_UIFOUNDATION_SYMBOLS = 1;
  NSLAYOUTCONSTRAINT_H = 1;
  NSLAYOUTANCHOR_H = 1;
  UIAccessibilityNavigationStyleAutomatic = 0;
  UIAccessibilityNavigationStyleSeparate = 1;
  UIAccessibilityNavigationStyleCombined = 2;
  UIAccessibilityContainerTypeNone = 0;
  UIAccessibilityContainerTypeDataTable = 1;
  UIAccessibilityContainerTypeList = 2;
  UIAccessibilityContainerTypeLandmark = 3;
  UIAccessibilityContainerTypeSemanticGroup = 4;
  UIAccessibilityDirectTouchOptionNone = 0;
  UIAccessibilityDirectTouchOptionSilentOnTouch = 1;
  UIAccessibilityDirectTouchOptionRequiresActivation = 2;
  UIRectEdgeNone = 0;
  UIRectEdgeTop = 1;
  UIRectEdgeLeft = 2;
  UIRectEdgeBottom = 4;
  UIRectEdgeRight = 8;
  UIRectEdgeAll = 15;
  UIRectCornerTopLeft = 1;
  UIRectCornerTopRight = 2;
  UIRectCornerBottomLeft = 4;
  UIRectCornerBottomRight = 8;
  UIRectCornerAllCorners = -1;
  UIAxisNeither = 0;
  UIAxisHorizontal = 1;
  UIAxisVertical = 2;
  UIAxisBoth = UIAxisHorizontal or UIAxisVertical;
  NSDirectionalRectEdgeNone = 0;
  NSDirectionalRectEdgeTop = 1;
  NSDirectionalRectEdgeLeading = 2;
  NSDirectionalRectEdgeBottom = 4;
  NSDirectionalRectEdgeTrailing = 8;
  NSDirectionalRectEdgeAll = 15;
  UIDirectionalRectEdgeNone = 0;
  UIDirectionalRectEdgeTop = 1;
  UIDirectionalRectEdgeLeading = 2;
  UIDirectionalRectEdgeBottom = 4;
  UIDirectionalRectEdgeTrailing = 8;
  UIDirectionalRectEdgeAll = 15;
  NSRectAlignmentNone = 0;
  NSRectAlignmentTop = 1;
  NSRectAlignmentTopLeading = 2;
  NSRectAlignmentLeading = 3;
  NSRectAlignmentBottomLeading = 4;
  NSRectAlignmentBottom = 5;
  NSRectAlignmentBottomTrailing = 6;
  NSRectAlignmentTrailing = 7;
  NSRectAlignmentTopTrailing = 8;
  UIFontDescriptorTraitItalic = 1;
  UIFontDescriptorTraitBold = 2;
  UIFontDescriptorTraitExpanded = 32;
  UIFontDescriptorTraitCondensed = 64;
  UIFontDescriptorTraitMonoSpace = 1024;
  UIFontDescriptorTraitVertical = 2048;
  UIFontDescriptorTraitUIOptimized = 4096;
  UIFontDescriptorTraitTightLeading = 32768;
  UIFontDescriptorTraitLooseLeading = 65536;
  UIFontDescriptorClassMask = -268435456;
  UIFontDescriptorClassUnknown = 0;
  UIFontDescriptorClassOldStyleSerifs = 268435456;
  UIFontDescriptorClassTransitionalSerifs = 536870912;
  UIFontDescriptorClassModernSerifs = 805306368;
  UIFontDescriptorClassClarendonSerifs = 1073741824;
  UIFontDescriptorClassSlabSerifs = 1342177280;
  UIFontDescriptorClassFreeformSerifs = 1879048192;
  UIFontDescriptorClassSansSerif = -2147483648;
  UIFontDescriptorClassOrnamentals = -1879048192;
  UIFontDescriptorClassScripts = -1610612736;
  UIFontDescriptorClassSymbolic = -1073741824;
  UIPreferredPresentationStyleUnspecified = 0;
  UIPreferredPresentationStyleInline = 1;
  UIPreferredPresentationStyleAttachment = 2;
  NSAttachmentCharacter = 65532;
  UIImageOrientationUp = 0;
  UIImageOrientationDown = 1;
  UIImageOrientationLeft = 2;
  UIImageOrientationRight = 3;
  UIImageOrientationUpMirrored = 4;
  UIImageOrientationDownMirrored = 5;
  UIImageOrientationLeftMirrored = 6;
  UIImageOrientationRightMirrored = 7;
  UIImageResizingModeTile = 0;
  UIImageResizingModeStretch = 1;
  UIImageRenderingModeAutomatic = 0;
  UIImageRenderingModeAlwaysOriginal = 1;
  UIImageRenderingModeAlwaysTemplate = 2;
  UIImageSymbolScaleDefault = -1;
  UIImageSymbolScaleUnspecified = 0;
  UIImageSymbolScaleSmall = 1;
  UIImageSymbolScaleMedium = 2;
  UIImageSymbolScaleLarge = 3;
  UIImageSymbolWeightUnspecified = 0;
  UIImageSymbolWeightUltraLight = 1;
  UIImageSymbolWeightThin = 2;
  UIImageSymbolWeightLight = 3;
  UIImageSymbolWeightRegular = 4;
  UIImageSymbolWeightMedium = 5;
  UIImageSymbolWeightSemibold = 6;
  UIImageSymbolWeightBold = 7;
  UIImageSymbolWeightHeavy = 8;
  UIImageSymbolWeightBlack = 9;
  NSUnderlineStyleNone = 0;
  NSUnderlineStyleSingle = 1;
  NSUnderlineStyleThick = 2;
  NSUnderlineStyleDouble = 9;
  NSUnderlineStylePatternSolid = 0;
  NSUnderlineStylePatternDot = 256;
  NSUnderlineStylePatternDash = 512;
  NSUnderlineStylePatternDashDot = 768;
  NSUnderlineStylePatternDashDotDot = 1024;
  NSUnderlineStyleByWord = 32768;
  NSWritingDirectionEmbedding = 0 shl 1;
  NSWritingDirectionOverride = 1 shl 1;
  NSTextScalingStandard = 0;
  NSTextScalingiOS = 1;
  NSTextWritingDirectionEmbedding = 0 shl 1;
  NSTextWritingDirectionOverride = 1 shl 1;
  NSTextAlignmentLeft = 0;
  NSTextAlignmentCenter = 1;
  NSTextAlignmentRight = 2;
  NSTextAlignmentJustified = 3;
  NSTextAlignmentNatural = 4;
  NSWritingDirectionNatural = -1;
  NSWritingDirectionLeftToRight = 0;
  NSWritingDirectionRightToLeft = 1;
  NSLineBreakByWordWrapping = 0;
  NSLineBreakByCharWrapping = 1;
  NSLineBreakByClipping = 2;
  NSLineBreakByTruncatingHead = 3;
  NSLineBreakByTruncatingTail = 4;
  NSLineBreakByTruncatingMiddle = 5;
  NSLineBreakStrategyNone = 0;
  NSLineBreakStrategyPushOut = 1;
  NSLineBreakStrategyHangulWordPriority = 2;
  NSLineBreakStrategyStandard = 65535;
  NSStringDrawingUsesLineFragmentOrigin = 1;
  NSStringDrawingUsesFontLeading = 2;
  NSStringDrawingUsesDeviceMetrics = 8;
  NSStringDrawingTruncatesLastVisibleLine = 32;
  UIMenuElementStateOff = 0;
  UIMenuElementStateOn = 1;
  UIMenuElementStateMixed = 2;
  UIMenuElementAttributesDisabled = 1;
  UIMenuElementAttributesDestructive = 2;
  UIMenuElementAttributesHidden = 4;
  UIMenuElementAttributesKeepsMenuPresented = 8;
  UIMenuOptionsDisplayInline = 1;
  UIMenuOptionsDestructive = 2;
  UIMenuOptionsSingleSelection = 32;
  UIMenuOptionsDisplayAsPalette = 128;
  UIMenuElementSizeSmall = 0;
  UIMenuElementSizeMedium = 1;
  UIMenuElementSizeLarge = 2;
  UIMenuElementSizeAutomatic = -1;
  UIKeyModifierAlphaShift = 65536;
  UIKeyModifierShift = 131072;
  UIKeyModifierControl = 262144;
  UIKeyModifierAlternate = 524288;
  UIKeyModifierCommand = 1048576;
  UIKeyModifierNumericPad = 2097152;
  UIEventTypeTouches = 0;
  UIEventTypeMotion = 1;
  UIEventTypeRemoteControl = 2;
  UIEventTypePresses = 3;
  UIEventTypeScroll = 10;
  UIEventTypeHover = 11;
  UIEventTypeTransform = 14;
  UIEventSubtypeNone = 0;
  UIEventSubtypeMotionShake = 1;
  UIEventSubtypeRemoteControlPlay = 100;
  UIEventSubtypeRemoteControlPause = 101;
  UIEventSubtypeRemoteControlStop = 102;
  UIEventSubtypeRemoteControlTogglePlayPause = 103;
  UIEventSubtypeRemoteControlNextTrack = 104;
  UIEventSubtypeRemoteControlPreviousTrack = 105;
  UIEventSubtypeRemoteControlBeginSeekingBackward = 106;
  UIEventSubtypeRemoteControlEndSeekingBackward = 107;
  UIEventSubtypeRemoteControlBeginSeekingForward = 108;
  UIEventSubtypeRemoteControlEndSeekingForward = 109;
  UIEventButtonMaskPrimary = 1;
  UIEventButtonMaskSecondary = 2;
  UIEditingInteractionConfigurationNone = 0;
  UIEditingInteractionConfigurationDefault = 1;
  UIBarStyleDefault = 0;
  UIBarStyleBlack = 1;
  UIBarStyleBlackOpaque = 1;
  UIBarStyleBlackTranslucent = 2;
  UIUserInterfaceSizeClassUnspecified = 0;
  UIUserInterfaceSizeClassCompact = 1;
  UIUserInterfaceSizeClassRegular = 2;
  UIUserInterfaceStyleUnspecified = 0;
  UIUserInterfaceStyleLight = 1;
  UIUserInterfaceStyleDark = 2;
  UIUserInterfaceLayoutDirectionLeftToRight = 0;
  UIUserInterfaceLayoutDirectionRightToLeft = 1;
  UITraitEnvironmentLayoutDirectionUnspecified = -1;
  UITraitEnvironmentLayoutDirectionLeftToRight = UIUserInterfaceLayoutDirectionLeftToRight;
  UITraitEnvironmentLayoutDirectionRightToLeft = UIUserInterfaceLayoutDirectionRightToLeft;
  UIDisplayGamutUnspecified = -1;
  UIDisplayGamutSRGB = 0;
  UIDisplayGamutP3 = 1;
  UIAccessibilityContrastUnspecified = -1;
  UIAccessibilityContrastNormal = 0;
  UIAccessibilityContrastHigh = 1;
  UILegibilityWeightUnspecified = -1;
  UILegibilityWeightRegular = 0;
  UILegibilityWeightBold = 1;
  UIUserInterfaceLevelUnspecified = -1;
  UIUserInterfaceLevelBase = 0;
  UIUserInterfaceLevelElevated = 1;
  UIUserInterfaceActiveAppearanceUnspecified = -1;
  UIUserInterfaceActiveAppearanceInactive = 0;
  UIUserInterfaceActiveAppearanceActive = 1;
  UINSToolbarItemPresentationSizeUnspecified = -1;
  UINSToolbarItemPresentationSizeRegular = 0;
  UINSToolbarItemPresentationSizeSmall = 1;
  UINSToolbarItemPresentationSizeLarge = 3;
  UIImageDynamicRangeUnspecified = -1;
  UIImageDynamicRangeStandard = 0;
  UIImageDynamicRangeConstrainedHigh = 1;
  UIImageDynamicRangeHigh = 2;
  UIDynamicItemCollisionBoundsTypeRectangle = 0;
  UIDynamicItemCollisionBoundsTypeEllipse = 1;
  UIDynamicItemCollisionBoundsTypePath = 2;
  NSLayoutRelationLessThanOrEqual = -1;
  NSLayoutRelationEqual = 0;
  NSLayoutRelationGreaterThanOrEqual = 1;
  NSLayoutAttributeLeft = 1;
  NSLayoutAttributeRight = 2;
  NSLayoutAttributeTop = 3;
  NSLayoutAttributeBottom = 4;
  NSLayoutAttributeLeading = 5;
  NSLayoutAttributeTrailing = 6;
  NSLayoutAttributeWidth = 7;
  NSLayoutAttributeHeight = 8;
  NSLayoutAttributeCenterX = 9;
  NSLayoutAttributeCenterY = 10;
  NSLayoutAttributeLastBaseline = 11;
  NSLayoutAttributeBaseline = NSLayoutAttributeLastBaseline;
  NSLayoutAttributeFirstBaseline = 12;
  NSLayoutAttributeLeftMargin = 13;
  NSLayoutAttributeRightMargin = 14;
  NSLayoutAttributeTopMargin = 15;
  NSLayoutAttributeBottomMargin = 16;
  NSLayoutAttributeLeadingMargin = 17;
  NSLayoutAttributeTrailingMargin = 18;
  NSLayoutAttributeCenterXWithinMargins = 19;
  NSLayoutAttributeCenterYWithinMargins = 20;
  NSLayoutAttributeNotAnAttribute = 0;
  NSLayoutFormatAlignAllLeft = 2;
  NSLayoutFormatAlignAllRight = 4;
  NSLayoutFormatAlignAllTop = 8;
  NSLayoutFormatAlignAllBottom = 16;
  NSLayoutFormatAlignAllLeading = 32;
  NSLayoutFormatAlignAllTrailing = 64;
  NSLayoutFormatAlignAllCenterX = 512;
  NSLayoutFormatAlignAllCenterY = 1024;
  NSLayoutFormatAlignAllLastBaseline = 2048;
  NSLayoutFormatAlignAllFirstBaseline = 4096;
  NSLayoutFormatAlignAllBaseline = NSLayoutFormatAlignAllLastBaseline;
  NSLayoutFormatAlignmentMask = 65535;
  NSLayoutFormatDirectionLeadingToTrailing = 0;
  NSLayoutFormatDirectionLeftToRight = 65536;
  NSLayoutFormatDirectionRightToLeft = 131072;
  NSLayoutFormatDirectionMask = 196608;
  NSLayoutFormatSpacingEdgeToEdge = 0;
  NSLayoutFormatSpacingBaselineToBaseline = 524288;
  NSLayoutFormatSpacingMask = 524288;
  UIDeviceOrientationUnknown = 0;
  UIDeviceOrientationPortrait = 1;
  UIDeviceOrientationPortraitUpsideDown = 2;
  UIDeviceOrientationLandscapeLeft = 3;
  UIDeviceOrientationLandscapeRight = 4;
  UIDeviceOrientationFaceUp = 5;
  UIDeviceOrientationFaceDown = 6;
  UIInterfaceOrientationUnknown = UIDeviceOrientationUnknown;
  UIInterfaceOrientationPortrait = UIDeviceOrientationPortrait;
  UIInterfaceOrientationPortraitUpsideDown = UIDeviceOrientationPortraitUpsideDown;
  UIInterfaceOrientationLandscapeLeft = UIDeviceOrientationLandscapeRight;
  UIInterfaceOrientationLandscapeRight = UIDeviceOrientationLandscapeLeft;
  UIInterfaceOrientationMaskPortrait = 2;
  UIInterfaceOrientationMaskLandscapeLeft = 16;
  UIInterfaceOrientationMaskLandscapeRight = 8;
  UIInterfaceOrientationMaskPortraitUpsideDown = 4;
  UIInterfaceOrientationMaskLandscape = UIInterfaceOrientationMaskLandscapeLeft or UIInterfaceOrientationMaskLandscapeRight;
  UIInterfaceOrientationMaskAll = UIInterfaceOrientationMaskPortrait or UIInterfaceOrientationMaskLandscapeLeft or
    UIInterfaceOrientationMaskLandscapeRight or UIInterfaceOrientationMaskPortraitUpsideDown;
  UIInterfaceOrientationMaskAllButUpsideDown = UIInterfaceOrientationMaskPortrait or UIInterfaceOrientationMaskLandscapeLeft
    or UIInterfaceOrientationMaskLandscapeRight;
  UIDeviceBatteryStateUnknown = 0;
  UIDeviceBatteryStateUnplugged = 1;
  UIDeviceBatteryStateCharging = 2;
  UIDeviceBatteryStateFull = 3;
  UIUserInterfaceIdiomUnspecified = -1;
  UIUserInterfaceIdiomPhone = 0;
  UIUserInterfaceIdiomPad = 1;
  UIUserInterfaceIdiomTV = 2;
  UIUserInterfaceIdiomCarPlay = 3;
  UIUserInterfaceIdiomMac = 5;
  UIUserInterfaceIdiomVision = 6;
  UITouchPhaseBegan = 0;
  UITouchPhaseMoved = 1;
  UITouchPhaseStationary = 2;
  UITouchPhaseEnded = 3;
  UITouchPhaseCancelled = 4;
  UITouchPhaseRegionEntered = 5;
  UITouchPhaseRegionMoved = 6;
  UITouchPhaseRegionExited = 7;
  UIForceTouchCapabilityUnknown = 0;
  UIForceTouchCapabilityUnavailable = 1;
  UIForceTouchCapabilityAvailable = 2;
  UITouchTypeDirect = 0;
  UITouchTypeIndirect = 1;
  UITouchTypePencil = 2;
  UITouchTypeStylus = UITouchTypePencil;
  UITouchTypeIndirectPointer = 3;
  UITouchPropertyForce = 1;
  UITouchPropertyAzimuth = 2;
  UITouchPropertyAltitude = 4;
  UITouchPropertyLocation = 8;
  UITouchPropertyRoll = 16;
  UISceneActivationStateUnattached = -1;
  UISceneActivationStateForegroundActive = 0;
  UISceneActivationStateForegroundInactive = 1;
  UISceneActivationStateBackground = 2;
  UISceneCaptureStateUnspecified = -1;
  UISceneCaptureStateInactive = 0;
  UISceneCaptureStateActive = 1;
  UISceneErrorCodeMultipleScenesNotSupported = 0;
  UISceneErrorCodeRequestDenied = 1;
  UISceneErrorCodeGeometryRequestUnsupported = 100;
  UISceneErrorCodeGeometryRequestDenied = 101;
  UIFocusHeadingNone = 0;
  UIFocusHeadingUp = 1;
  UIFocusHeadingDown = 2;
  UIFocusHeadingLeft = 4;
  UIFocusHeadingRight = 8;
  UIFocusHeadingNext = 16;
  UIFocusHeadingPrevious = 32;
  UIFocusHeadingFirst = 256;
  UIFocusHeadingLast = 512;
  UIViewAnimationCurveEaseInOut = 0;
  UIViewAnimationCurveEaseIn = 1;
  UIViewAnimationCurveEaseOut = 2;
  UIViewAnimationCurveLinear = 3;
  UIViewContentModeScaleToFill = 0;
  UIViewContentModeScaleAspectFit = 1;
  UIViewContentModeScaleAspectFill = 2;
  UIViewContentModeRedraw = 3;
  UIViewContentModeCenter = 4;
  UIViewContentModeTop = 5;
  UIViewContentModeBottom = 6;
  UIViewContentModeLeft = 7;
  UIViewContentModeRight = 8;
  UIViewContentModeTopLeft = 9;
  UIViewContentModeTopRight = 10;
  UIViewContentModeBottomLeft = 11;
  UIViewContentModeBottomRight = 12;
  UIViewAnimationTransitionNone = 0;
  UIViewAnimationTransitionFlipFromLeft = 1;
  UIViewAnimationTransitionFlipFromRight = 2;
  UIViewAnimationTransitionCurlUp = 3;
  UIViewAnimationTransitionCurlDown = 4;
  UIViewAutoresizingNone = 0;
  UIViewAutoresizingFlexibleLeftMargin = 1;
  UIViewAutoresizingFlexibleWidth = 2;
  UIViewAutoresizingFlexibleRightMargin = 4;
  UIViewAutoresizingFlexibleTopMargin = 8;
  UIViewAutoresizingFlexibleHeight = 16;
  UIViewAutoresizingFlexibleBottomMargin = 32;
  UIViewAnimationOptionLayoutSubviews = 1;
  UIViewAnimationOptionAllowUserInteraction = 2;
  UIViewAnimationOptionBeginFromCurrentState = 4;
  UIViewAnimationOptionRepeat = 8;
  UIViewAnimationOptionAutoreverse = 16;
  UIViewAnimationOptionOverrideInheritedDuration = 32;
  UIViewAnimationOptionOverrideInheritedCurve = 64;
  UIViewAnimationOptionAllowAnimatedContent = 128;
  UIViewAnimationOptionShowHideTransitionViews = 256;
  UIViewAnimationOptionOverrideInheritedOptions = 512;
  UIViewAnimationOptionCurveEaseInOut = 0;
  UIViewAnimationOptionCurveEaseIn = 65536;
  UIViewAnimationOptionCurveEaseOut = 131072;
  UIViewAnimationOptionCurveLinear = 196608;
  UIViewAnimationOptionTransitionNone = 0;
  UIViewAnimationOptionTransitionFlipFromLeft = 1048576;
  UIViewAnimationOptionTransitionFlipFromRight = 2097152;
  UIViewAnimationOptionTransitionCurlUp = 3145728;
  UIViewAnimationOptionTransitionCurlDown = 4194304;
  UIViewAnimationOptionTransitionCrossDissolve = 5242880;
  UIViewAnimationOptionTransitionFlipFromTop = 6291456;
  UIViewAnimationOptionTransitionFlipFromBottom = 7340032;
  UIViewAnimationOptionPreferredFramesPerSecondDefault = 0;
  UIViewAnimationOptionPreferredFramesPerSecond60 = 50331648;
  UIViewAnimationOptionPreferredFramesPerSecond30 = 117440512;
  UIViewKeyframeAnimationOptionLayoutSubviews = UIViewAnimationOptionLayoutSubviews;
  UIViewKeyframeAnimationOptionAllowUserInteraction = UIViewAnimationOptionAllowUserInteraction;
  UIViewKeyframeAnimationOptionBeginFromCurrentState = UIViewAnimationOptionBeginFromCurrentState;
  UIViewKeyframeAnimationOptionRepeat = UIViewAnimationOptionRepeat;
  UIViewKeyframeAnimationOptionAutoreverse = UIViewAnimationOptionAutoreverse;
  UIViewKeyframeAnimationOptionOverrideInheritedDuration = UIViewAnimationOptionOverrideInheritedDuration;
  UIViewKeyframeAnimationOptionOverrideInheritedOptions = UIViewAnimationOptionOverrideInheritedOptions;
  UIViewKeyframeAnimationOptionCalculationModeLinear = 0;
  UIViewKeyframeAnimationOptionCalculationModeDiscrete = 1024;
  UIViewKeyframeAnimationOptionCalculationModePaced = 2048;
  UIViewKeyframeAnimationOptionCalculationModeCubic = 3072;
  UIViewKeyframeAnimationOptionCalculationModeCubicPaced = 4096;
  UISystemAnimationDelete = 0;
  UIViewTintAdjustmentModeAutomatic = 0;
  UIViewTintAdjustmentModeNormal = 1;
  UIViewTintAdjustmentModeDimmed = 2;
  UISemanticContentAttributeUnspecified = 0;
  UISemanticContentAttributePlayback = 1;
  UISemanticContentAttributeSpatial = 2;
  UISemanticContentAttributeForceLeftToRight = 3;
  UISemanticContentAttributeForceRightToLeft = 4;
  UILayoutConstraintAxisHorizontal = 0;
  UILayoutConstraintAxisVertical = 1;
  UIContextMenuConfigurationElementOrderAutomatic = 0;
  UIContextMenuConfigurationElementOrderPriority = 1;
  UIContextMenuConfigurationElementOrderFixed = 2;
  UIContextMenuInteractionCommitStyleDismiss = 0;
  UIContextMenuInteractionCommitStylePop = 1;
  UIContextMenuInteractionAppearanceUnknown = 0;
  UIContextMenuInteractionAppearanceRich = 1;
  UIContextMenuInteractionAppearanceCompact = 2;
  UIControlEventTouchDown = 1;
  UIControlEventTouchDownRepeat = 2;
  UIControlEventTouchDragInside = 4;
  UIControlEventTouchDragOutside = 8;
  UIControlEventTouchDragEnter = 16;
  UIControlEventTouchDragExit = 32;
  UIControlEventTouchUpInside = 64;
  UIControlEventTouchUpOutside = 128;
  UIControlEventTouchCancel = 256;
  UIControlEventValueChanged = 4096;
  UIControlEventPrimaryActionTriggered = 8192;
  UIControlEventMenuActionTriggered = 16384;
  UIControlEventEditingDidBegin = 65536;
  UIControlEventEditingChanged = 131072;
  UIControlEventEditingDidEnd = 262144;
  UIControlEventEditingDidEndOnExit = 524288;
  UIControlEventAllTouchEvents = 4095;
  UIControlEventAllEditingEvents = 983040;
  UIControlEventApplicationReserved = 251658240;
  UIControlEventSystemReserved = -268435456;
  UIControlEventAllEvents = -1;
  UIControlContentVerticalAlignmentCenter = 0;
  UIControlContentVerticalAlignmentTop = 1;
  UIControlContentVerticalAlignmentBottom = 2;
  UIControlContentVerticalAlignmentFill = 3;
  UIControlContentHorizontalAlignmentCenter = 0;
  UIControlContentHorizontalAlignmentLeft = 1;
  UIControlContentHorizontalAlignmentRight = 2;
  UIControlContentHorizontalAlignmentFill = 3;
  UIControlContentHorizontalAlignmentLeading = 4;
  UIControlContentHorizontalAlignmentTrailing = 5;
  UIControlStateNormal = 0;
  UIControlStateHighlighted = 1;
  UIControlStateDisabled = 2;
  UIControlStateSelected = 4;
  UIControlStateFocused = 8;
  UIControlStateApplication = 16711680;
  UIControlStateReserved = -16777216;
  UIScrollViewIndicatorStyleDefault = 0;
  UIScrollViewIndicatorStyleBlack = 1;
  UIScrollViewIndicatorStyleWhite = 2;
  UIScrollViewKeyboardDismissModeNone = 0;
  UIScrollViewKeyboardDismissModeOnDrag = 1;
  UIScrollViewKeyboardDismissModeInteractive = 2;
  UIScrollViewKeyboardDismissModeOnDragWithAccessory = 3;
  UIScrollViewKeyboardDismissModeInteractiveWithAccessory = 4;
  UIScrollViewIndexDisplayModeAutomatic = 0;
  UIScrollViewIndexDisplayModeAlwaysHidden = 1;
  UIScrollViewContentInsetAdjustmentAutomatic = 0;
  UIScrollViewContentInsetAdjustmentScrollableAxes = 1;
  UIScrollViewContentInsetAdjustmentNever = 2;
  UIScrollViewContentInsetAdjustmentAlways = 3;
  UITextAutocapitalizationTypeNone = 0;
  UITextAutocapitalizationTypeWords = 1;
  UITextAutocapitalizationTypeSentences = 2;
  UITextAutocapitalizationTypeAllCharacters = 3;
  UITextAutocorrectionTypeDefault = 0;
  UITextAutocorrectionTypeNo = 1;
  UITextAutocorrectionTypeYes = 2;
  UITextSpellCheckingTypeDefault = 0;
  UITextSpellCheckingTypeNo = 1;
  UITextSpellCheckingTypeYes = 2;
  UITextSmartQuotesTypeDefault = 0;
  UITextSmartQuotesTypeNo = 1;
  UITextSmartQuotesTypeYes = 2;
  UITextSmartDashesTypeDefault = 0;
  UITextSmartDashesTypeNo = 1;
  UITextSmartDashesTypeYes = 2;
  UITextSmartInsertDeleteTypeDefault = 0;
  UITextSmartInsertDeleteTypeNo = 1;
  UITextSmartInsertDeleteTypeYes = 2;
  UITextInlinePredictionTypeDefault = 0;
  UITextInlinePredictionTypeNo = 1;
  UITextInlinePredictionTypeYes = 2;
  UIKeyboardTypeDefault = 0;
  UIKeyboardTypeASCIICapable = 1;
  UIKeyboardTypeNumbersAndPunctuation = 2;
  UIKeyboardTypeURL = 3;
  UIKeyboardTypeNumberPad = 4;
  UIKeyboardTypePhonePad = 5;
  UIKeyboardTypeNamePhonePad = 6;
  UIKeyboardTypeEmailAddress = 7;
  UIKeyboardTypeDecimalPad = 8;
  UIKeyboardTypeTwitter = 9;
  UIKeyboardTypeWebSearch = 10;
  UIKeyboardTypeASCIICapableNumberPad = 11;
  UIKeyboardTypeAlphabet = UIKeyboardTypeASCIICapable;
  UIKeyboardAppearanceDefault = 0;
  UIKeyboardAppearanceDark = 1;
  UIKeyboardAppearanceLight = 2;
  UIKeyboardAppearanceAlert = UIKeyboardAppearanceDark;
  UIReturnKeyDefault = 0;
  UIReturnKeyGo = 1;
  UIReturnKeyGoogle = 2;
  UIReturnKeyJoin = 3;
  UIReturnKeyNext = 4;
  UIReturnKeyRoute = 5;
  UIReturnKeySearch = 6;
  UIReturnKeySend = 7;
  UIReturnKeyYahoo = 8;
  UIReturnKeyDone = 9;
  UIReturnKeyEmergencyCall = 10;
  UIReturnKeyContinue = 11;
  UITextStorageDirectionForward = 0;
  UITextStorageDirectionBackward = 1;
  UITextLayoutDirectionRight = 2;
  UITextLayoutDirectionLeft = 3;
  UITextLayoutDirectionUp = 4;
  UITextLayoutDirectionDown = 5;
  UITextGranularityCharacter = 0;
  UITextGranularityWord = 1;
  UITextGranularitySentence = 2;
  UITextGranularityParagraph = 3;
  UITextGranularityLine = 4;
  UITextGranularityDocument = 5;
  UITextAlternativeStyleNone = 0;
  UITextAlternativeStyleLowConfidence = 1;
  UIAccessibilityCustomRotorDirectionPrevious = 0;
  UIAccessibilityCustomRotorDirectionNext = 1;
  UIAccessibilityCustomSystemRotorTypeNone = 0;
  UIAccessibilityCustomSystemRotorTypeLink = 1;
  UIAccessibilityCustomSystemRotorTypeVisitedLink = 2;
  UIAccessibilityCustomSystemRotorTypeHeading = 3;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel1 = 4;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel2 = 5;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel3 = 6;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel4 = 7;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel5 = 8;
  UIAccessibilityCustomSystemRotorTypeHeadingLevel6 = 9;
  UIAccessibilityCustomSystemRotorTypeBoldText = 10;
  UIAccessibilityCustomSystemRotorTypeItalicText = 11;
  UIAccessibilityCustomSystemRotorTypeUnderlineText = 12;
  UIAccessibilityCustomSystemRotorTypeMisspelledWord = 13;
  UIAccessibilityCustomSystemRotorTypeImage = 14;
  UIAccessibilityCustomSystemRotorTypeTextField = 15;
  UIAccessibilityCustomSystemRotorTypeTable = 16;
  UIAccessibilityCustomSystemRotorTypeList = 17;
  UIAccessibilityCustomSystemRotorTypeLandmark = 18;
  UILineBreakModeWordWrap = 0;
  UILineBreakModeCharacterWrap = 1;
  UILineBreakModeClip = 2;
  UILineBreakModeHeadTruncation = 3;
  UILineBreakModeTailTruncation = 4;
  UILineBreakModeMiddleTruncation = 5;
  UITextAlignmentLeft = 0;
  UITextAlignmentCenter = 1;
  UITextAlignmentRight = 2;
  UIBaselineAdjustmentAlignBaselines = 0;
  UIBaselineAdjustmentAlignCenters = 1;
  UIBaselineAdjustmentNone = 2;
  UIDropOperationCancel = 0;
  UIDropOperationForbidden = 1;
  UIDropOperationCopy = 2;
  UIDropOperationMove = 3;
  UIViewAnimatingStateInactive = 0;
  UIViewAnimatingStateActive = 1;
  UIViewAnimatingStateStopped = 2;
  UIViewAnimatingPositionEnd = 0;
  UIViewAnimatingPositionStart = 1;
  UIViewAnimatingPositionCurrent = 2;
  UITextDragOptionsNone = 0;
  UITextDragOptionStripTextColorFromPreviews = 1 shl 0;
  UITextDropActionInsert = 0;
  UITextDropActionReplaceSelection = 1;
  UITextDropActionReplaceAll = 2;
  UITextDropProgressModeSystem = 0;
  UITextDropProgressModeCustom = 1;
  UITextDropPerformerView = 0;
  UITextDropPerformerDelegate = 1;
  UITextDropEditabilityNo = 0;
  UITextDropEditabilityTemporary = 1;
  UITextDropEditabilityYes = 2;
  UILetterformAwareSizingRuleTypographic = 0;
  UILetterformAwareSizingRuleOversize = 1;
  UITextBorderStyleNone = 0;
  UITextBorderStyleLine = 1;
  UITextBorderStyleBezel = 2;
  UITextBorderStyleRoundedRect = 3;
  UITextFieldViewModeNever = 0;
  UITextFieldViewModeWhileEditing = 1;
  UITextFieldViewModeUnlessEditing = 2;
  UITextFieldViewModeAlways = 3;
  UITextFieldDidEndEditingReasonCommitted = 0;
  UITextFieldDidEndEditingReasonCancelled = 1;
  UIActionSheetStyleAutomatic = -1;
  UIActionSheetStyleDefault = UIBarStyleDefault;
  UIActionSheetStyleBlackTranslucent = UIBarStyleBlackTranslucent;
  UIActionSheetStyleBlackOpaque = UIBarStyleBlackOpaque;
  UIAlertViewStyleDefault = 0;
  UIAlertViewStyleSecureTextInput = 1;
  UIAlertViewStylePlainTextInput = 2;
  UIAlertViewStyleLoginAndPasswordInput = 3;
  UIStatusBarStyleDefault = 0;
  UIStatusBarStyleLightContent = 1;
  UIStatusBarStyleDarkContent = 3;
  UIStatusBarStyleBlackTranslucent = 1;
  UIStatusBarStyleBlackOpaque = 2;
  UIStatusBarAnimationNone = 0;
  UIStatusBarAnimationFade = 1;
  UIStatusBarAnimationSlide = 2;
  UIRemoteNotificationTypeNone = 0;
  UIRemoteNotificationTypeBadge = 1;
  UIRemoteNotificationTypeSound = 2;
  UIRemoteNotificationTypeAlert = 4;
  UIRemoteNotificationTypeNewsstandContentAvailability = 8;
  UIBackgroundFetchResultNewData = 0;
  UIBackgroundFetchResultNoData = 1;
  UIBackgroundFetchResultFailed = 2;
  UIBackgroundRefreshStatusRestricted = 0;
  UIBackgroundRefreshStatusDenied = 1;
  UIBackgroundRefreshStatusAvailable = 2;
  UIApplicationStateActive = 0;
  UIApplicationStateInactive = 1;
  UIApplicationStateBackground = 2;
  UIModalTransitionStyleCoverVertical = 0;
  UIModalTransitionStyleFlipHorizontal = 1;
  UIModalTransitionStyleCrossDissolve = 2;
  UIModalTransitionStylePartialCurl = 3;
  UIModalPresentationFullScreen = 0;
  UIModalPresentationPageSheet = 1;
  UIModalPresentationFormSheet = 2;
  UIModalPresentationCurrentContext = 3;
  UIModalPresentationCustom = 4;
  UIModalPresentationOverFullScreen = 5;
  UIModalPresentationOverCurrentContext = 6;
  UIModalPresentationPopover = 7;
  UIModalPresentationBlurOverFullScreen = 8;
  UIModalPresentationNone = -1;
  UIModalPresentationAutomatic = -2;
  UIContainerBackgroundStyleAutomatic = 0;
  UIContainerBackgroundStyleGlass = 1;
  UIContainerBackgroundStyleHidden = 2;
  UIPreviewActionStyleDefault = 0;
  UIPreviewActionStyleSelected = 1;
  UIPreviewActionStyleDestructive = 2;
  UIAlertActionStyleDefault = 0;
  UIAlertActionStyleCancel = 1;
  UIAlertActionStyleDestructive = 2;
  UIAlertControllerStyleActionSheet = 0;
  UIAlertControllerStyleAlert = 1;
  UIAlertControllerSeverityDefault = 0;
  UIAlertControllerSeverityCritical = 1;
  UIAccessibilityZoomTypeInsertionPoint = 0;
  UIGuidedAccessErrorPermissionDenied = 0;
  UIGuidedAccessErrorFailed = 2147483647;
  UIGuidedAccessRestrictionStateAllow = 0;
  UIGuidedAccessRestrictionStateDeny = 1;
  UIGuidedAccessAccessibilityFeatureVoiceOver = 1;
  UIGuidedAccessAccessibilityFeatureZoom = 2;
  UIGuidedAccessAccessibilityFeatureAssistiveTouch = 4;
  UIGuidedAccessAccessibilityFeatureInvertColors = 8;
  UIGuidedAccessAccessibilityFeatureGrayscaleDisplay = 16;
  UIAccessibilityScrollDirectionRight = 1;
  UIAccessibilityScrollDirectionLeft = 2;
  UIAccessibilityScrollDirectionUp = 3;
  UIAccessibilityScrollDirectionDown = 4;
  UIAccessibilityScrollDirectionNext = 5;
  UIAccessibilityScrollDirectionPrevious = 6;
  UIAccessibilityHearingDeviceEarNone = 0;
  UIAccessibilityHearingDeviceEarLeft = 2;
  UIAccessibilityHearingDeviceEarRight = 4;
  UIAccessibilityHearingDeviceEarBoth = 6;
  UIButtonConfigurationSizeMedium = 0;
  UIButtonConfigurationSizeSmall = 1;
  UIButtonConfigurationSizeMini = 2;
  UIButtonConfigurationSizeLarge = 3;
  UIButtonConfigurationTitleAlignmentAutomatic = 0;
  UIButtonConfigurationTitleAlignmentLeading = 1;
  UIButtonConfigurationTitleAlignmentCenter = 2;
  UIButtonConfigurationTitleAlignmentTrailing = 3;
  UIButtonConfigurationCornerStyleFixed = -1;
  UIButtonConfigurationCornerStyleDynamic = 0;
  UIButtonConfigurationCornerStyleSmall = 1;
  UIButtonConfigurationCornerStyleMedium = 2;
  UIButtonConfigurationCornerStyleLarge = 3;
  UIButtonConfigurationCornerStyleCapsule = 4;
  UIButtonConfigurationMacIdiomStyleAutomatic = 0;
  UIButtonConfigurationMacIdiomStyleBordered = 1;
  UIButtonConfigurationMacIdiomStyleBorderless = 2;
  UIButtonConfigurationMacIdiomStyleBorderlessTinted = 3;
  UIButtonConfigurationIndicatorAutomatic = 0;
  UIButtonConfigurationIndicatorNone = 1;
  UIButtonConfigurationIndicatorPopup = 2;
  UIButtonTypeCustom = 0;
  UIButtonTypeSystem = 1;
  UIButtonTypeDetailDisclosure = 2;
  UIButtonTypeInfoLight = 3;
  UIButtonTypeInfoDark = 4;
  UIButtonTypeContactAdd = 5;
  UIButtonTypePlain = 6;
  UIButtonTypeClose = 7;
  UIButtonTypeRoundedRect = UIButtonTypeSystem;
  UIButtonRoleNormal = 0;
  UIButtonRolePrimary = 1;
  UIButtonRoleCancel = 2;
  UIButtonRoleDestructive = 3;
  UIActivityIndicatorViewStyleMedium = 100;
  UIActivityIndicatorViewStyleLarge = 101;
  UIActivityIndicatorViewStyleWhiteLarge = 0;
  UIActivityIndicatorViewStyleWhite = 1;
  UIActivityIndicatorViewStyleGray = 2;
  UIBarMetricsDefault = 0;
  UIBarMetricsCompact = 1;
  UIBarMetricsDefaultPrompt = 101;
  UIBarMetricsCompactPrompt = 102;
  UIBarMetricsLandscapePhone = UIBarMetricsCompact;
  UIBarMetricsLandscapePhonePrompt = UIBarMetricsCompactPrompt;
  UIBarPositionAny = 0;
  UIBarPositionBottom = 1;
  UIBarPositionTop = 2;
  UIBarPositionTopAttached = 3;
  UIToolbarPositionAny = UIBarPositionAny;
  UIToolbarPositionBottom = UIBarPositionBottom;
  UIToolbarPositionTop = UIBarPositionTop;
  UIBarButtonItemStylePlain = 0;
  UIBarButtonItemStyleBordered = 1;
  UIBarButtonItemStyleDone = 2;
  UIBarButtonSystemItemDone = 0;
  UIBarButtonSystemItemCancel = 1;
  UIBarButtonSystemItemEdit = 2;
  UIBarButtonSystemItemSave = 3;
  UIBarButtonSystemItemAdd = 4;
  UIBarButtonSystemItemFlexibleSpace = 5;
  UIBarButtonSystemItemFixedSpace = 6;
  UIBarButtonSystemItemCompose = 7;
  UIBarButtonSystemItemReply = 8;
  UIBarButtonSystemItemAction = 9;
  UIBarButtonSystemItemOrganize = 10;
  UIBarButtonSystemItemBookmarks = 11;
  UIBarButtonSystemItemSearch = 12;
  UIBarButtonSystemItemRefresh = 13;
  UIBarButtonSystemItemStop = 14;
  UIBarButtonSystemItemCamera = 15;
  UIBarButtonSystemItemTrash = 16;
  UIBarButtonSystemItemPlay = 17;
  UIBarButtonSystemItemPause = 18;
  UIBarButtonSystemItemRewind = 19;
  UIBarButtonSystemItemFastForward = 20;
  UIBarButtonSystemItemUndo = 21;
  UIBarButtonSystemItemRedo = 22;
  UIBarButtonSystemItemPageCurl = 23;
  UIBarButtonSystemItemClose = 24;
  UICollectionViewScrollPositionNone = 0;
  UICollectionViewScrollPositionTop = 1;
  UICollectionViewScrollPositionCenteredVertically = 2;
  UICollectionViewScrollPositionBottom = 4;
  UICollectionViewScrollPositionLeft = 8;
  UICollectionViewScrollPositionCenteredHorizontally = 16;
  UICollectionViewScrollPositionRight = 32;
  UICollectionViewReorderingCadenceImmediate = 0;
  UICollectionViewReorderingCadenceFast = 1;
  UICollectionViewReorderingCadenceSlow = 2;
  UICollectionViewSelfSizingInvalidationDisabled = 0;
  UICollectionViewSelfSizingInvalidationEnabled = 1;
  UICollectionViewSelfSizingInvalidationEnabledIncludingConstraints = 2;
  UICollectionViewDropIntentUnspecified = 0;
  UICollectionViewDropIntentInsertAtDestinationIndexPath = 1;
  UICollectionViewDropIntentInsertIntoDestinationIndexPath = 2;
  UICollectionViewCellDragStateNone = 0;
  UICollectionViewCellDragStateLifting = 1;
  UICollectionViewCellDragStateDragging = 2;
  UICollectionUpdateActionInsert = 0;
  UICollectionUpdateActionDelete = 1;
  UICollectionUpdateActionReload = 2;
  UICollectionUpdateActionMove = 3;
  UICollectionUpdateActionNone = 4;
  UICollectionViewScrollDirectionVertical = 0;
  UICollectionViewScrollDirectionHorizontal = 1;
  UICollectionElementCategoryCell = 0;
  UICollectionElementCategorySupplementaryView = 1;
  UICollectionElementCategoryDecorationView = 2;
  UICollectionViewFlowLayoutSectionInsetFromContentInset = 0;
  UICollectionViewFlowLayoutSectionInsetFromSafeArea = 1;
  UICollectionViewFlowLayoutSectionInsetFromLayoutMargins = 2;
  UIContentInsetsReferenceAutomatic = 0;
  UIContentInsetsReferenceNone = 1;
  UIContentInsetsReferenceSafeArea = 2;
  UIContentInsetsReferenceLayoutMargins = 3;
  UIContentInsetsReferenceReadableContent = 4;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorNone = 0;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorContinuous = 1;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorContinuousGroupLeadingBoundary = 2;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorPaging = 3;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorGroupPaging = 4;
  UICollectionLayoutSectionOrthogonalScrollingBehaviorGroupPagingCentered = 5;
  UICollectionLayoutSectionOrthogonalScrollingBounceAutomatic = 0;
  UICollectionLayoutSectionOrthogonalScrollingBounceAlways = 1;
  UICollectionLayoutSectionOrthogonalScrollingBounceNever = 2;
  UICellAccessoryDisplayedAlways = 0;
  UICellAccessoryDisplayedWhenEditing = 1;
  UICellAccessoryDisplayedWhenNotEditing = 2;
  UICellAccessoryOutlineDisclosureStyleAutomatic = 0;
  UICellAccessoryOutlineDisclosureStyleHeader = 1;
  UICellAccessoryOutlineDisclosureStyleCell = 2;
  UICellAccessoryPlacementLeading = 0;
  UICellAccessoryPlacementTrailing = 1;
  UIGestureRecognizerStatePossible = 0;
  UIGestureRecognizerStateBegan = 1;
  UIGestureRecognizerStateChanged = 2;
  UIGestureRecognizerStateEnded = 3;
  UIGestureRecognizerStateCancelled = 4;
  UIGestureRecognizerStateFailed = 5;
  UIGestureRecognizerStateRecognized = UIGestureRecognizerStateEnded;
  UISwipeGestureRecognizerDirectionRight = 1;
  UISwipeGestureRecognizerDirectionLeft = 2;
  UISwipeGestureRecognizerDirectionUp = 4;
  UISwipeGestureRecognizerDirectionDown = 8;
  UIContextualActionStyleNormal = 0;
  UIContextualActionStyleDestructive = 1;
  UITableViewCellStyleDefault = 0;
  UITableViewCellStyleValue1 = 1;
  UITableViewCellStyleValue2 = 2;
  UITableViewCellStyleSubtitle = 3;
  UITableViewCellSeparatorStyleNone = 0;
  UITableViewCellSeparatorStyleSingleLine = 1;
  UITableViewCellSeparatorStyleSingleLineEtched = 2;
  UITableViewCellSelectionStyleNone = 0;
  UITableViewCellSelectionStyleBlue = 1;
  UITableViewCellSelectionStyleGray = 2;
  UITableViewCellSelectionStyleDefault = 3;
  UITableViewCellFocusStyleDefault = 0;
  UITableViewCellFocusStyleCustom = 1;
  UITableViewCellEditingStyleNone = 0;
  UITableViewCellEditingStyleDelete = 1;
  UITableViewCellEditingStyleInsert = 2;
  UITableViewCellAccessoryNone = 0;
  UITableViewCellAccessoryDisclosureIndicator = 1;
  UITableViewCellAccessoryDetailDisclosureButton = 2;
  UITableViewCellAccessoryCheckmark = 3;
  UITableViewCellAccessoryDetailButton = 4;
  UITableViewCellStateDefaultMask = 0;
  UITableViewCellStateShowingEditControlMask = 1;
  UITableViewCellStateEditingMask = UITableViewCellStateShowingEditControlMask;
  UITableViewCellStateShowingDeleteConfirmationMask = 2;
  UITableViewCellDragStateNone = 0;
  UITableViewCellDragStateLifting = 1;
  UITableViewCellDragStateDragging = 2;
  UITableViewStylePlain = 0;
  UITableViewStyleGrouped = 1;
  UITableViewStyleInsetGrouped = 2;
  UITableViewScrollPositionNone = 0;
  UITableViewScrollPositionTop = 1;
  UITableViewScrollPositionMiddle = 2;
  UITableViewScrollPositionBottom = 3;
  UITableViewRowAnimationFade = 0;
  UITableViewRowAnimationRight = 1;
  UITableViewRowAnimationLeft = 2;
  UITableViewRowAnimationTop = 3;
  UITableViewRowAnimationBottom = 4;
  UITableViewRowAnimationNone = 5;
  UITableViewRowAnimationMiddle = 6;
  UITableViewRowAnimationAutomatic = 100;
  UITableViewRowActionStyleDefault = 0;
  UITableViewRowActionStyleDestructive = UITableViewRowActionStyleDefault;
  UITableViewRowActionStyleNormal = 1;
  UITableViewSeparatorInsetFromCellEdges = 0;
  UITableViewSeparatorInsetFromAutomaticInsets = 1;
  UITableViewSelfSizingInvalidationDisabled = 0;
  UITableViewSelfSizingInvalidationEnabled = 1;
  UITableViewSelfSizingInvalidationEnabledIncludingConstraints = 2;
  UITableViewDropIntentUnspecified = 0;
  UITableViewDropIntentInsertAtDestinationIndexPath = 1;
  UITableViewDropIntentInsertIntoDestinationIndexPath = 2;
  UITableViewDropIntentAutomatic = 3;
  UICollectionLayoutListAppearancePlain = 0;
  UICollectionLayoutListAppearanceGrouped = 1;
  UICollectionLayoutListAppearanceInsetGrouped = 2;
  UICollectionLayoutListAppearanceSidebar = 3;
  UICollectionLayoutListAppearanceSidebarPlain = 4;
  UICollectionLayoutListHeaderModeNone = 0;
  UICollectionLayoutListHeaderModeSupplementary = 1;
  UICollectionLayoutListHeaderModeFirstItemInSection = 2;
  UICollectionLayoutListFooterModeNone = 0;
  UICollectionLayoutListFooterModeSupplementary = 1;
  UIListSeparatorVisibilityAutomatic = 0;
  UIListSeparatorVisibilityVisible = 1;
  UIListSeparatorVisibilityHidden = 2;
  UICellConfigurationDragStateNone = 0;
  UICellConfigurationDragStateLifting = 1;
  UICellConfigurationDragStateDragging = 2;
  UICellConfigurationDropStateNone = 0;
  UICellConfigurationDropStateNotTargeted = 1;
  UICellConfigurationDropStateTargeted = 2;
  UIListContentTextAlignmentNatural = 0;
  UIListContentTextAlignmentCenter = 1;
  UIListContentTextAlignmentJustified = 2;
  UIListContentTextTransformNone = 0;
  UIListContentTextTransformUppercase = 1;
  UIListContentTextTransformLowercase = 2;
  UIListContentTextTransformCapitalized = 3;
  UIKeyboardHIDUsageKeyboardErrorRollOver = 1;
  UIKeyboardHIDUsageKeyboardPOSTFail = 2;
  UIKeyboardHIDUsageKeyboardErrorUndefined = 3;
  UIKeyboardHIDUsageKeyboardA = 4;
  UIKeyboardHIDUsageKeyboardB = 5;
  UIKeyboardHIDUsageKeyboardC = 6;
  UIKeyboardHIDUsageKeyboardD = 7;
  UIKeyboardHIDUsageKeyboardE = 8;
  UIKeyboardHIDUsageKeyboardF = 9;
  UIKeyboardHIDUsageKeyboardG = 10;
  UIKeyboardHIDUsageKeyboardH = 11;
  UIKeyboardHIDUsageKeyboardI = 12;
  UIKeyboardHIDUsageKeyboardJ = 13;
  UIKeyboardHIDUsageKeyboardK = 14;
  UIKeyboardHIDUsageKeyboardL = 15;
  UIKeyboardHIDUsageKeyboardM = 16;
  UIKeyboardHIDUsageKeyboardN = 17;
  UIKeyboardHIDUsageKeyboardO = 18;
  UIKeyboardHIDUsageKeyboardP = 19;
  UIKeyboardHIDUsageKeyboardQ = 20;
  UIKeyboardHIDUsageKeyboardR = 21;
  UIKeyboardHIDUsageKeyboardS = 22;
  UIKeyboardHIDUsageKeyboardT = 23;
  UIKeyboardHIDUsageKeyboardU = 24;
  UIKeyboardHIDUsageKeyboardV = 25;
  UIKeyboardHIDUsageKeyboardW = 26;
  UIKeyboardHIDUsageKeyboardX = 27;
  UIKeyboardHIDUsageKeyboardY = 28;
  UIKeyboardHIDUsageKeyboardZ = 29;
  UIKeyboardHIDUsageKeyboard1 = 30;
  UIKeyboardHIDUsageKeyboard2 = 31;
  UIKeyboardHIDUsageKeyboard3 = 32;
  UIKeyboardHIDUsageKeyboard4 = 33;
  UIKeyboardHIDUsageKeyboard5 = 34;
  UIKeyboardHIDUsageKeyboard6 = 35;
  UIKeyboardHIDUsageKeyboard7 = 36;
  UIKeyboardHIDUsageKeyboard8 = 37;
  UIKeyboardHIDUsageKeyboard9 = 38;
  UIKeyboardHIDUsageKeyboard0 = 39;
  UIKeyboardHIDUsageKeyboardReturnOrEnter = 40;
  UIKeyboardHIDUsageKeyboardEscape = 41;
  UIKeyboardHIDUsageKeyboardDeleteOrBackspace = 42;
  UIKeyboardHIDUsageKeyboardTab = 43;
  UIKeyboardHIDUsageKeyboardSpacebar = 44;
  UIKeyboardHIDUsageKeyboardHyphen = 45;
  UIKeyboardHIDUsageKeyboardEqualSign = 46;
  UIKeyboardHIDUsageKeyboardOpenBracket = 47;
  UIKeyboardHIDUsageKeyboardCloseBracket = 48;
  UIKeyboardHIDUsageKeyboardBackslash = 49;
  UIKeyboardHIDUsageKeyboardNonUSPound = 50;
  UIKeyboardHIDUsageKeyboardSemicolon = 51;
  UIKeyboardHIDUsageKeyboardQuote = 52;
  UIKeyboardHIDUsageKeyboardGraveAccentAndTilde = 53;
  UIKeyboardHIDUsageKeyboardComma = 54;
  UIKeyboardHIDUsageKeyboardPeriod = 55;
  UIKeyboardHIDUsageKeyboardSlash = 56;
  UIKeyboardHIDUsageKeyboardCapsLock = 57;
  UIKeyboardHIDUsageKeyboardF1 = 58;
  UIKeyboardHIDUsageKeyboardF2 = 59;
  UIKeyboardHIDUsageKeyboardF3 = 60;
  UIKeyboardHIDUsageKeyboardF4 = 61;
  UIKeyboardHIDUsageKeyboardF5 = 62;
  UIKeyboardHIDUsageKeyboardF6 = 63;
  UIKeyboardHIDUsageKeyboardF7 = 64;
  UIKeyboardHIDUsageKeyboardF8 = 65;
  UIKeyboardHIDUsageKeyboardF9 = 66;
  UIKeyboardHIDUsageKeyboardF10 = 67;
  UIKeyboardHIDUsageKeyboardF11 = 68;
  UIKeyboardHIDUsageKeyboardF12 = 69;
  UIKeyboardHIDUsageKeyboardPrintScreen = 70;
  UIKeyboardHIDUsageKeyboardScrollLock = 71;
  UIKeyboardHIDUsageKeyboardPause = 72;
  UIKeyboardHIDUsageKeyboardInsert = 73;
  UIKeyboardHIDUsageKeyboardHome = 74;
  UIKeyboardHIDUsageKeyboardPageUp = 75;
  UIKeyboardHIDUsageKeyboardDeleteForward = 76;
  UIKeyboardHIDUsageKeyboardEnd = 77;
  UIKeyboardHIDUsageKeyboardPageDown = 78;
  UIKeyboardHIDUsageKeyboardRightArrow = 79;
  UIKeyboardHIDUsageKeyboardLeftArrow = 80;
  UIKeyboardHIDUsageKeyboardDownArrow = 81;
  UIKeyboardHIDUsageKeyboardUpArrow = 82;
  UIKeyboardHIDUsageKeypadNumLock = 83;
  UIKeyboardHIDUsageKeypadSlash = 84;
  UIKeyboardHIDUsageKeypadAsterisk = 85;
  UIKeyboardHIDUsageKeypadHyphen = 86;
  UIKeyboardHIDUsageKeypadPlus = 87;
  UIKeyboardHIDUsageKeypadEnter = 88;
  UIKeyboardHIDUsageKeypad1 = 89;
  UIKeyboardHIDUsageKeypad2 = 90;
  UIKeyboardHIDUsageKeypad3 = 91;
  UIKeyboardHIDUsageKeypad4 = 92;
  UIKeyboardHIDUsageKeypad5 = 93;
  UIKeyboardHIDUsageKeypad6 = 94;
  UIKeyboardHIDUsageKeypad7 = 95;
  UIKeyboardHIDUsageKeypad8 = 96;
  UIKeyboardHIDUsageKeypad9 = 97;
  UIKeyboardHIDUsageKeypad0 = 98;
  UIKeyboardHIDUsageKeypadPeriod = 99;
  UIKeyboardHIDUsageKeyboardNonUSBackslash = 100;
  UIKeyboardHIDUsageKeyboardApplication = 101;
  UIKeyboardHIDUsageKeyboardPower = 102;
  UIKeyboardHIDUsageKeypadEqualSign = 103;
  UIKeyboardHIDUsageKeyboardF13 = 104;
  UIKeyboardHIDUsageKeyboardF14 = 105;
  UIKeyboardHIDUsageKeyboardF15 = 106;
  UIKeyboardHIDUsageKeyboardF16 = 107;
  UIKeyboardHIDUsageKeyboardF17 = 108;
  UIKeyboardHIDUsageKeyboardF18 = 109;
  UIKeyboardHIDUsageKeyboardF19 = 110;
  UIKeyboardHIDUsageKeyboardF20 = 111;
  UIKeyboardHIDUsageKeyboardF21 = 112;
  UIKeyboardHIDUsageKeyboardF22 = 113;
  UIKeyboardHIDUsageKeyboardF23 = 114;
  UIKeyboardHIDUsageKeyboardF24 = 115;
  UIKeyboardHIDUsageKeyboardExecute = 116;
  UIKeyboardHIDUsageKeyboardHelp = 117;
  UIKeyboardHIDUsageKeyboardMenu = 118;
  UIKeyboardHIDUsageKeyboardSelect = 119;
  UIKeyboardHIDUsageKeyboardStop = 120;
  UIKeyboardHIDUsageKeyboardAgain = 121;
  UIKeyboardHIDUsageKeyboardUndo = 122;
  UIKeyboardHIDUsageKeyboardCut = 123;
  UIKeyboardHIDUsageKeyboardCopy = 124;
  UIKeyboardHIDUsageKeyboardPaste = 125;
  UIKeyboardHIDUsageKeyboardFind = 126;
  UIKeyboardHIDUsageKeyboardMute = 127;
  UIKeyboardHIDUsageKeyboardVolumeUp = 128;
  UIKeyboardHIDUsageKeyboardVolumeDown = 129;
  UIKeyboardHIDUsageKeyboardLockingCapsLock = 130;
  UIKeyboardHIDUsageKeyboardLockingNumLock = 131;
  UIKeyboardHIDUsageKeyboardLockingScrollLock = 132;
  UIKeyboardHIDUsageKeypadComma = 133;
  UIKeyboardHIDUsageKeypadEqualSignAS400 = 134;
  UIKeyboardHIDUsageKeyboardInternational1 = 135;
  UIKeyboardHIDUsageKeyboardInternational2 = 136;
  UIKeyboardHIDUsageKeyboardInternational3 = 137;
  UIKeyboardHIDUsageKeyboardInternational4 = 138;
  UIKeyboardHIDUsageKeyboardInternational5 = 139;
  UIKeyboardHIDUsageKeyboardInternational6 = 140;
  UIKeyboardHIDUsageKeyboardInternational7 = 141;
  UIKeyboardHIDUsageKeyboardInternational8 = 142;
  UIKeyboardHIDUsageKeyboardInternational9 = 143;
  UIKeyboardHIDUsageKeyboardLANG1 = 144;
  UIKeyboardHIDUsageKeyboardLANG2 = 145;
  UIKeyboardHIDUsageKeyboardLANG3 = 146;
  UIKeyboardHIDUsageKeyboardLANG4 = 147;
  UIKeyboardHIDUsageKeyboardLANG5 = 148;
  UIKeyboardHIDUsageKeyboardLANG6 = 149;
  UIKeyboardHIDUsageKeyboardLANG7 = 150;
  UIKeyboardHIDUsageKeyboardLANG8 = 151;
  UIKeyboardHIDUsageKeyboardLANG9 = 152;
  UIKeyboardHIDUsageKeyboardAlternateErase = 153;
  UIKeyboardHIDUsageKeyboardSysReqOrAttention = 154;
  UIKeyboardHIDUsageKeyboardCancel = 155;
  UIKeyboardHIDUsageKeyboardClear = 156;
  UIKeyboardHIDUsageKeyboardPrior = 157;
  UIKeyboardHIDUsageKeyboardReturn = 158;
  UIKeyboardHIDUsageKeyboardSeparator = 159;
  UIKeyboardHIDUsageKeyboardOut = 160;
  UIKeyboardHIDUsageKeyboardOper = 161;
  UIKeyboardHIDUsageKeyboardClearOrAgain = 162;
  UIKeyboardHIDUsageKeyboardCrSelOrProps = 163;
  UIKeyboardHIDUsageKeyboardExSel = 164;
  UIKeyboardHIDUsageKeyboardLeftControl = 224;
  UIKeyboardHIDUsageKeyboardLeftShift = 225;
  UIKeyboardHIDUsageKeyboardLeftAlt = 226;
  UIKeyboardHIDUsageKeyboardLeftGUI = 227;
  UIKeyboardHIDUsageKeyboardRightControl = 228;
  UIKeyboardHIDUsageKeyboardRightShift = 229;
  UIKeyboardHIDUsageKeyboardRightAlt = 230;
  UIKeyboardHIDUsageKeyboardRightGUI = 231;
  UIKeyboardHIDUsageKeyboard_Reserved = 65535;
  UIKeyboardHIDUsageKeyboardHangul = UIKeyboardHIDUsageKeyboardLANG1;
  UIKeyboardHIDUsageKeyboardHanja = UIKeyboardHIDUsageKeyboardLANG2;
  UIKeyboardHIDUsageKeyboardKanaSwitch = UIKeyboardHIDUsageKeyboardLANG1;
  UIKeyboardHIDUsageKeyboardAlphanumericSwitch = UIKeyboardHIDUsageKeyboardLANG2;
  UIKeyboardHIDUsageKeyboardKatakana = UIKeyboardHIDUsageKeyboardLANG3;
  UIKeyboardHIDUsageKeyboardHiragana = UIKeyboardHIDUsageKeyboardLANG4;
  UIKeyboardHIDUsageKeyboardZenkakuHankakuKanji = UIKeyboardHIDUsageKeyboardLANG5;
  UIDataDetectorTypePhoneNumber = 1;
  UIDataDetectorTypeLink = 2;
  UIDataDetectorTypeAddress = 4;
  UIDataDetectorTypeCalendarEvent = 8;
  UIDataDetectorTypeShipmentTrackingNumber = 16;
  UIDataDetectorTypeFlightNumber = 32;
  UIDataDetectorTypeLookupSuggestion = 64;
  UIDataDetectorTypeMoney = 128;
  UIDataDetectorTypePhysicalValue = 256;
  UIDataDetectorTypeNone = 0;
  UIDataDetectorTypeAll = -1;
  UIDatePickerModeTime = 0;
  UIDatePickerModeDate = 1;
  UIDatePickerModeDateAndTime = 2;
  UIDatePickerModeCountDownTimer = 3;
  UIDatePickerModeYearAndMonth = 4;
  UIDatePickerStyleAutomatic = 0;
  UIDatePickerStyleWheels = 1;
  UIDatePickerStyleCompact = 2;
  UIDatePickerStyleInline = 3;
  UINavigationItemLargeTitleDisplayModeAutomatic = 0;
  UINavigationItemLargeTitleDisplayModeAlways = 1;
  UINavigationItemLargeTitleDisplayModeNever = 2;
  UINavigationItemLargeTitleDisplayModeInline = 3;
  UINavigationItemBackButtonDisplayModeDefault = 0;
  UINavigationItemBackButtonDisplayModeGeneric = 1;
  UINavigationItemBackButtonDisplayModeMinimal = 2;
  UINavigationItemSearchBarPlacementAutomatic = 0;
  UINavigationItemSearchBarPlacementInline = 1;
  UINavigationItemSearchBarPlacementStacked = 2;
  UINavigationItemStyleNavigator = 0;
  UINavigationItemStyleBrowser = 1;
  UINavigationItemStyleEditor = 2;
  UIDocumentChangeDone = 0;
  UIDocumentChangeUndone = 1;
  UIDocumentChangeRedone = 2;
  UIDocumentChangeCleared = 3;
  UIDocumentSaveForCreating = 0;
  UIDocumentSaveForOverwriting = 1;
  UIDocumentStateNormal = 0;
  UIDocumentStateClosed = 1;
  UIDocumentStateInConflict = 2;
  UIDocumentStateSavingError = 4;
  UIDocumentStateEditingDisabled = 8;
  UIDocumentStateProgressAvailable = 16;
  UIDocumentPickerModeImport = 0;
  UIDocumentPickerModeOpen = 1;
  UIDocumentPickerModeExportToService = 2;
  UIDocumentPickerModeMoveToService = 3;
  UIDocumentMenuOrderFirst = 0;
  UIDocumentMenuOrderLast = 1;
  UICloudSharingPermissionStandard = 0;
  UICloudSharingPermissionAllowPublic = 1;
  UICloudSharingPermissionAllowPrivate = 2;
  UICloudSharingPermissionAllowReadOnly = 4;
  UICloudSharingPermissionAllowReadWrite = 8;
  UIBlurEffectStyleExtraLight = 0;
  UIBlurEffectStyleLight = 1;
  UIBlurEffectStyleDark = 2;
  UIBlurEffectStyleExtraDark = 3;
  UIBlurEffectStyleRegular = 4;
  UIBlurEffectStyleProminent = 5;
  UIBlurEffectStyleSystemUltraThinMaterial = 6;
  UIBlurEffectStyleSystemThinMaterial = 7;
  UIBlurEffectStyleSystemMaterial = 8;
  UIBlurEffectStyleSystemThickMaterial = 9;
  UIBlurEffectStyleSystemChromeMaterial = 10;
  UIBlurEffectStyleSystemUltraThinMaterialLight = 11;
  UIBlurEffectStyleSystemThinMaterialLight = 12;
  UIBlurEffectStyleSystemMaterialLight = 13;
  UIBlurEffectStyleSystemThickMaterialLight = 14;
  UIBlurEffectStyleSystemChromeMaterialLight = 15;
  UIBlurEffectStyleSystemUltraThinMaterialDark = 16;
  UIBlurEffectStyleSystemThinMaterialDark = 17;
  UIBlurEffectStyleSystemMaterialDark = 18;
  UIBlurEffectStyleSystemThickMaterialDark = 19;
  UIBlurEffectStyleSystemChromeMaterialDark = 20;
  UIVibrancyEffectStyleLabel = 0;
  UIVibrancyEffectStyleSecondaryLabel = 1;
  UIVibrancyEffectStyleTertiaryLabel = 2;
  UIVibrancyEffectStyleQuaternaryLabel = 3;
  UIVibrancyEffectStyleFill = 4;
  UIVibrancyEffectStyleSecondaryFill = 5;
  UIVibrancyEffectStyleTertiaryFill = 6;
  UIVibrancyEffectStyleSeparator = 7;
  UIGraphicsImageRendererFormatRangeUnspecified = -1;
  UIGraphicsImageRendererFormatRangeAutomatic = 0;
  UIGraphicsImageRendererFormatRangeExtended = 1;
  UIGraphicsImageRendererFormatRangeStandard = 2;
  UIScrollTypeDiscrete = 0;
  UIScrollTypeContinuous = 1;
  UIScrollTypeMaskDiscrete = 1;
  UIScrollTypeMaskContinuous = 2;
  UIScrollTypeMaskAll = 3;
  UINavigationControllerOperationNone = 0;
  UINavigationControllerOperationPush = 1;
  UINavigationControllerOperationPop = 2;
  UIImagePickerControllerSourceTypePhotoLibrary = 0;
  UIImagePickerControllerSourceTypeCamera = 1;
  UIImagePickerControllerSourceTypeSavedPhotosAlbum = 2;
  UIImagePickerControllerQualityTypeHigh = 0;
  UIImagePickerControllerQualityTypeMedium = 1;
  UIImagePickerControllerQualityTypeLow = 2;
  UIImagePickerControllerQualityType640x480 = 3;
  UIImagePickerControllerQualityTypeIFrame1280x720 = 4;
  UIImagePickerControllerQualityTypeIFrame960x540 = 5;
  UIImagePickerControllerCameraCaptureModePhoto = 0;
  UIImagePickerControllerCameraCaptureModeVideo = 1;
  UIImagePickerControllerCameraDeviceRear = 0;
  UIImagePickerControllerCameraDeviceFront = 1;
  UIImagePickerControllerCameraFlashModeOff = -1;
  UIImagePickerControllerCameraFlashModeAuto = 0;
  UIImagePickerControllerCameraFlashModeOn = 1;
  UIImagePickerControllerImageURLExportPresetCompatible = 0;
  UIImagePickerControllerImageURLExportPresetCurrent = 1;
  UIInputViewStyleDefault = 0;
  UIInputViewStyleKeyboard = 1;
  UILabelVibrancyNone = 0;
  UILabelVibrancyAutomatic = 1;
  UIApplicationShortcutIconTypeCompose = 0;
  UIApplicationShortcutIconTypePlay = 1;
  UIApplicationShortcutIconTypePause = 2;
  UIApplicationShortcutIconTypeAdd = 3;
  UIApplicationShortcutIconTypeLocation = 4;
  UIApplicationShortcutIconTypeSearch = 5;
  UIApplicationShortcutIconTypeShare = 6;
  UIApplicationShortcutIconTypeProhibit = 7;
  UIApplicationShortcutIconTypeContact = 8;
  UIApplicationShortcutIconTypeHome = 9;
  UIApplicationShortcutIconTypeMarkLocation = 10;
  UIApplicationShortcutIconTypeFavorite = 11;
  UIApplicationShortcutIconTypeLove = 12;
  UIApplicationShortcutIconTypeCloud = 13;
  UIApplicationShortcutIconTypeInvitation = 14;
  UIApplicationShortcutIconTypeConfirmation = 15;
  UIApplicationShortcutIconTypeMail = 16;
  UIApplicationShortcutIconTypeMessage = 17;
  UIApplicationShortcutIconTypeDate = 18;
  UIApplicationShortcutIconTypeTime = 19;
  UIApplicationShortcutIconTypeCapturePhoto = 20;
  UIApplicationShortcutIconTypeCaptureVideo = 21;
  UIApplicationShortcutIconTypeTask = 22;
  UIApplicationShortcutIconTypeTaskCompleted = 23;
  UIApplicationShortcutIconTypeAlarm = 24;
  UIApplicationShortcutIconTypeBookmark = 25;
  UIApplicationShortcutIconTypeShuffle = 26;
  UIApplicationShortcutIconTypeAudio = 27;
  UIApplicationShortcutIconTypeUpdate = 28;
  UIUserNotificationTypeNone = 0;
  UIUserNotificationTypeBadge = 1;
  UIUserNotificationTypeSound = 2;
  UIUserNotificationTypeAlert = 4;
  UIUserNotificationActionBehaviorDefault = 0;
  UIUserNotificationActionBehaviorTextInput = 1;
  UIUserNotificationActivationModeForeground = 0;
  UIUserNotificationActivationModeBackground = 1;
  UIUserNotificationActionContextDefault = 0;
  UIUserNotificationActionContextMinimal = 1;
  UISceneCollectionJoinBehaviorAutomatic = 0;
  UISceneCollectionJoinBehaviorPreferred = 1;
  UISceneCollectionJoinBehaviorDisallowed = 2;
  UISceneCollectionJoinBehaviorPreferredWithoutActivating = 3;
  UIWindowSceneDismissalAnimationStandard = 1;
  UIWindowSceneDismissalAnimationCommit = 2;
  UIWindowSceneDismissalAnimationDecline = 3;
  UICornerCurveAutomatic = 0;
  UICornerCurveCircular = 1;
  UICornerCurveContinuous = 2;
  UIMenuControllerArrowDefault = 0;
  UIMenuControllerArrowUp = 1;
  UIMenuControllerArrowDown = 2;
  UIMenuControllerArrowLeft = 3;
  UIMenuControllerArrowRight = 4;
  UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis = 0;
  UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis = 1;
  UIBehavioralStyleAutomatic = 0;
  UIBehavioralStylePad = 1;
  UIBehavioralStyleMac = 2;
  UINavigationBarNSToolbarSectionNone = 0;
  UINavigationBarNSToolbarSectionSidebar = 1;
  UINavigationBarNSToolbarSectionSupplementary = 2;
  UINavigationBarNSToolbarSectionContent = 3;
  UIPageControlInteractionStateNone = 0;
  UIPageControlInteractionStateDiscrete = 1;
  UIPageControlInteractionStateContinuous = 2;
  UIPageControlBackgroundStyleAutomatic = 0;
  UIPageControlBackgroundStyleProminent = 1;
  UIPageControlBackgroundStyleMinimal = 2;
  UIPageControlDirectionNatural = 0;
  UIPageControlDirectionLeftToRight = 1;
  UIPageControlDirectionRightToLeft = 2;
  UIPageControlDirectionTopToBottom = 3;
  UIPageControlDirectionBottomToTop = 4;
  UIPageViewControllerNavigationOrientationHorizontal = 0;
  UIPageViewControllerNavigationOrientationVertical = 1;
  UIPageViewControllerSpineLocationNone = 0;
  UIPageViewControllerSpineLocationMin = 1;
  UIPageViewControllerSpineLocationMid = 2;
  UIPageViewControllerSpineLocationMax = 3;
  UIPageViewControllerNavigationDirectionForward = 0;
  UIPageViewControllerNavigationDirectionReverse = 1;
  UIPageViewControllerTransitionStylePageCurl = 0;
  UIPageViewControllerTransitionStyleScroll = 1;
  UIPasteControlDisplayModeIconAndLabel = 0;
  UIPasteControlDisplayModeIconOnly = 1;
  UIPasteControlDisplayModeLabelOnly = 2;
  UIPopoverArrowDirectionUp = 1;
  UIPopoverArrowDirectionDown = 2;
  UIPopoverArrowDirectionLeft = 4;
  UIPopoverArrowDirectionRight = 8;
  UIPopoverArrowDirectionAny = 15;
  UIPopoverArrowDirectionUnknown = -1;
  UIPressPhaseBegan = 0;
  UIPressPhaseChanged = 1;
  UIPressPhaseStationary = 2;
  UIPressPhaseEnded = 3;
  UIPressPhaseCancelled = 4;
  UIPressTypeUpArrow = 0;
  UIPressTypeDownArrow = 1;
  UIPressTypeLeftArrow = 2;
  UIPressTypeRightArrow = 3;
  UIPressTypeSelect = 4;
  UIPressTypeMenu = 5;
  UIPressTypePlayPause = 6;
  UIPressTypePageUp = 30;
  UIPressTypePageDown = 31;
  UIProgressViewStyleDefault = 0;
  UIProgressViewStyleBar = 1;
  UIScreenOverscanCompensationScale = 0;
  UIScreenOverscanCompensationInsetBounds = 1;
  UIScreenOverscanCompensationNone = 2;
  UIScreenOverscanCompensationInsetApplicationFrame = 2;
  UIScreenReferenceDisplayModeStatusNotSupported = 0;
  UIScreenReferenceDisplayModeStatusNotEnabled = 1;
  UIScreenReferenceDisplayModeStatusLimited = 2;
  UIScreenReferenceDisplayModeStatusEnabled = 3;
  UISearchBarIconSearch = 0;
  UISearchBarIconClear = 1;
  UISearchBarIconBookmark = 2;
  UISearchBarIconResultsList = 3;
  UISearchBarStyleDefault = 0;
  UISearchBarStyleProminent = 1;
  UISearchBarStyleMinimal = 2;
  UITimingCurveTypeBuiltin = 0;
  UITimingCurveTypeCubic = 1;
  UITimingCurveTypeSpring = 2;
  UITimingCurveTypeComposed = 3;
  UISearchControllerScopeBarActivationAutomatic = 0;
  UISearchControllerScopeBarActivationManual = 1;
  UISearchControllerScopeBarActivationOnTextEntry = 2;
  UISearchControllerScopeBarActivationOnSearchActivation = 3;
  UISegmentedControlStylePlain = 0;
  UISegmentedControlStyleBordered = 1;
  UISegmentedControlStyleBar = 2;
  UISegmentedControlStyleBezeled = 3;
  UISegmentedControlNoSegment = -1;
  UISegmentedControlSegmentAny = 0;
  UISegmentedControlSegmentLeft = 1;
  UISegmentedControlSegmentCenter = 2;
  UISegmentedControlSegmentRight = 3;
  UISegmentedControlSegmentAlone = 4;
  UISplitViewControllerDisplayModeAutomatic = 0;
  UISplitViewControllerDisplayModeSecondaryOnly = 1;
  UISplitViewControllerDisplayModeOneBesideSecondary = 2;
  UISplitViewControllerDisplayModeOneOverSecondary = 3;
  UISplitViewControllerDisplayModeTwoBesideSecondary = 4;
  UISplitViewControllerDisplayModeTwoOverSecondary = 5;
  UISplitViewControllerDisplayModeTwoDisplaceSecondary = 6;
  UISplitViewControllerDisplayModePrimaryHidden = UISplitViewControllerDisplayModeSecondaryOnly;
  UISplitViewControllerDisplayModeAllVisible = UISplitViewControllerDisplayModeOneBesideSecondary;
  UISplitViewControllerDisplayModePrimaryOverlay = UISplitViewControllerDisplayModeOneOverSecondary;
  UISplitViewControllerPrimaryEdgeLeading = 0;
  UISplitViewControllerPrimaryEdgeTrailing = 1;
  UISplitViewControllerBackgroundStyleNone = 0;
  UISplitViewControllerBackgroundStyleSidebar = 1;
  UISplitViewControllerStyleUnspecified = 0;
  UISplitViewControllerStyleDoubleColumn = 1;
  UISplitViewControllerStyleTripleColumn = 2;
  UISplitViewControllerColumnPrimary = 0;
  UISplitViewControllerColumnSupplementary = 1;
  UISplitViewControllerColumnSecondary = 2;
  UISplitViewControllerColumnCompact = 3;
  UISplitViewControllerSplitBehaviorAutomatic = 0;
  UISplitViewControllerSplitBehaviorTile = 1;
  UISplitViewControllerSplitBehaviorOverlay = 2;
  UISplitViewControllerSplitBehaviorDisplace = 3;
  UISplitViewControllerDisplayModeButtonVisibilityAutomatic = 0;
  UISplitViewControllerDisplayModeButtonVisibilityNever = 1;
  UISplitViewControllerDisplayModeButtonVisibilityAlways = 2;
  UISwitchStyleAutomatic = 0;
  UISwitchStyleCheckbox = 1;
  UISwitchStyleSliding = 2;
  UITabBarItemPositioningAutomatic = 0;
  UITabBarItemPositioningFill = 1;
  UITabBarItemPositioningCentered = 2;
  UITabBarSystemItemMore = 0;
  UITabBarSystemItemFavorites = 1;
  UITabBarSystemItemFeatured = 2;
  UITabBarSystemItemTopRated = 3;
  UITabBarSystemItemRecents = 4;
  UITabBarSystemItemContacts = 5;
  UITabBarSystemItemHistory = 6;
  UITabBarSystemItemBookmarks = 7;
  UITabBarSystemItemSearch = 8;
  UITabBarSystemItemDownloads = 9;
  UITabBarSystemItemMostRecent = 10;
  UITabBarSystemItemMostViewed = 11;
  UITextSearchFoundTextStyleNormal = 0;
  UITextSearchFoundTextStyleFound = 1;
  UITextSearchFoundTextStyleHighlighted = 2;
  UIFindSessionSearchResultDisplayStyleCurrentAndTotal = 0;
  UIFindSessionSearchResultDisplayStyleTotal = 1;
  UIFindSessionSearchResultDisplayStyleNone = 2;
  UITextSearchMatchMethodContains = 0;
  UITextSearchMatchMethodStartsWith = 1;
  UITextSearchMatchMethodFullWord = 2;
  UITextItemInteractionInvokeDefaultAction = 0;
  UITextItemInteractionPresentActions = 1;
  UITextItemInteractionPreview = 2;
  UITextViewBorderStyleNone = 0;
  UITextViewBorderStyleRoundedRect = 1;
  UIWebViewNavigationTypeLinkClicked = 0;
  UIWebViewNavigationTypeFormSubmitted = 1;
  UIWebViewNavigationTypeBackForward = 2;
  UIWebViewNavigationTypeReload = 3;
  UIWebViewNavigationTypeFormResubmitted = 4;
  UIWebViewNavigationTypeOther = 5;
  UIWebPaginationModeUnpaginated = 0;
  UIWebPaginationModeLeftToRight = 1;
  UIWebPaginationModeTopToBottom = 2;
  UIWebPaginationModeBottomToTop = 3;
  UIWebPaginationModeRightToLeft = 4;
  UIWebPaginationBreakingModePage = 0;
  UIWebPaginationBreakingModeColumn = 1;
  UIDropSessionProgressIndicatorStyleNone = 0;
  UIDropSessionProgressIndicatorStyleDefault = 1;
  UISpringLoadedInteractionEffectStateInactive = 0;
  UISpringLoadedInteractionEffectStatePossible = 1;
  UISpringLoadedInteractionEffectStateActivating = 2;
  UISpringLoadedInteractionEffectStateActivated = 3;
  UITabBarItemAppearanceStyleStacked = 0;
  UITabBarItemAppearanceStyleInline = 1;
  UITabBarItemAppearanceStyleCompactInline = 2;
  UIStackViewDistributionFill = 0;
  UIStackViewDistributionFillEqually = 1;
  UIStackViewDistributionFillProportionally = 2;
  UIStackViewDistributionEqualSpacing = 3;
  UIStackViewDistributionEqualCentering = 4;
  UIStackViewAlignmentFill = 0;
  UIStackViewAlignmentLeading = 1;
  UIStackViewAlignmentTop = UIStackViewAlignmentLeading;
  UIStackViewAlignmentFirstBaseline = 2;
  UIStackViewAlignmentCenter = 3;
  UIStackViewAlignmentTrailing = 4;
  UIStackViewAlignmentBottom = UIStackViewAlignmentTrailing;
  UIStackViewAlignmentLastBaseline = 5;
  NSTextStorageEditedAttributes = 1;
  NSTextStorageEditedCharacters = 2;
  NSTextLayoutOrientationHorizontal = 0;
  NSTextLayoutOrientationVertical = 1;
  NSGlyphPropertyNull = 1 shl 0;
  NSGlyphPropertyControlCharacter = 1 shl 1;
  NSGlyphPropertyElastic = 1 shl 2;
  NSGlyphPropertyNonBaseCharacter = 1 shl 3;
  NSControlCharacterActionZeroAdvancement = 1 shl 0;
  NSControlCharacterActionWhitespace = 1 shl 1;
  NSControlCharacterActionHorizontalTab = 1 shl 2;
  NSControlCharacterActionLineBreak = 1 shl 3;
  NSControlCharacterActionParagraphBreak = 1 shl 4;
  NSControlCharacterActionContainerBreak = 1 shl 5;
  NSControlCharacterZeroAdvancementAction = NSControlCharacterActionZeroAdvancement;
  NSControlCharacterWhitespaceAction = NSControlCharacterActionWhitespace;
  NSControlCharacterHorizontalTabAction = NSControlCharacterActionHorizontalTab;
  NSControlCharacterLineBreakAction = NSControlCharacterActionLineBreak;
  NSControlCharacterParagraphBreakAction = NSControlCharacterActionParagraphBreak;
  NSControlCharacterContainerBreakAction = NSControlCharacterActionContainerBreak;
  UIPushBehaviorModeContinuous = 0;
  UIPushBehaviorModeInstantaneous = 1;
  UIAttachmentBehaviorTypeItems = 0;
  UIAttachmentBehaviorTypeAnchor = 1;
  UICollisionBehaviorModeItems = 1;
  UICollisionBehaviorModeBoundaries = 2;
  UICollisionBehaviorModeEverything = -1;
  UIImpactFeedbackStyleLight = 0;
  UIImpactFeedbackStyleMedium = 1;
  UIImpactFeedbackStyleHeavy = 2;
  UIImpactFeedbackStyleSoft = 3;
  UIImpactFeedbackStyleRigid = 4;
  UINotificationFeedbackTypeSuccess = 0;
  UINotificationFeedbackTypeWarning = 1;
  UINotificationFeedbackTypeError = 2;
  UITextInteractionModeEditable = 0;
  UITextInteractionModeNonEditable = 1;
  UITextItemContentTypeLink = 0;
  UITextItemContentTypeTextAttachment = 1;
  UITextItemContentTypeTag = 2;
  UIPencilPreferredActionIgnore = 0;
  UIPencilPreferredActionSwitchEraser = 1;
  UIPencilPreferredActionSwitchPrevious = 2;
  UIPencilPreferredActionShowColorPalette = 3;
  UIPencilPreferredActionShowInkAttributes = 4;
  UIPencilPreferredActionShowContextualPalette = 5;
  UIPencilPreferredActionRunSystemShortcut = 6;
  UIPencilInteractionPhaseBegan = 0;
  UIPencilInteractionPhaseChanged = 1;
  UIPencilInteractionPhaseEnded = 2;
  UIPencilInteractionPhaseCancelled = 3;
  UIWindowSceneResizingRestrictionsUnspecified = 0;
  UIWindowSceneResizingRestrictionsNone = 1;
  UIWindowSceneResizingRestrictionsUniform = 2;
  UIWindowSceneResizingRestrictionsFreeform = 3;
  UIPointerEffectTintModeNone = 0;
  UIPointerEffectTintModeOverlay = 1;
  UIPointerEffectTintModeUnderlay = 2;
  UIBandSelectionInteractionStatePossible = 0;
  UIBandSelectionInteractionStateBegan = 1;
  UIBandSelectionInteractionStateSelecting = 2;
  UIBandSelectionInteractionStateEnded = 3;
  UIWindowScenePresentationStyleAutomatic = 0;
  UIWindowScenePresentationStyleStandard = 1;
  UIWindowScenePresentationStyleProminent = 2;
  UIFocusHaloEffectPositionAutomatic = 0;
  UIFocusHaloEffectPositionOutside = 1;
  UIFocusHaloEffectPositionInside = 2;
  UICalendarViewDecorationSizeSmall = 0;
  UICalendarViewDecorationSizeMedium = 1;
  UICalendarViewDecorationSizeLarge = 2;
  UIEditMenuArrowDirectionAutomatic = 0;
  UIEditMenuArrowDirectionUp = 1;
  UIEditMenuArrowDirectionDown = 2;
  UIEditMenuArrowDirectionLeft = 3;
  UIEditMenuArrowDirectionRight = 4;
  UIContentUnavailableAlignmentCenter = 0;
  UIContentUnavailableAlignmentNatural = 1;
  NSTextSelectionGranularityCharacter = 0;
  NSTextSelectionGranularityWord = 1;
  NSTextSelectionGranularityParagraph = 2;
  NSTextSelectionGranularityLine = 3;
  NSTextSelectionGranularitySentence = 4;
  NSTextSelectionAffinityUpstream = 0;
  NSTextSelectionAffinityDownstream = 1;
  NSTextSelectionNavigationDirectionForward = 0;
  NSTextSelectionNavigationDirectionBackward = 1;
  NSTextSelectionNavigationDirectionRight = 2;
  NSTextSelectionNavigationDirectionLeft = 3;
  NSTextSelectionNavigationDirectionUp = 4;
  NSTextSelectionNavigationDirectionDown = 5;
  NSTextSelectionNavigationDestinationCharacter = 0;
  NSTextSelectionNavigationDestinationWord = 1;
  NSTextSelectionNavigationDestinationLine = 2;
  NSTextSelectionNavigationDestinationSentence = 3;
  NSTextSelectionNavigationDestinationParagraph = 4;
  NSTextSelectionNavigationDestinationContainer = 5;
  NSTextSelectionNavigationDestinationDocument = 6;
  NSTextSelectionNavigationModifierExtend = 1;
  NSTextSelectionNavigationModifierVisual = 2;
  NSTextSelectionNavigationModifierMultiple = 4;
  NSTextSelectionNavigationWritingDirectionLeftToRight = 0;
  NSTextSelectionNavigationWritingDirectionRightToLeft = 1;
  NSTextSelectionNavigationLayoutOrientationHorizontal = 0;
  NSTextSelectionNavigationLayoutOrientationVertical = 1;
  NSTextContentManagerEnumerationOptionsNone = 0;
  NSTextContentManagerEnumerationOptionsReverse = 1;
  NSTextLayoutFragmentEnumerationOptionsNone = 0;
  NSTextLayoutFragmentEnumerationOptionsReverse = 1;
  NSTextLayoutFragmentEnumerationOptionsEstimatesSize = 2;
  NSTextLayoutFragmentEnumerationOptionsEnsuresLayout = 4;
  NSTextLayoutFragmentEnumerationOptionsEnsuresExtraLineFragment = 8;
  NSTextLayoutFragmentStateNone = 0;
  NSTextLayoutFragmentStateEstimatedUsageBounds = 1;
  NSTextLayoutFragmentStateCalculatedUsageBounds = 2;
  NSTextLayoutFragmentStateLayoutAvailable = 3;
  NSTextLayoutManagerSegmentTypeStandard = 0;
  NSTextLayoutManagerSegmentTypeSelection = 1;
  NSTextLayoutManagerSegmentTypeHighlight = 2;
  NSTextLayoutManagerSegmentOptionsNone = 0;
  NSTextLayoutManagerSegmentOptionsRangeNotRequired = 1;
  NSTextLayoutManagerSegmentOptionsMiddleFragmentsExcluded = 2;
  NSTextLayoutManagerSegmentOptionsHeadSegmentExtended = 4;
  NSTextLayoutManagerSegmentOptionsTailSegmentExtended = 8;
  NSTextLayoutManagerSegmentOptionsUpstreamAffinity = 16;
  NSTextListPrependEnclosingMarker = 1;
  UIDocumentBrowserErrorGeneric = 1;
  UIDocumentBrowserErrorNoLocationAvailable = 2;
  UIDocumentBrowserImportModeNone = 0;
  UIDocumentBrowserImportModeCopy = 1;
  UIDocumentBrowserImportModeMove = 2;
  UIDocumentBrowserUserInterfaceStyleWhite = 0;
  UIDocumentBrowserUserInterfaceStyleLight = 1;
  UIDocumentBrowserUserInterfaceStyleDark = 2;
  UIDocumentBrowserActionAvailabilityMenu = 1;
  UIDocumentBrowserActionAvailabilityNavigationBar = 2;
  UIActivityCategoryAction = 0;
  UIActivityCategoryShare = 1;
  UIPrinterJobTypeUnknown = 0;
  UIPrinterJobTypeDocument = 1;
  UIPrinterJobTypeEnvelope = 2;
  UIPrinterJobTypeLabel = 4;
  UIPrinterJobTypePhoto = 8;
  UIPrinterJobTypeReceipt = 16;
  UIPrinterJobTypeRoll = 32;
  UIPrinterJobTypeLargeFormat = 64;
  UIPrinterJobTypePostcard = 128;
  UIPrintingNotAvailableError = 1;
  UIPrintNoContentError = 2;
  UIPrintUnknownImageFormatError = 3;
  UIPrintJobFailedError = 4;
  UIPrintInfoOutputGeneral = 0;
  UIPrintInfoOutputPhoto = 1;
  UIPrintInfoOutputGrayscale = 2;
  UIPrintInfoOutputPhotoGrayscale = 3;
  UIPrintInfoOrientationPortrait = 0;
  UIPrintInfoOrientationLandscape = 1;
  UIPrintInfoDuplexNone = 0;
  UIPrintInfoDuplexLongEdge = 1;
  UIPrintInfoDuplexShortEdge = 2;
  UIPrinterCutterBehaviorNoCut = 0;
  UIPrinterCutterBehaviorPrinterDefault = 1;
  UIPrinterCutterBehaviorCutAfterEachPage = 2;
  UIPrinterCutterBehaviorCutAfterEachCopy = 3;
  UIPrinterCutterBehaviorCutAfterEachJob = 4;
  UIPrintRenderingQualityBest = 0;
  UIPrintRenderingQualityResponsive = 1;

type
  UIBezierPath = interface;
  UIColor = interface;
  UIFontDescriptor = interface;
  UIFont = interface;
  UIFontMetrics = interface;
  UIItemProviderPresentationSizeProviding = interface;
  UIItemProviderReadingAugmentationProviding = interface;
  UIItemProviderReadingAugmentationDesignating = interface;
  NSTextAttachmentContainer = interface;
  NSTextAttachmentLayout = interface;
  NSTextAttachment = interface;
  NSTextAttachmentViewProvider = interface;
  UIImage = interface;
  UIImageReaderConfiguration = interface;
  UIImageReader = interface;
  UIImageConfiguration = interface;
  UIImageSymbolConfiguration = interface;
  NSDataAsset = interface;
  UILocalNotification = interface;
  NSTextTab = interface;
  NSParagraphStyle = interface;
  NSMutableParagraphStyle = interface;
  NSShadow = interface;
  NSStringDrawingContext = interface;
  UIAcceleration = interface;
  UIAccelerometer = interface;
  UIAccelerometerDelegate = interface;
  UIMenuElement = interface;
  UIMenuDisplayPreferences = interface;
  UIMenu = interface;
  UIMenuLeaf = interface;
  UICommandAlternate = interface;
  UICommand = interface;
  UIEvent = interface;
  UIKeyCommand = interface;
  UIPasteConfigurationSupporting = interface;
  UIUserActivityRestoring = interface;
  UIResponderStandardEditActions = interface;
  UIResponder = interface;
  UIAppearanceContainer = interface;
  UIAppearance = interface;
  UIDynamicItem = interface;
  UIDynamicItemGroup = interface;
  UIDynamicBehavior = interface;
  NSLayoutConstraint = interface;
  UILayoutSupport = interface;
  UITraitDefinition = interface;
  UICGFloatTraitDefinition = interface;
  UINSIntegerTraitDefinition = interface;
  UIObjectTraitDefinition = interface;
  UITraitUserInterfaceIdiom = interface;
  UITraitUserInterfaceStyle = interface;
  UITraitLayoutDirection = interface;
  UITraitDisplayScale = interface;
  UITraitHorizontalSizeClass = interface;
  UITraitVerticalSizeClass = interface;
  UITraitForceTouchCapability = interface;
  UITraitPreferredContentSizeCategory = interface;
  UITraitDisplayGamut = interface;
  UITraitAccessibilityContrast = interface;
  UITraitUserInterfaceLevel = interface;
  UITraitLegibilityWeight = interface;
  UITraitActiveAppearance = interface;
  UITraitToolbarItemPresentationSize = interface;
  UITraitImageDynamicRange = interface;
  UITraitTypesettingLanguage = interface;
  UITraitSceneCaptureState = interface;
  UIDevice = interface;
  UIInputViewAudioFeedback = interface;
  UITouch = interface;
  UITraitCollection = interface;
  UIMutableTraits = interface;
  UITraitEnvironment = interface;
  UITraitChangeRegistration = interface;
  UITraitOverrides = interface;
  UITraitChangeObservable = interface;
  UILayoutGuide = interface;
  UIFocusGuide = interface;
  UIFocusAnimationContext = interface;
  UIFocusAnimationCoordinator = interface;
  UIFocusEnvironment = interface;
  UIFocusItem = interface;
  UIFocusItemContainer = interface;
  UIFocusItemScrollableContainer = interface;
  UIFocusUpdateContext = interface;
  UICoordinateSpace = interface;
  UIView = interface;
  UIPickerView = interface;
  UIPickerViewDataSource = interface;
  UIPickerViewDelegate = interface;
  UIInteraction = interface;
  UIAction = interface;
  UIContextMenuConfiguration = interface;
  UIContextMenuInteraction = interface;
  UIContextMenuInteractionAnimating = interface;
  UIContextMenuInteractionCommitAnimating = interface;
  UIContextMenuInteractionDelegate = interface;
  UIControl = interface;
  UIRefreshControl = interface;
  UIScrollView = interface;
  UIScrollViewDelegate = interface;
  UIPickerViewAccessibilityDelegate = interface;
  UIScrollViewAccessibilityDelegate = interface;
  UIAccessibilityContainerDataTableCell = interface;
  UIAccessibilityContainerDataTable = interface;
  UIAccessibilityCustomAction = interface;
  UITextInputPasswordRules = interface;
  UITextInputTraits = interface;
  UIKeyInput = interface;
  UIDictationPhrase = interface;
  UITextInputAssistantItem = interface;
  UITextPlaceholder = interface;
  UITextInput = interface;
  UITextPosition = interface;
  UITextRange = interface;
  UITextSelectionRect = interface;
  UITextInputDelegate = interface;
  UITextInputTokenizer = interface;
  UITextInputStringTokenizer = interface;
  UITextInputMode = interface;
  UIAccessibilityCustomRotorSearchPredicate = interface;
  UIAccessibilityCustomRotor = interface;
  UIAccessibilityCustomRotorItemResult = interface;
  UIBarItem = interface;
  UIDropInteraction = interface;
  UIDropProposal = interface;
  UIDropInteractionDelegate = interface;
  UIViewAnimating = interface;
  UIViewImplicitlyAnimating = interface;
  UIDragAnimating = interface;
  UIDragInteraction = interface;
  UIDragInteractionDelegate = interface;
  UITextDraggable = interface;
  UITextDragDelegate = interface;
  UITextDragRequest = interface;
  UITextDropProposal = interface;
  UIPasteConfiguration = interface;
  UITextPasteDelegate = interface;
  UITextPasteItem = interface;
  UITextPasteConfigurationSupporting = interface;
  UITextDroppable = interface;
  UITextDropDelegate = interface;
  UITextDropRequest = interface;
  UIContentSizeCategoryAdjusting = interface;
  UILetterformAwareAdjusting = interface;
  UITextField = interface;
  UITextFieldDelegate = interface;
  UIActionSheet = interface;
  UIActionSheetDelegate = interface;
  UIAlertView = interface;
  UIAlertViewDelegate = interface;
  UIApplication = interface;
  UIApplicationDelegate = interface;
  UIViewControllerRestoration = interface;
  UIDataSourceModelAssociation = interface;
  UIStateRestoring = interface;
  UIObjectRestoration = interface;
  UIScene = interface;
  UISceneDelegate = interface;
  UIPointerLockState = interface;
  UIContentContainer = interface;
  UIViewController = interface;
  UIViewControllerPreviewing = interface;
  UIViewControllerPreviewingDelegate = interface;
  UIPreviewActionItem = interface;
  UIPreviewAction = interface;
  UIPreviewActionGroup = interface;
  UISpringLoadedInteractionSupporting = interface;
  UIAlertAction = interface;
  UIAlertController = interface;
  UIAccessibilityIdentification = interface;
  UIAccessibilityElement = interface;
  UIGuidedAccessRestrictionDelegate = interface;
  UIAccessibilityLocationDescriptor = interface;
  UIAccessibilityReadingContent = interface;
  UISymbolEffectCompletionContext = interface;
  UIImageView = interface;
  UIBackgroundConfiguration = interface;
  UIButtonConfiguration = interface;
  UIButton = interface;
  UIAccessibilityContentSizeCategoryImageAdjusting = interface;
  UIActivityIndicatorView = interface;
  UIBarPositioning = interface;
  UIBarPositioningDelegate = interface;
  UIBarButtonItem = interface;
  UIBarButtonItemGroup = interface;
  UIDataSourceTranslating = interface;
  UICollectionViewFocusUpdateContext = interface;
  UICollectionViewDataSource = interface;
  UICollectionViewDataSourcePrefetching = interface;
  UICollectionViewDelegate = interface;
  UICollectionView = interface;
  UICollectionViewDragDelegate = interface;
  UICollectionViewDropDelegate = interface;
  UICollectionViewDropProposal = interface;
  UICollectionViewDropCoordinator = interface;
  UICollectionViewPlaceholder = interface;
  UICollectionViewDropPlaceholder = interface;
  UICollectionViewDropItem = interface;
  UICollectionViewDropPlaceholderContext = interface;
  UICollectionReusableView = interface;
  UICollectionViewCell = interface;
  UICollectionViewController = interface;
  UICollectionViewUpdateItem = interface;
  UICollectionViewLayoutAttributes = interface;
  UICollectionViewLayoutInvalidationContext = interface;
  UICollectionViewLayout = interface;
  UICollectionViewFlowLayoutInvalidationContext = interface;
  UICollectionViewDelegateFlowLayout = interface;
  UICollectionViewFlowLayout = interface;
  UICollectionViewTransitionLayout = interface;
  UICollectionViewCompositionalLayoutConfiguration = interface;
  UICollectionViewCompositionalLayout = interface;
  UICollectionLayoutSectionOrthogonalScrollingProperties = interface;
  NSCollectionLayoutSection = interface;
  NSCollectionLayoutItem = interface;
  NSCollectionLayoutGroupCustomItem = interface;
  NSCollectionLayoutGroup = interface;
  NSCollectionLayoutDimension = interface;
  NSCollectionLayoutSize = interface;
  NSCollectionLayoutSpacing = interface;
  NSCollectionLayoutEdgeSpacing = interface;
  NSCollectionLayoutSupplementaryItem = interface;
  NSCollectionLayoutBoundarySupplementaryItem = interface;
  NSCollectionLayoutDecorationItem = interface;
  NSCollectionLayoutAnchor = interface;
  NSCollectionLayoutContainer = interface;
  NSCollectionLayoutEnvironment = interface;
  NSCollectionLayoutVisibleItem = interface;
  UICellAccessory = interface;
  UICellAccessoryDisclosureIndicator = interface;
  UICellAccessoryDetail = interface;
  UICellAccessoryCheckmark = interface;
  UICellAccessoryDelete = interface;
  UICellAccessoryInsert = interface;
  UICellAccessoryReorder = interface;
  UICellAccessoryMultiselect = interface;
  UICellAccessoryOutlineDisclosure = interface;
  UICellAccessoryPopUpMenu = interface;
  UICellAccessoryLabel = interface;
  UICellAccessoryCustomView = interface;
  UICollectionViewListCell = interface;
  UIGestureRecognizer = interface;
  UIGestureRecognizerDelegate = interface;
  UISwipeGestureRecognizer = interface;
  UIContextualAction = interface;
  UISwipeActionsConfiguration = interface;
  UITableViewCell = interface;
  UITableViewRowAction = interface;
  UITableViewFocusUpdateContext = interface;
  UITableViewDelegate = interface;
  UITableView = interface;
  UITableViewDataSource = interface;
  UITableViewDataSourcePrefetching = interface;
  UITableViewDragDelegate = interface;
  UITableViewDropDelegate = interface;
  UITableViewDropProposal = interface;
  UITableViewDropCoordinator = interface;
  UITableViewPlaceholder = interface;
  UITableViewDropPlaceholder = interface;
  UITableViewDropItem = interface;
  UITableViewDropPlaceholderContext = interface;
  NSDiffableDataSourceSectionSnapshot = interface;
  NSDiffableDataSourceSnapshot = interface;
  NSDiffableDataSourceSectionTransaction = interface;
  NSDiffableDataSourceTransaction = interface;
  UICollectionViewDiffableDataSourceReorderingHandlers = interface;
  UICollectionViewDiffableDataSourceSectionSnapshotHandlers = interface;
  UICollectionViewDiffableDataSource = interface;
  UITableViewDiffableDataSource = interface;
  UICollectionViewCellRegistration = interface;
  UICollectionViewSupplementaryRegistration = interface;
  UICollectionLayoutListConfiguration = interface;
  UIListSeparatorConfiguration = interface;
  UIConfigurationState = interface;
  UIViewConfigurationState = interface;
  UICellConfigurationState = interface;
  UIContentConfiguration = interface;
  UIContentView = interface;
  UIListContentImageProperties = interface;
  UIListContentTextProperties = interface;
  UIListContentConfiguration = interface;
  UIListContentView = interface;
  UIKey = interface;
  UIDatePicker = interface;
  UINavigationItemRenameDelegate = interface;
  UINavigationItem = interface;
  UIDocument = interface;
  UIDocumentViewController = interface;
  UIDocumentPickerDelegate = interface;
  UIDocumentPickerViewController = interface;
  UIDocumentMenuDelegate = interface;
  UIDocumentMenuViewController = interface;
  UIDocumentPickerExtensionViewController = interface;
  UICloudSharingControllerDelegate = interface;
  UICloudSharingController = interface;
  UIVisualEffect = interface;
  UIBlurEffect = interface;
  UIGlassEffect = interface;
  UIGlassContainerEffect = interface;
  UIVibrancyEffect = interface;
  UIVisualEffectView = interface;
  UIFontPickerViewControllerConfiguration = interface;
  UIFontPickerViewControllerDelegate = interface;
  UIFontPickerViewController = interface;
  UIGraphicsRendererFormat = interface;
  UIGraphicsRendererContext = interface;
  UIGraphicsRenderer = interface;
  UIGraphicsImageRendererFormat = interface;
  UIGraphicsImageRendererContext = interface;
  UIGraphicsImageRenderer = interface;
  UIGraphicsPDFRendererFormat = interface;
  UIGraphicsPDFRendererContext = interface;
  UIGraphicsPDFRenderer = interface;
  UIImageAsset = interface;
  UIPanGestureRecognizer = interface;
  UITapGestureRecognizer = interface;
  UINavigationController = interface;
  UINavigationControllerDelegate = interface;
  UIImagePickerController = interface;
  UIImagePickerControllerDelegate = interface;
  UIInputView = interface;
  UITextDocumentProxy = interface;
  UIInputViewController = interface;
  UILabel = interface;
  UILexiconEntry = interface;
  UILexicon = interface;
  UIApplicationShortcutIcon = interface;
  UIApplicationShortcutItem = interface;
  UIMutableApplicationShortcutItem = interface;
  UIUserNotificationSettings = interface;
  UIUserNotificationCategory = interface;
  UIMutableUserNotificationCategory = interface;
  UIUserNotificationAction = interface;
  UIMutableUserNotificationAction = interface;
  UISceneConnectionOptions = interface;
  UISceneOpenURLOptions = interface;
  UISceneOpenExternalURLOptions = interface;
  UISceneActivationRequestOptions = interface;
  UISceneDestructionRequestOptions = interface;
  UIWindowScene = interface;
  UIWindowSceneDelegate = interface;
  UIWindowSceneDestructionRequestOptions = interface;
  UISceneSizeRestrictions = interface;
  UIFocusSystem = interface;
  UIFocusDebugger = interface;
  UIFocusDebuggerOutput = interface;
  UIFocusMovementHint = interface;
  UIHoverEffect = interface;
  UIHoverHighlightEffect = interface;
  UIHoverLiftEffect = interface;
  UIHoverAutomaticEffect = interface;
  UIHoverStyle = interface;
  UIHoverEffectLayer = interface;
  UIShapeProvider = interface;
  UIShape = interface;
  UIResolvedShape = interface;
  UIShapeResolutionContext = interface;
  UIHoverGestureRecognizer = interface;
  UILocalizedIndexedCollation = interface;
  UILongPressGestureRecognizer = interface;
  UIManagedDocument = interface;
  UIMenuController = interface;
  UIMenuItem = interface;
  UIMotionEffect = interface;
  UIInterpolatingMotionEffect = interface;
  UIMotionEffectGroup = interface;
  UISlider = interface;
  UINavigationBar = interface;
  UINavigationBarDelegate = interface;
  UINib = interface;
  UIPageControlProgressDelegate = interface;
  UIPageControlProgress = interface;
  UIPageControlTimerProgressDelegate = interface;
  UIPageControlTimerProgress = interface;
  UIPageControl = interface;
  UIPageViewController = interface;
  UIPageViewControllerDelegate = interface;
  UIPageViewControllerDataSource = interface;
  UIPasteboard = interface;
  UIPasteControlConfiguration = interface;
  UIPasteControl = interface;
  UIPinchGestureRecognizer = interface;
  UIPopoverController = interface;
  UIPopoverControllerDelegate = interface;
  UIPopoverBackgroundViewMethods = interface;
  UIPopoverBackgroundView = interface;
  UIPress = interface;
  UIPressesEvent = interface;
  UIProgressView = interface;
  UIReferenceLibraryViewController = interface;
  UIRotationGestureRecognizer = interface;
  UIScreen = interface;
  UIScreenEdgePanGestureRecognizer = interface;
  UIScreenMode = interface;
  UILookToDictateCapable = interface;
  UISearchBar = interface;
  UISearchBarDelegate = interface;
  UISearchContainerViewController = interface;
  UIViewControllerTransitionCoordinatorContext = interface;
  UIViewControllerTransitionCoordinator = interface;
  UIAdaptivePresentationControllerDelegate = interface;
  UIPresentationController = interface;
  UITimingCurveProvider = interface;
  UICubicTimingParameters = interface;
  UISpringTimingParameters = interface;
  UIViewControllerContextTransitioning = interface;
  UIViewControllerAnimatedTransitioning = interface;
  UIViewControllerInteractiveTransitioning = interface;
  UIViewControllerTransitioningDelegate = interface;
  UIPercentDrivenInteractiveTransition = interface;
  UISearchControllerDelegate = interface;
  UISearchResultsUpdating = interface;
  UISearchController = interface;
  UISearchDisplayController = interface;
  UISearchDisplayDelegate = interface;
  UISegmentedControl = interface;
  UISplitViewController = interface;
  UISplitViewControllerDelegate = interface;
  UITextCursorView = interface;
  UIStandardTextCursorView = interface;
  UIStepper = interface;
  UIStoryboard = interface;
  UIStoryboardSegue = interface;
  UIStoryboardUnwindSegueSource = interface;
  UIStoryboardPopoverSegue = interface;
  UISwitch = interface;
  UITabBar = interface;
  UITabBarDelegate = interface;
  UITabBarController = interface;
  UITabBarControllerDelegate = interface;
  UITabBarItem = interface;
  UITableViewHeaderFooterView = interface;
  UITableViewController = interface;
  UITextChecker = interface;
  UITextCursorDropPositionAnimator = interface;
  UITextInputContext = interface;
  UITextSelectionHandleView = interface;
  UITextSelectionHighlightView = interface;
  UITextSelectionDisplayInteractionDelegate = interface;
  UITextSelectionDisplayInteraction = interface;
  UITextSearchAggregator = interface;
  UITextSearching = interface;
  UITextSearchOptions = interface;
  UIFindSession = interface;
  UITextSearchingFindSession = interface;
  UIFindInteractionDelegate = interface;
  UIFindInteraction = interface;
  UITextViewDelegate = interface;
  UITextView = interface;
  UIToolbar = interface;
  UIToolbarDelegate = interface;
  UIVideoEditorController = interface;
  UIVideoEditorControllerDelegate = interface;
  UIWebView = interface;
  UIWebViewDelegate = interface;
  UIWindow = interface;
  UILayoutGuideAspectFitting = interface;
  UIDragItem = interface;
  UIDragPreview = interface;
  UIPreviewParameters = interface;
  UIDragPreviewParameters = interface;
  UIDragDropSession = interface;
  UIDragSession = interface;
  UIDropSession = interface;
  UIPreviewTarget = interface;
  UITargetedPreview = interface;
  UIDragPreviewTarget = interface;
  UITargetedDragPreview = interface;
  UISpringLoadedInteraction = interface;
  UISpringLoadedInteractionBehavior = interface;
  UISpringLoadedInteractionEffect = interface;
  UISpringLoadedInteractionContext = interface;
  UIBarAppearance = interface;
  UIBarButtonItemStateAppearance = interface;
  UIBarButtonItemAppearance = interface;
  UINavigationBarAppearance = interface;
  UIToolbarAppearance = interface;
  UITabBarItemStateAppearance = interface;
  UITabBarItemAppearance = interface;
  UITabBarAppearance = interface;
  UIActivityItemsConfigurationReading = interface;
  UIActivityItemsConfigurationProviding = interface;
  UIActivityItemsConfiguration = interface;
  UISearchSuggestion = interface;
  UISearchSuggestionItem = interface;
  UIScribbleInteraction = interface;
  UIScribbleInteractionDelegate = interface;
  UIIndirectScribbleInteraction = interface;
  UIIndirectScribbleInteractionDelegate = interface;
  NSLayoutAnchor = interface;
  NSLayoutXAxisAnchor = interface;
  NSLayoutYAxisAnchor = interface;
  NSLayoutDimension = interface;
  UITrackingLayoutGuide = interface;
  UIKeyboardLayoutGuide = interface;
  UIStackView = interface;
  NSTextStorage = interface;
  NSTextStorageDelegate = interface;
  NSTextStorageObserving = interface;
  NSTextLayoutOrientationProvider = interface;
  NSLayoutManager = interface;
  NSLayoutManagerDelegate = interface;
  NSTextContainer = interface;
  UIPreviewInteraction = interface;
  UIPreviewInteractionDelegate = interface;
  UISheetPresentationControllerDetentResolutionContext = interface;
  UISheetPresentationControllerDetent = interface;
  UISheetPresentationControllerDelegate = interface;
  UISheetPresentationController = interface;
  UIPopoverPresentationControllerSourceItem = interface;
  UIPopoverPresentationControllerDelegate = interface;
  UIPopoverPresentationController = interface;
  UIDynamicAnimatorDelegate = interface;
  UIDynamicAnimator = interface;
  UIPushBehavior = interface;
  UISnapBehavior = interface;
  UIDynamicItemBehavior = interface;
  UIFieldBehavior = interface;
  UIGravityBehavior = interface;
  UIAttachmentBehavior = interface;
  UICollisionBehaviorDelegate = interface;
  UICollisionBehavior = interface;
  UIRegion = interface;
  UITextDragPreviewRenderer = interface;
  UIViewPropertyAnimator = interface;
  UIFeedbackGenerator = interface;
  UISelectionFeedbackGenerator = interface;
  UIImpactFeedbackGenerator = interface;
  UINotificationFeedbackGenerator = interface;
  UICanvasFeedbackGenerator = interface;
  UITextInteractionDelegate = interface;
  UITextInteraction = interface;
  UITextItem = interface;
  UITextItemMenuPreview = interface;
  UITextItemMenuConfiguration = interface;
  UITextLoupeSession = interface;
  UIDocumentProperties = interface;
  UIPencilInteraction = interface;
  UIPencilHoverPose = interface;
  UIPencilInteractionTap = interface;
  UIPencilInteractionSqueeze = interface;
  UIPencilInteractionDelegate = interface;
  UISceneWindowingBehaviors = interface;
  UISceneConfiguration = interface;
  UISceneSession = interface;
  UISceneSessionActivationRequest = interface;
  UISceneActivationConditions = interface;
  UIWindowSceneGeometry = interface;
  UIWindowSceneGeometryPreferences = interface;
  UIWindowSceneGeometryPreferencesMac = interface;
  UIWindowSceneGeometryPreferencesIOS = interface;
  UIWindowSceneGeometryPreferencesVision = interface;
  UIWindowScenePlacement = interface;
  UIWindowSceneStandardPlacement = interface;
  UIWindowSceneProminentPlacement = interface;
  UIOpenURLContext = interface;
  UIStatusBarManager = interface;
  UIScreenshotService = interface;
  UIScreenshotServiceDelegate = interface;
  UIMenuBuilder = interface;
  UIDeferredMenuElement = interface;
  UIMenuSystem = interface;
  UITextFormattingCoordinatorDelegate = interface;
  UITextFormattingCoordinator = interface;
  UIPointerRegion = interface;
  UIPointerStyle = interface;
  UIPointerEffect = interface;
  UIPointerHighlightEffect = interface;
  UIPointerLiftEffect = interface;
  UIPointerHoverEffect = interface;
  UIPointerShape = interface;
  UIPointerInteraction = interface;
  UIPointerInteractionDelegate = interface;
  UIPointerRegionRequest = interface;
  UIPointerInteractionAnimating = interface;
  UIBandSelectionInteraction = interface;
  UIPointerAccessory = interface;
  UIColorWell = interface;
  UIColorPickerViewControllerDelegate = interface;
  UIColorPickerViewController = interface;
  UIEventAttribution = interface;
  UIEventAttributionView = interface;
  UIWindowSceneActivationRequestOptions = interface;
  UIWindowSceneActivationConfiguration = interface;
  UIWindowSceneActivationAction = interface;
  UIWindowSceneActivationInteraction = interface;
  UIWindowSceneDragInteraction = interface;
  UIFocusEffect = interface;
  UIFocusHaloEffect = interface;
  UIToolTipInteraction = interface;
  UIToolTipConfiguration = interface;
  UIToolTipInteractionDelegate = interface;
  UICalendarView = interface;
  UICalendarViewDelegate = interface;
  UICalendarViewDecoration = interface;
  UICalendarSelection = interface;
  UICalendarSelectionSingleDate = interface;
  UICalendarSelectionSingleDateDelegate = interface;
  UICalendarSelectionMultiDate = interface;
  UICalendarSelectionMultiDateDelegate = interface;
  UIEditMenuConfiguration = interface;
  UIEditMenuInteraction = interface;
  UIEditMenuInteractionAnimating = interface;
  UIEditMenuInteractionDelegate = interface;
  UIContentUnavailableImageProperties = interface;
  UIContentUnavailableTextProperties = interface;
  UIContentUnavailableButtonProperties = interface;
  UIContentUnavailableConfiguration = interface;
  UIContentUnavailableConfigurationState = interface;
  UIContentUnavailableView = interface;
  NSTextLocation = interface;
  NSTextRange = interface;
  NSTextSelection = interface;
  NSTextSelectionNavigation = interface;
  NSTextSelectionDataSource = interface;
  NSTextViewportLayoutControllerDelegate = interface;
  NSTextViewportLayoutController = interface;
  NSTextElementProvider = interface;
  NSTextContentManager = interface;
  NSTextContentManagerDelegate = interface;
  NSTextContentStorageDelegate = interface;
  NSTextContentStorage = interface;
  NSTextElement = interface;
  NSTextParagraph = interface;
  NSTextLayoutFragment = interface;
  NSTextLayoutManager = interface;
  NSTextLayoutManagerDelegate = interface;
  NSTextLineFragment = interface;
  NSTextList = interface;
  NSTextListElement = interface;
  UIDocumentBrowserViewController = interface;
  UIDocumentBrowserViewControllerDelegate = interface;
  UIDocumentBrowserTransitionController = interface;
  UIDocumentBrowserAction = interface;
  UIActivity = interface;
  UIActivityItemSource = interface;
  UIActivityItemProvider = interface;
  UIActivityViewController = interface;
  UIDocumentInteractionController = interface;
  UIDocumentInteractionControllerDelegate = interface;
  UIPrinter = interface;
  UIPrinterPickerControllerDelegate = interface;
  UIPrinterPickerController = interface;
  UIPrintFormatter = interface;
  UISimpleTextPrintFormatter = interface;
  UIMarkupTextPrintFormatter = interface;
  UIViewPrintFormatter = interface;
  UIPrintInfo = interface;
  UIPrintInteractionController = interface;
  UIPrintInteractionControllerDelegate = interface;
  UIPrintPageRenderer = interface;
  UIPrintPaper = interface;
  UIPrinterDestination = interface;
  UIPrintServiceExtension = interface;
  UISearchToken = interface;
  UISearchTextFieldDelegate = interface;
  UISearchTextField = interface;

  PBoolean = ^Boolean;
  PUIEdgeInsets = ^UIEdgeInsets;
  PNSDirectionalEdgeInsets = ^NSDirectionalEdgeInsets;
  PUIOffset = ^UIOffset;
  PUIFloatRange = ^UIFloatRange;
  PUIPointerAccessoryPosition = ^UIPointerAccessoryPosition;

  UIAccessibilityTraits = UInt64;
  UIAccessibilityNotifications = UInt32;
  UIAccessibilityAssistiveTechnologyIdentifier = NSString;
  UIAccessibilityNavigationStyle = NSInteger;
  UIAccessibilityContainerType = NSInteger;
  UIAccessibilityDirectTouchOptions = NSInteger;
  UIAccessibilityTextualContext = NSString;
  UIAccessibilityPriority = NSString;

  UIEdgeInsets = record
    top: CGFloat;
    left: CGFloat;
    bottom: CGFloat;
    right: CGFloat;
  end;

  UIFloatRange = record
    minimum: CGFloat;
    maximum: CGFloat;
  end;

  UIPointerAccessoryPosition = record
    offset: CGFloat;
    angle: CGFloat;
  end;

  NSDirectionalEdgeInsets = record
    top: CGFloat;
    leading: CGFloat;
    bottom: CGFloat;
    trailing: CGFloat;
  end;

  UIOffset = record
    horizontal: CGFloat;
    vertical: CGFloat;
  end;

  UIRectEdge = NSInteger;
  UIRectCorner = NSInteger;
  UIAxis = NSInteger;
  NSDirectionalRectEdge = NSInteger;
  UIDirectionalRectEdge = NSInteger;
  NSRectAlignment = NSInteger;
  UIFontDescriptorSymbolicTraits = NSInteger;
  UIFontDescriptorClass = NSUInteger;
  UIFontTextStyle = NSString;
  UIFontDescriptorAttributeName = NSString;
  UIFontDescriptorTraitKey = NSString;
  UIFontDescriptorFeatureKey = NSString;
  UIFontWeight = CGFloat;
  UIFontWidth = CGFloat;
  UIFontDescriptorSystemDesign = NSString;
  UIPreferredPresentationStyle = NSInteger;
  UIImageOrientation = NSInteger;
  UIImageResizingMode = NSInteger;
  UIImageRenderingMode = NSInteger;
  UIImageSymbolScale = NSInteger;
  UIImageSymbolWeight = NSInteger;
  NSDataAssetName = NSString;
  NSUnderlineStyle = NSInteger;
  NSWritingDirectionFormatType = NSInteger;
  NSTextEffectStyle = NSString;
  NSAttributedStringDocumentType = NSString;
  NSTextLayoutSectionKey = NSString;
  NSTextScalingType = NSInteger;
  NSAttributedStringDocumentAttributeKey = NSString;
  NSAttributedStringDocumentReadingOptionKey = NSString;
  NSTextWritingDirection = NSInteger;
  NSTextAlignment = NSInteger;
  NSWritingDirection = NSInteger;
  NSLineBreakMode = NSInteger;
  NSLineBreakStrategy = NSInteger;
  NSTextTabOptionKey = NSString;
  NSStringDrawingOptions = NSInteger;
  UIAccelerationValue = Double;
  UIMenuElementState = NSInteger;
  UIMenuElementAttributes = NSInteger;
  UIMenuIdentifier = NSString;
  UIMenuOptions = NSInteger;
  UIMenuElementSize = NSInteger;
  UIKeyModifierFlags = NSInteger;
  UIEventType = NSInteger;
  UIEventSubtype = NSInteger;
  UIEventButtonMask = NSInteger;

  UITextAttributesConversionHandler = function(p1: NSDictionary): NSDictionary of object;
  UIEditingInteractionConfiguration = NSInteger;
  UIBarStyle = NSInteger;
  UIUserInterfaceSizeClass = NSInteger;
  UIUserInterfaceStyle = NSInteger;
  UIUserInterfaceLayoutDirection = NSInteger;
  UITraitEnvironmentLayoutDirection = NSInteger;
  UIDisplayGamut = NSInteger;
  UIAccessibilityContrast = NSInteger;
  UILegibilityWeight = NSInteger;
  UIUserInterfaceLevel = NSInteger;
  UIUserInterfaceActiveAppearance = NSInteger;
  UINSToolbarItemPresentationSize = NSInteger;
  UIImageDynamicRange = NSInteger;
  UIDynamicItemCollisionBoundsType = NSInteger;
  UILayoutPriority = Single;
  NSLayoutRelation = NSInteger;
  NSLayoutAttribute = NSInteger;
  NSLayoutFormatOptions = NSInteger;
  UITrait = Pointer;
  UICGFloatTrait = Pointer;
  UINSIntegerTrait = Pointer;
  UIObjectTrait = Pointer;
  UIDeviceOrientation = NSInteger;
  UIInterfaceOrientation = NSInteger;
  UIInterfaceOrientationMask = NSInteger;
  UIDeviceBatteryState = NSInteger;
  UIUserInterfaceIdiom = NSInteger;
  UITouchPhase = NSInteger;
  UIForceTouchCapability = NSInteger;
  UITouchType = NSInteger;
  UITouchProperties = NSInteger;
  UIContentSizeCategory = NSString;
  UISceneActivationState = NSInteger;
  UISceneCaptureState = NSInteger;
  UISceneSessionRole = NSString;
  UISceneErrorCode = NSInteger;

  UITraitMutations = procedure(mutableTraits: Pointer) of object;

  UITraitChangeHandler = procedure(traitEnvironment: id; previousCollection: UITraitCollection) of object;
  UIFocusHeading = NSInteger;
  UIFocusSoundIdentifier = NSString;
  UIFocusGroupPriority = NSInteger;
  UIViewAnimationCurve = NSInteger;
  UIViewContentMode = NSInteger;
  UIViewAnimationTransition = NSInteger;
  UIViewAutoresizing = NSInteger;
  UIViewAnimationOptions = NSInteger;
  UIViewKeyframeAnimationOptions = NSInteger;
  UISystemAnimation = NSInteger;
  UIViewTintAdjustmentMode = NSInteger;
  UISemanticContentAttribute = NSInteger;
  UILayoutConstraintAxis = NSInteger;
  UIActionIdentifier = NSString;

  UIActionHandler = procedure(action: UIAction) of object;
  UIContextMenuConfigurationElementOrder = NSInteger;

  UIContextMenuActionProvider = function(suggestedActions: NSArray): UIMenu of object;

  UIContextMenuContentPreviewProvider = function: UIViewController of object;
  UIContextMenuInteractionCommitStyle = NSInteger;
  UIContextMenuInteractionAppearance = NSInteger;
  UIControlEvents = NSInteger;
  UIControlContentVerticalAlignment = NSInteger;
  UIControlContentHorizontalAlignment = NSInteger;
  UIControlState = NSInteger;
  UIScrollViewIndicatorStyle = NSInteger;
  UIScrollViewKeyboardDismissMode = NSInteger;
  UIScrollViewIndexDisplayMode = NSInteger;
  UIScrollViewContentInsetAdjustmentBehavior = NSInteger;
  UIScrollViewDecelerationRate = CGFloat;

  UIAccessibilityCustomActionHandler = function(customAction: UIAccessibilityCustomAction): Boolean of object;
  UITextAutocapitalizationType = NSInteger;
  UITextAutocorrectionType = NSInteger;
  UITextSpellCheckingType = NSInteger;
  UITextSmartQuotesType = NSInteger;
  UITextSmartDashesType = NSInteger;
  UITextSmartInsertDeleteType = NSInteger;
  UITextInlinePredictionType = NSInteger;
  UIKeyboardType = NSInteger;
  UIKeyboardAppearance = NSInteger;
  UIReturnKeyType = NSInteger;
  UITextContentType = NSString;
  UITextStorageDirection = NSInteger;
  UITextLayoutDirection = NSInteger;
  UITextDirection = NSInteger;
  UITextGranularity = NSInteger;
  UITextAlternativeStyle = NSInteger;
  UITextWritingDirection = Integer;
  UIAccessibilityCustomRotorDirection = NSInteger;
  UIAccessibilityCustomSystemRotorType = NSInteger;

  UIAccessibilityCustomRotorSearch = function(predicate: UIAccessibilityCustomRotorSearchPredicate): UIAccessibilityCustomRotorItemResult of object;

  AXCustomRotorsReturnBlock = function: NSArray of object;
  UILineBreakMode = NSInteger;
  UITextAlignment = NSInteger;
  UIBaselineAdjustment = NSInteger;
  UIDropOperation = NSInteger;
  UIViewAnimatingState = NSInteger;
  UIViewAnimatingPosition = NSInteger;
  UITextDragOptions = NSInteger;
  UITextDropAction = NSInteger;
  UITextDropProgressMode = NSInteger;
  UITextDropPerformer = NSInteger;
  UITextDropEditability = NSInteger;
  UILetterformAwareSizingRule = NSInteger;
  UITextBorderStyle = NSInteger;
  UITextFieldViewMode = NSInteger;
  UITextFieldDidEndEditingReason = NSInteger;
  UIActionSheetStyle = NSInteger;
  UIAlertViewStyle = NSInteger;
  UIStatusBarStyle = NSInteger;
  UIStatusBarAnimation = NSInteger;
  UIRemoteNotificationType = NSInteger;
  UIBackgroundFetchResult = NSInteger;
  UIBackgroundRefreshStatus = NSInteger;
  UIApplicationState = NSInteger;
  UIBackgroundTaskIdentifier = NSUInteger;
  UIApplicationOpenExternalURLOptionsKey = NSString;
  UIApplicationLaunchOptionsKey = NSString;
  UIApplicationOpenURLOptionsKey = NSString;
  UIApplicationExtensionPointIdentifier = NSString;
  UIModalTransitionStyle = NSInteger;
  UIModalPresentationStyle = NSInteger;
  UIContainerBackgroundStyle = NSInteger;
  UIPreviewActionStyle = NSInteger;
  UIAlertActionStyle = NSInteger;
  UIAlertControllerStyle = NSInteger;
  UIAlertControllerSeverity = NSInteger;
  UIAccessibilityZoomType = NSInteger;
  UIGuidedAccessErrorCode = NSInteger;
  UIGuidedAccessRestrictionState = NSInteger;
  UIGuidedAccessAccessibilityFeature = NSInteger;

  AXBoolReturnBlock = function: Boolean of object;

  AXStringReturnBlock = function: NSString of object;

  AXStringArrayReturnBlock = function: NSArray of object;

  AXAttributedStringReturnBlock = function: NSAttributedString of object;

  AXAttributedStringArrayReturnBlock = function: NSArray of object;

  AXRectReturnBlock = function: CGRect of object;

  AXPathReturnBlock = function: UIBezierPath of object;

  AXPointReturnBlock = function: CGPoint of object;

  AXObjectReturnBlock = function: Pointer of object;

  AXArrayReturnBlock = function: NSArray of object;

  AXVoidReturnBlock = procedure of object;

  AXTraitsReturnBlock = function: UIAccessibilityTraits of object;

  AXNavigationStyleReturnBlock = function: UIAccessibilityNavigationStyle of object;

  AXContainerTypeReturnBlock = function: UIAccessibilityContainerType of object;

  AXTextualContextReturnBlock = function: UIAccessibilityTextualContext of object;

  AXCustomActionsReturnBlock = function: NSArray of object;
  UIAccessibilityScrollDirection = NSInteger;
  UIAccessibilityHearingDeviceEar = NSInteger;

  UISymbolEffectCompletion = procedure(context: UISymbolEffectCompletionContext) of object;

  UIConfigurationColorTransformer = function(color: UIColor): UIColor of object;

  UIConfigurationTextAttributesTransformer = function(textAttributes: NSDictionary): NSDictionary of object;
  UIButtonConfigurationSize = NSInteger;
  UIButtonConfigurationTitleAlignment = NSInteger;
  UIButtonConfigurationCornerStyle = NSInteger;
  UIButtonConfigurationMacIdiomStyle = NSInteger;
  UIButtonConfigurationIndicator = NSInteger;
  UIButtonType = NSInteger;
  UIButtonRole = NSInteger;

  UIButtonPointerStyleProvider = function(button: UIButton; proposedEffect: UIPointerEffect;
    proposedShape: UIPointerShape): UIPointerStyle of object;

  UIButtonConfigurationUpdateHandler = procedure(button: UIButton) of object;
  UIActivityIndicatorViewStyle = NSInteger;
  UIBarMetrics = NSInteger;
  UIBarPosition = NSInteger;
  UIToolbarPosition = UIBarPosition;
  UIBarButtonItemStyle = NSInteger;
  UIBarButtonSystemItem = NSInteger;
  UICollectionViewScrollPosition = NSInteger;
  UICollectionViewReorderingCadence = NSInteger;
  UICollectionViewSelfSizingInvalidation = NSInteger;

  UICollectionViewLayoutInteractiveTransitionCompletion = procedure(completed: Boolean; finished: Boolean) of object;
  UICollectionViewDropIntent = NSInteger;
  UICollectionViewCellDragState = NSInteger;

  UICollectionViewCellConfigurationUpdateHandler = procedure(cell: UICollectionViewCell; state: UICellConfigurationState) of object;
  UICollectionUpdateAction = NSInteger;
  UICollectionViewScrollDirection = NSInteger;
  UICollectionElementCategory = NSInteger;
  UICollectionViewFlowLayoutSectionInsetReference = NSInteger;
  UIContentInsetsReference = NSInteger;

  UICollectionViewCompositionalLayoutSectionProvider = function(sectionIndex: NSInteger;
    layoutEnvironment: Pointer): NSCollectionLayoutSection of object;
  UICollectionLayoutSectionOrthogonalScrollingBehavior = NSInteger;

  NSCollectionLayoutSectionVisibleItemsInvalidationHandler = procedure(visibleItems: NSArray; contentOffset: CGPoint;
    layoutEnvironment: Pointer) of object;
  UICollectionLayoutSectionOrthogonalScrollingDecelerationRate = CGFloat;
  UICollectionLayoutSectionOrthogonalScrollingBounce = NSInteger;

  NSCollectionLayoutGroupCustomItemProvider = function(layoutEnvironment: Pointer): NSArray of object;
  UICellAccessoryDisplayedState = NSInteger;
  UICellAccessoryOutlineDisclosureStyle = NSInteger;
  UICellAccessoryPlacement = NSInteger;

  UICellAccessoryPosition = function(accessories: NSArray): NSUInteger of object;
  UIGestureRecognizerState = NSInteger;
  UISwipeGestureRecognizerDirection = NSInteger;

  UIContextualActionHandlerCompletionHandler = procedure(actionPeformed: Boolean) of object;
  UIContextualActionHandler = procedure(action: UIContextualAction; sourceView: UIView;
    completionHandler: UIContextualActionHandlerCompletionHandler) of object;
  UIContextualActionStyle = NSInteger;
  UITableViewCellStyle = NSInteger;
  UITableViewCellSeparatorStyle = NSInteger;
  UITableViewCellSelectionStyle = NSInteger;
  UITableViewCellFocusStyle = NSInteger;
  UITableViewCellEditingStyle = NSInteger;
  UITableViewCellAccessoryType = NSInteger;
  UITableViewCellStateMask = NSInteger;
  UITableViewCellDragState = NSInteger;

  UITableViewCellConfigurationUpdateHandler = procedure(cell: UITableViewCell; state: UICellConfigurationState) of object;
  UITableViewStyle = NSInteger;
  UITableViewScrollPosition = NSInteger;
  UITableViewRowAnimation = NSInteger;
  UITableViewRowActionStyle = NSInteger;
  UITableViewSeparatorInsetReference = NSInteger;
  UITableViewSelfSizingInvalidation = NSInteger;
  UITableViewDropIntent = NSInteger;

  UICollectionViewDiffableDataSourceCellProvider = function(collectionView: UICollectionView; indexPath: NSIndexPath;
    itemIdentifier: Pointer): UICollectionViewCell of object;

  UICollectionViewDiffableDataSourceSupplementaryViewProvider = function(collectionView: UICollectionView; elementKind: NSString;
    indexPath: NSIndexPath): UICollectionReusableView of object;

  UITableViewDiffableDataSourceCellProvider = function(tableView: UITableView; indexPath: NSIndexPath;
    itemIdentifier: Pointer): UITableViewCell of object;

  UICollectionViewCellRegistrationConfigurationHandler = procedure(cell: UICollectionViewCell; indexPath: NSIndexPath; item: Pointer) of object;

  UICollectionViewSupplementaryRegistrationConfigurationHandler = procedure(supplementaryView: UICollectionReusableView; elementKind: NSString;
    indexPath: NSIndexPath) of object;
  UICollectionLayoutListAppearance = NSInteger;
  UICollectionLayoutListHeaderMode = NSInteger;
  UICollectionLayoutListFooterMode = NSInteger;

  UICollectionLayoutListSwipeActionsConfigurationProvider = function(indexPath: NSIndexPath): UISwipeActionsConfiguration of object;

  UICollectionLayoutListItemSeparatorHandler = function(indexPath: NSIndexPath;
    sectionSeparatorConfiguration: UIListSeparatorConfiguration): UIListSeparatorConfiguration of object;
  UIListSeparatorVisibility = NSInteger;
  UIConfigurationStateCustomKey = NSString;
  UICellConfigurationDragState = NSInteger;
  UICellConfigurationDropState = NSInteger;
  UIListContentTextAlignment = NSInteger;
  UIListContentTextTransform = NSInteger;
  UIKeyboardHIDUsage = NSInteger;
  UIDataDetectorTypes = NSInteger;
  UIDatePickerMode = NSInteger;
  UIDatePickerStyle = NSInteger;
  UINavigationItemLargeTitleDisplayMode = NSInteger;
  UINavigationItemBackButtonDisplayMode = NSInteger;
  UINavigationItemSearchBarPlacement = NSInteger;
  UINavigationItemStyle = NSInteger;
  UIDocumentChangeKind = NSInteger;
  UIDocumentSaveOperation = NSInteger;
  UIDocumentState = NSInteger;
  UIDocumentPickerMode = NSInteger;
  UIDocumentMenuOrder = NSInteger;
  UICloudSharingPermissionOptions = NSInteger;
  UIBlurEffectStyle = NSInteger;
  UIVibrancyEffectStyle = NSInteger;

  UIGraphicsImageDrawingActions = procedure(rendererContext: UIGraphicsImageRendererContext) of object;
  UIGraphicsImageRendererFormatRange = NSInteger;

  UIGraphicsPDFDrawingActions = procedure(rendererContext: UIGraphicsPDFRendererContext) of object;
  UIScrollType = NSInteger;
  UIScrollTypeMask = NSInteger;
  UINavigationControllerOperation = NSInteger;
  UIImagePickerControllerSourceType = NSInteger;
  UIImagePickerControllerQualityType = NSInteger;
  UIImagePickerControllerCameraCaptureMode = NSInteger;
  UIImagePickerControllerCameraDevice = NSInteger;
  UIImagePickerControllerCameraFlashMode = NSInteger;
  UIImagePickerControllerImageURLExportPreset = NSInteger;
  UIImagePickerControllerInfoKey = NSString;
  UIInputViewStyle = NSInteger;
  UILabelVibrancy = NSInteger;
  UIApplicationShortcutIconType = NSInteger;
  UIUserNotificationType = NSInteger;
  UIUserNotificationActionBehavior = NSInteger;
  UIUserNotificationActivationMode = NSInteger;
  UIUserNotificationActionContext = NSInteger;
  UISceneCollectionJoinBehavior = NSInteger;
  UIWindowSceneDismissalAnimation = NSInteger;
  UICornerCurve = NSInteger;
  UIMenuControllerArrowDirection = NSInteger;
  UIInterpolatingMotionEffectType = NSInteger;
  UIBehavioralStyle = NSInteger;
  UINavigationBarNSToolbarSection = NSInteger;
  UINibOptionsKey = NSString;
  UIPageControlInteractionState = NSInteger;
  UIPageControlBackgroundStyle = NSInteger;
  UIPageControlDirection = NSInteger;
  UIPageViewControllerNavigationOrientation = NSInteger;
  UIPageViewControllerSpineLocation = NSInteger;
  UIPageViewControllerNavigationDirection = NSInteger;
  UIPageViewControllerTransitionStyle = NSInteger;
  UIPageViewControllerOptionsKey = NSString;
  UIPasteboardName = NSString;
  UIPasteboardDetectionPattern = NSString;
  UIPasteboardOption = NSString;
  UIPasteControlDisplayMode = NSInteger;
  UIPopoverArrowDirection = NSInteger;
  UIPressPhase = NSInteger;
  UIPressType = NSInteger;
  UIProgressViewStyle = NSInteger;
  UIScreenOverscanCompensation = NSInteger;
  UIScreenReferenceDisplayModeStatus = NSInteger;
  UISearchBarIcon = NSInteger;
  UISearchBarStyle = NSInteger;
  UITransitionContextViewControllerKey = NSString;
  UITransitionContextViewKey = NSString;
  UITimingCurveType = NSInteger;
  UISearchControllerScopeBarActivation = NSInteger;
  UISegmentedControlStyle = NSInteger;
  UISegmentedControlSegment = NSInteger;
  UISplitViewControllerDisplayMode = NSInteger;
  UISplitViewControllerPrimaryEdge = NSInteger;
  UISplitViewControllerBackgroundStyle = NSInteger;
  UISplitViewControllerStyle = NSInteger;
  UISplitViewControllerColumn = NSInteger;
  UISplitViewControllerSplitBehavior = NSInteger;
  UISplitViewControllerDisplayModeButtonVisibility = NSInteger;

  UIStoryboardViewControllerCreator = function(coder: NSCoder): UIViewController of object;
  UISwitchStyle = NSInteger;
  UITabBarItemPositioning = NSInteger;
  UITabBarSystemItem = NSInteger;

  UITableViewHeaderFooterViewConfigurationUpdateHandler = procedure(headerFooterView: UITableViewHeaderFooterView;
    state: UIViewConfigurationState) of object;
  UITextSearchDocumentIdentifier = Pointer;
  UITextSearchFoundTextStyle = NSInteger;
  UIFindSessionSearchResultDisplayStyle = NSInteger;
  UITextSearchMatchMethod = NSInteger;
  UITextItemInteraction = NSInteger;
  UITextViewBorderStyle = NSInteger;
  UIWebViewNavigationType = NSInteger;
  UIWebPaginationMode = NSInteger;
  UIWebPaginationBreakingMode = NSInteger;
  UIWindowLevel = CGFloat;
  UIDropSessionProgressIndicatorStyle = NSInteger;
  UISpringLoadedInteractionEffectState = NSInteger;
  UITabBarItemAppearanceStyle = NSInteger;
  UIActivityItemsConfigurationMetadataKey = NSString;
  UIActivityItemsConfigurationPreviewIntent = NSString;
  UIActivityItemsConfigurationInteraction = NSString;
  UIScribbleElementIdentifier = Pointer;
  UIStackViewDistribution = NSInteger;
  UIStackViewAlignment = NSInteger;
  NSTextStorageEditActions = NSInteger;
  NSTextLayoutOrientation = NSInteger;
  NSGlyphProperty = NSInteger;
  PNSGlyphProperty = ^NSGlyphProperty;
  NSControlCharacterAction = NSInteger;
  UISheetPresentationControllerDetentIdentifier = NSString;
  UIPushBehaviorMode = NSInteger;
  UIAttachmentBehaviorType = NSInteger;
  UICollisionBehaviorMode = NSInteger;
  UIImpactFeedbackStyle = NSInteger;
  UINotificationFeedbackType = NSInteger;
  UITextInteractionMode = NSInteger;
  UITextItemContentType = NSInteger;

  UIGraphicsDrawingActions = procedure(rendererContext: UIGraphicsRendererContext) of object;
  UIPencilPreferredAction = NSInteger;
  UIPencilInteractionPhase = NSInteger;
  UIWindowSceneResizingRestrictions = NSInteger;
  UIPointerEffectTintMode = NSInteger;
  UIBandSelectionInteractionState = NSInteger;
  UIWindowScenePresentationStyle = NSInteger;

  UIWindowSceneActivationActionConfigurationProvider = function(action: UIWindowSceneActivationAction): UIWindowSceneActivationConfiguration of object;

  UIWindowSceneActivationInteractionConfigurationProvider = function(interaction: UIWindowSceneActivationInteraction;
    location: CGPoint): UIWindowSceneActivationConfiguration of object;
  UIFocusHaloEffectPosition = NSInteger;
  UICalendarViewDecorationSize = NSInteger;
  UIEditMenuArrowDirection = NSInteger;
  UIContentUnavailableAlignment = NSInteger;
  NSTextSelectionGranularity = NSInteger;
  NSTextSelectionAffinity = NSInteger;
  NSTextSelectionNavigationDirection = NSInteger;
  NSTextSelectionNavigationDestination = NSInteger;
  NSTextSelectionNavigationModifier = NSInteger;
  NSTextSelectionNavigationWritingDirection = NSInteger;
  NSTextSelectionNavigationLayoutOrientation = NSInteger;
  NSTextContentManagerEnumerationOptions = NSInteger;
  NSTextLayoutFragmentEnumerationOptions = NSInteger;
  NSTextLayoutFragmentState = NSInteger;
  NSTextLayoutManagerSegmentType = NSInteger;
  NSTextLayoutManagerSegmentOptions = NSInteger;
  NSTextListOptions = NSInteger;
  NSTextListMarkerFormat = NSString;
  UIDocumentBrowserErrorCode = NSInteger;
  UIDocumentBrowserImportMode = NSInteger;
  UIDocumentBrowserUserInterfaceStyle = NSInteger;
  UIDocumentBrowserActionAvailability = NSInteger;
  UIActivityType = NSString;
  UIActivityCategory = NSInteger;

  UIActivityViewControllerCompletionHandler = procedure(activityType: UIActivityType; completed: Boolean) of object;

  UIActivityViewControllerCompletionWithItemsHandler = procedure(activityType: UIActivityType; completed: Boolean; returnedItems: NSArray;
    activityError: NSError) of object;
  UIPrinterJobTypes = NSInteger;

  UIPrinterPickerCompletionHandler = procedure(printerPickerController: UIPrinterPickerController; userDidSelect: Boolean; error: NSError) of object;
  UIPrintErrorCode = NSInteger;
  UIPrintInfoOutputType = NSInteger;
  UIPrintInfoOrientation = NSInteger;
  UIPrintInfoDuplex = NSInteger;

  UIPrintInteractionCompletionHandler = procedure(printInteractionController: UIPrintInteractionController; completed: Boolean;
    error: NSError) of object;
  UIPrinterCutterBehavior = NSInteger;
  UIPrintRenderingQuality = NSInteger;
  TUIColorBlockMethod1 = procedure(traitCollection: UITraitCollection) of object;
  TUIImageBlockMethod1 = procedure(param1: UIImage) of object;
  TUIImageReaderBlockMethod1 = procedure(param1: UIImage) of object;
  TUIDynamicBehaviorBlockMethod1 = procedure of object;
  TUITraitCollectionBlockMethod1 = procedure of object;
  TUIFocusAnimationCoordinatorBlockMethod1 = procedure of object;
  TUIFocusAnimationCoordinatorBlockMethod2 = procedure(animationContext: Pointer) of object;
  TUIViewBlockMethod1 = procedure of object;
  TUIViewBlockMethod2 = procedure(finished: Boolean) of object;
  TUIContextMenuInteractionBlockMethod1 = procedure(visibleMenu: UIMenu) of object;
  TUIContextMenuInteractionAnimatingBlockMethod1 = procedure of object;
  TUIControlBlockMethod1 = procedure(actionHandler: UIAction; target: Pointer; action: SEL; controlEvents: UIControlEvents; stop: PBoolean) of object;
  TUIScrollViewBlockMethod1 = procedure of object;
  TUIViewImplicitlyAnimatingBlockMethod1 = procedure of object;
  TUIViewImplicitlyAnimatingBlockMethod2 = procedure(finalPosition: UIViewAnimatingPosition) of object;
  TUIDragAnimatingBlockMethod1 = procedure of object;
  TUIDragAnimatingBlockMethod2 = procedure(finalPosition: UIViewAnimatingPosition) of object;
  TUIApplicationBlockMethod1 = procedure(success: Boolean) of object;
  TUIApplicationBlockMethod2 = procedure of object;
  TUIApplicationBlockMethod3 = procedure(error: NSError) of object;
  TUIApplicationDelegateBlockMethod1 = procedure of object;
  TUIApplicationDelegateBlockMethod2 = procedure(result: UIBackgroundFetchResult) of object;
  TUIApplicationDelegateBlockMethod3 = procedure(succeeded: Boolean) of object;
  TUIApplicationDelegateBlockMethod4 = procedure(replyInfo: NSDictionary) of object;
  TUIApplicationDelegateBlockMethod5 = procedure(intentResponse: INIntentResponse) of object;
  TUIApplicationDelegateBlockMethod6 = procedure(restorableObjects: NSArray) of object;
  TUISceneBlockMethod1 = procedure(success: Boolean) of object;
  TUIViewControllerBlockMethod1 = procedure of object;
  TUIViewControllerBlockMethod2 = procedure(finished: Boolean) of object;
  TUIPreviewActionBlockMethod1 = procedure(action: UIPreviewAction; previewViewController: UIViewController) of object;
  TUIPreviewActionBlockMethod2 = procedure(param1: Pointer; param2: UIViewController) of object;
  TUIAlertActionBlockMethod1 = procedure(action: UIAlertAction) of object;
  TUIAlertControllerBlockMethod1 = procedure(textField: UITextField) of object;
  TUIDataSourceTranslatingBlockMethod1 = procedure of object;
  TUICollectionViewBlockMethod1 = procedure(finished: Boolean) of object;
  TUICollectionViewBlockMethod2 = procedure of object;
  TUICollectionViewPlaceholderBlockMethod1 = procedure(param1: UICollectionViewCell) of object;
  TUICollectionViewPlaceholderBlockMethod2 = procedure of object;
  TUICollectionViewDropPlaceholderBlockMethod1 = function(param1: UICollectionViewCell): UIDragPreviewParameters of object;
  TUICollectionViewDropPlaceholderBlockMethod2 = procedure of object;
  TUICollectionViewDropPlaceholderContextBlockMethod1 = procedure(insertionIndexPath: NSIndexPath) of object;
  TUICellAccessoryDetailBlockMethod1 = procedure of object;
  TUICellAccessoryDeleteBlockMethod1 = procedure of object;
  TUICellAccessoryInsertBlockMethod1 = procedure of object;
  TUICellAccessoryOutlineDisclosureBlockMethod1 = procedure of object;
  TUICellAccessoryPopUpMenuBlockMethod1 = procedure(param1: UIMenu) of object;
  TUICellAccessoryPopUpMenuBlockMethod2 = procedure of object;
  TUITableViewRowActionBlockMethod1 = procedure(action: UITableViewRowAction; indexPath: NSIndexPath) of object;
  TUITableViewBlockMethod1 = procedure of object;
  TUITableViewBlockMethod2 = procedure(finished: Boolean) of object;
  TUITableViewPlaceholderBlockMethod1 = procedure(param1: UITableViewCell) of object;
  TUITableViewPlaceholderBlockMethod2 = procedure of object;
  TUITableViewDropPlaceholderBlockMethod1 = function(param1: UITableViewCell): UIDragPreviewParameters of object;
  TUITableViewDropPlaceholderBlockMethod2 = procedure of object;
  TUITableViewDropPlaceholderContextBlockMethod1 = procedure(insertionIndexPath: NSIndexPath) of object;
  TUICollectionViewDiffableDataSourceReorderingHandlersBlockMethod1 = function(param1: Pointer): Boolean of object;
  TUICollectionViewDiffableDataSourceReorderingHandlersBlockMethod2 = procedure of object;
  TUICollectionViewDiffableDataSourceReorderingHandlersBlockMethod3 = procedure(param1: NSDiffableDataSourceTransaction) of object;
  TUICollectionViewDiffableDataSourceReorderingHandlersBlockMethod4 = procedure(param1: NSDiffableDataSourceTransaction) of object;
  TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod1 = function(param1: Pointer): Boolean of object;
  TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod2 = procedure of object;
  TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod3 = procedure(param1: Pointer) of object;
  TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod4 = function(param1: Pointer): Boolean of object;
  TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod5 = procedure(param1: Pointer) of object;
  TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod6 = function(param1: Pointer;
    param2: NSDiffableDataSourceSectionSnapshot): NSDiffableDataSourceSectionSnapshot of object;
  TUICollectionViewDiffableDataSourceBlockMethod1 = procedure of object;
  TUITableViewDiffableDataSourceBlockMethod1 = procedure of object;
  TUINavigationItemBlockMethod1 = function(param1: NSArray): UIMenu of object;
  TUINavigationItemBlockMethod2 = procedure of object;
  TUIDocumentBlockMethod1 = procedure(success: Boolean) of object;
  TUIDocumentBlockMethod2 = procedure of object;
  TUIDocumentViewControllerBlockMethod1 = procedure(success: Boolean) of object;
  TUIDocumentMenuViewControllerBlockMethod1 = procedure of object;
  TUICloudSharingControllerBlockMethod1 = procedure of object;
  TUICloudSharingControllerBlockMethod2 = procedure(controller: UICloudSharingController;
    preparationCompletionHandler: TUICloudSharingControllerBlockMethod1) of object;
  TUIInputViewControllerBlockMethod1 = procedure(param1: UILexicon) of object;
  TUIWindowSceneBlockMethod1 = procedure(error: NSError) of object;
  TUIWindowSceneDelegateBlockMethod1 = procedure(succeeded: Boolean) of object;
  TUIPageViewControllerBlockMethod1 = procedure(finished: Boolean) of object;
  TUIPasteboardBlockMethod1 = procedure(param1: NSSet; param2: NSError) of object;
  TUIPasteboardBlockMethod2 = procedure(param1: NSArray; param2: NSError) of object;
  TUIPasteboardBlockMethod3 = procedure(param1: NSDictionary; param2: NSError) of object;
  TUIViewControllerTransitionCoordinatorBlockMethod1 = procedure(context: Pointer) of object;
  TUIStoryboardSegueBlockMethod1 = procedure of object;
  TUITextCursorDropPositionAnimatorBlockMethod1 = procedure of object;
  TUIFindInteractionBlockMethod1 = function(param1: NSArray): UIMenu of object;
  TUIFindInteractionBlockMethod2 = procedure of object;
  TUIDragItemBlockMethod1 = function: UIDragPreview of object;
  TUIDragItemBlockMethod2 = procedure of object;
  TUIDropSessionBlockMethod1 = procedure(objects: NSArray) of object;
  TUISpringLoadedInteractionBlockMethod1 = procedure(interaction: UISpringLoadedInteraction; context: Pointer) of object;
  TUIActivityItemsConfigurationBlockMethod1 = function(param1: UIActivityItemsConfigurationMetadataKey): Pointer of object;
  TUIActivityItemsConfigurationBlockMethod2 = procedure of object;
  TUIActivityItemsConfigurationBlockMethod3 = function(param1: NSInteger; param2: UIActivityItemsConfigurationMetadataKey): Pointer of object;
  TUIActivityItemsConfigurationBlockMethod4 = function(param1: NSInteger; param2: UIActivityItemsConfigurationPreviewIntent;
    param3: CGSize): NSItemProvider of object;
  TUIActivityItemsConfigurationBlockMethod5 = function: NSArray of object;
  TUIIndirectScribbleInteractionDelegateBlockMethod1 = procedure(elements: NSArray) of object;
  TUIIndirectScribbleInteractionDelegateBlockMethod2 = procedure(focusedInput: UIResponder) of object;
  TNSTextStorageObservingBlockMethod1 = procedure of object;
  TNSLayoutManagerBlockMethod1 = procedure(rect: CGRect; usedRect: CGRect; textContainer: NSTextContainer; glyphRange: NSRange;
    stop: PBoolean) of object;
  TNSLayoutManagerBlockMethod2 = procedure(rect: CGRect; stop: PBoolean) of object;
  TUISheetPresentationControllerDetentBlockMethod1 = procedure(context: Pointer) of object;
  TUISheetPresentationControllerBlockMethod1 = procedure of object;
  TUIFieldBehaviorBlockMethod1 = procedure(field: UIFieldBehavior; position: CGPoint; velocity: CGVector; mass: CGFloat; charge: CGFloat;
    deltaTime: NSTimeInterval) of object;
  TUIViewPropertyAnimatorBlockMethod1 = procedure of object;
  TUIViewPropertyAnimatorBlockMethod2 = procedure(finalPosition: UIViewAnimatingPosition) of object;
  TUIDocumentPropertiesBlockMethod1 = function(param1: Pointer): NSArray of object;
  TUIDocumentPropertiesBlockMethod2 = procedure of object;
  TUIDocumentPropertiesBlockMethod3 = function: UIActivityViewController of object;
  TUISceneBlockMethod2 = procedure(param1: AVAudioSession) of object;
  TUIScreenshotServiceDelegateBlockMethod1 = procedure(PDFData: NSData; indexOfCurrentPage: NSInteger; rectInCurrentPage: CGRect) of object;
  TUIMenuBuilderBlockMethod1 = procedure(param1: NSArray) of object;
  TUIDeferredMenuElementBlockMethod1 = procedure of object;
  TUIDeferredMenuElementBlockMethod2 = procedure(completion: TUIDeferredMenuElementBlockMethod1) of object;
  TUIPointerInteractionAnimatingBlockMethod1 = procedure of object;
  TUIPointerInteractionAnimatingBlockMethod2 = procedure(finished: Boolean) of object;
  TUIBandSelectionInteractionBlockMethod1 = procedure(interaction: UIBandSelectionInteraction) of object;
  TUIBandSelectionInteractionBlockMethod2 = function(param1: UIBandSelectionInteraction; param2: CGPoint): Boolean of object;
  TUIBandSelectionInteractionBlockMethod3 = procedure of object;
  TUIWindowSceneActivationInteractionBlockMethod1 = procedure(param1: NSError) of object;
  TUICalendarViewDecorationBlockMethod1 = procedure of object;
  TUIEditMenuInteractionAnimatingBlockMethod1 = procedure of object;
  TNSTextSelectionDataSourceBlockMethod1 = procedure(substring: NSString; substringRange: NSTextRange; enclosingRange: NSTextRange;
    stop: PBoolean) of object;
  TNSTextSelectionDataSourceBlockMethod2 = procedure(caretOffset: CGFloat; location: Pointer; leadingEdge: Boolean; stop: PBoolean) of object;
  TNSTextSelectionDataSourceBlockMethod3 = procedure(boundaryLocation: Pointer; stop: PBoolean) of object;
  TNSTextElementProviderBlockMethod1 = procedure(element: NSTextElement) of object;
  TNSTextElementProviderBlockMethod2 = procedure(error: NSError) of object;
  TNSTextContentManagerBlockMethod1 = procedure(error: NSError) of object;
  TNSTextContentManagerBlockMethod2 = procedure of object;
  TNSTextLayoutManagerBlockMethod1 = procedure(layoutFragment: NSTextLayoutFragment) of object;
  TNSTextLayoutManagerBlockMethod2 = procedure(textLayoutManager: NSTextLayoutManager; attributes: NSDictionary; textRange: NSTextRange) of object;
  TNSTextLayoutManagerBlockMethod3 = procedure(textSegmentRange: NSTextRange; textSegmentFrame: CGRect; baselinePosition: CGFloat;
    textContainer: NSTextContainer) of object;
  TNSTextLayoutManagerBlockMethod4 = procedure(param1: NSTextLayoutManager; param2: NSTextLayoutFragment) of object;
  TNSTextLayoutManagerBlockMethod5 = procedure of object;
  TUIDocumentBrowserViewControllerBlockMethod1 = procedure(revealedDocumentURL: NSURL; error: NSError) of object;
  TUIDocumentBrowserViewControllerBlockMethod2 = procedure(param1: NSURL; param2: NSError) of object;
  TUIDocumentBrowserViewControllerBlockMethod3 = procedure(finalURL: NSURL; error: NSError) of object;
  TUIDocumentBrowserViewControllerDelegateBlockMethod1 = procedure(urlToImport: NSURL; importMode: UIDocumentBrowserImportMode) of object;
  TUIDocumentBrowserActionBlockMethod1 = procedure(param1: NSArray) of object;
  TUIPrinterBlockMethod1 = procedure(available: Boolean) of object;

  UIBezierPathClass = interface(NSObjectClass)
    ['{545C75CB-77A5-47C3-A916-5BD644BAA908}']
    {class} function bezierPath: Pointer; cdecl;
    {class} function bezierPathWithArcCenter(center: CGPoint; radius: CGFloat; startAngle: CGFloat; endAngle: CGFloat;
      clockwise: Boolean): Pointer; cdecl;
    {class} function bezierPathWithCGPath(CGPath: CGPathRef): Pointer; cdecl;
    {class} function bezierPathWithOvalInRect(rect: CGRect): Pointer; cdecl;
    {class} function bezierPathWithRect(rect: CGRect): Pointer; cdecl;
    {class} function bezierPathWithRoundedRect(rect: CGRect; byRoundingCorners: UIRectCorner; cornerRadii: CGSize): Pointer; overload; cdecl;
    {class} function bezierPathWithRoundedRect(rect: CGRect; cornerRadius: CGFloat): Pointer; overload; cdecl;
  end;

  UIBezierPath = interface(NSObject)
    ['{93B7431A-8AD1-4FDC-9AE5-9E1C25549AEB}']
    procedure addArcWithCenter(center: CGPoint; radius: CGFloat; startAngle: CGFloat; endAngle: CGFloat; clockwise: Boolean); cdecl;
    procedure addClip; cdecl;
    procedure addCurveToPoint(endPoint: CGPoint; controlPoint1: CGPoint; controlPoint2: CGPoint); cdecl;
    procedure addLineToPoint(point: CGPoint); cdecl;
    procedure addQuadCurveToPoint(endPoint: CGPoint; controlPoint: CGPoint); cdecl;
    procedure appendPath(bezierPath: UIBezierPath); cdecl;
    procedure applyTransform(transform: CGAffineTransform); cdecl;
    function bezierPathByReversingPath: UIBezierPath; cdecl;
    function bounds: CGRect; cdecl;
    function CGPath: CGPathRef; cdecl;
    procedure closePath; cdecl;
    function containsPoint(point: CGPoint): Boolean; cdecl;
    function currentPoint: CGPoint; cdecl;
    procedure fill; cdecl;
    procedure fillWithBlendMode(blendMode: CGBlendMode; alpha: CGFloat); cdecl;
    function flatness: CGFloat; cdecl;
    procedure getLineDash(pattern: PCGFloat; count: PNSInteger; phase: PCGFloat); cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function isEmpty: Boolean; cdecl;
    function lineCapStyle: CGLineCap; cdecl;
    function lineJoinStyle: CGLineJoin; cdecl;
    function lineWidth: CGFloat; cdecl;
    function miterLimit: CGFloat; cdecl;
    procedure moveToPoint(point: CGPoint); cdecl;
    procedure removeAllPoints; cdecl;
    procedure setCGPath(CGPath: CGPathRef); cdecl;
    procedure setFlatness(flatness: CGFloat); cdecl;
    procedure setLineCapStyle(lineCapStyle: CGLineCap); cdecl;
    procedure setLineDash(pattern: PCGFloat; count: NSInteger; phase: CGFloat); cdecl;
    procedure setLineJoinStyle(lineJoinStyle: CGLineJoin); cdecl;
    procedure setLineWidth(lineWidth: CGFloat); cdecl;
    procedure setMiterLimit(miterLimit: CGFloat); cdecl;
    procedure setUsesEvenOddFillRule(usesEvenOddFillRule: Boolean); cdecl;
    procedure stroke; cdecl;
    procedure strokeWithBlendMode(blendMode: CGBlendMode; alpha: CGFloat); cdecl;
    function usesEvenOddFillRule: Boolean; cdecl;
  end;
  TUIBezierPath = class(TOCGenericImport<UIBezierPathClass, UIBezierPath>) end;

  UIColorClass = interface(NSObjectClass)
    ['{C93B6D58-C72C-47F9-BBC9-A3807D923DE3}']
    {class} function blackColor: UIColor; cdecl;
    {class} function blueColor: UIColor; cdecl;
    {class} function brownColor: UIColor; cdecl;
    {class} function clearColor: UIColor; cdecl;
    {class} function colorNamed(name: NSString): UIColor; overload; cdecl;
    {class} function colorNamed(name: NSString; inBundle: NSBundle; compatibleWithTraitCollection: UITraitCollection): UIColor; overload; cdecl;
    {class} function colorWithCGColor(cgColor: CGColorRef): UIColor; cdecl;
    {class} function colorWithCIColor(ciColor: CIColor): UIColor; cdecl;
    {class} function colorWithDisplayP3Red(displayP3Red: CGFloat; green: CGFloat; blue: CGFloat; alpha: CGFloat): UIColor; cdecl;
    {class} function colorWithDynamicProvider(dynamicProvider: TUIColorBlockMethod1): UIColor; cdecl;
    {class} function colorWithHue(hue: CGFloat; saturation: CGFloat; brightness: CGFloat; alpha: CGFloat): UIColor; cdecl;
    {class} function colorWithPatternImage(image: UIImage): UIColor; cdecl;
    {class} function colorWithRed(red: CGFloat; green: CGFloat; blue: CGFloat; alpha: CGFloat): UIColor; cdecl;
    {class} function colorWithWhite(white: CGFloat; alpha: CGFloat): UIColor; cdecl;
    {class} function cyanColor: UIColor; cdecl;
    {class} function darkGrayColor: UIColor; cdecl;
    {class} function darkTextColor: UIColor; cdecl;
    {class} function grayColor: UIColor; cdecl;
    {class} function greenColor: UIColor; cdecl;
    {class} function groupTableViewBackgroundColor: UIColor; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("systemGroupedBackgroundColor", ios(2.0, 13.0), tvos(13.0, 13.0))
    {class} function labelColor: UIColor; cdecl;
    {class} function lightGrayColor: UIColor; cdecl;
    {class} function lightTextColor: UIColor; cdecl;
    {class} function linkColor: UIColor; cdecl;
    {class} function magentaColor: UIColor; cdecl;
    {class} function opaqueSeparatorColor: UIColor; cdecl;
    {class} function orangeColor: UIColor; cdecl;
    {class} function placeholderTextColor: UIColor; cdecl;
    {class} function purpleColor: UIColor; cdecl;
    {class} function quaternaryLabelColor: UIColor; cdecl;
    {class} function quaternarySystemFillColor: UIColor; cdecl;
    {class} function redColor: UIColor; cdecl;
    {class} function scrollViewTexturedBackgroundColor: UIColor; cdecl; // API_DEPRECATED("", ios(3.2, 7.0))
    {class} function secondaryLabelColor: UIColor; cdecl;
    {class} function secondarySystemBackgroundColor: UIColor; cdecl;
    {class} function secondarySystemFillColor: UIColor; cdecl;
    {class} function secondarySystemGroupedBackgroundColor: UIColor; cdecl;
    {class} function separatorColor: UIColor; cdecl;
    {class} function systemBackgroundColor: UIColor; cdecl;
    {class} function systemBlueColor: UIColor; cdecl;
    {class} function systemBrownColor: UIColor; cdecl;
    {class} function systemCyanColor: UIColor; cdecl;
    {class} function systemFillColor: UIColor; cdecl;
    {class} function systemGray2Color: UIColor; cdecl;
    {class} function systemGray3Color: UIColor; cdecl;
    {class} function systemGray4Color: UIColor; cdecl;
    {class} function systemGray5Color: UIColor; cdecl;
    {class} function systemGray6Color: UIColor; cdecl;
    {class} function systemGrayColor: UIColor; cdecl;
    {class} function systemGreenColor: UIColor; cdecl;
    {class} function systemGroupedBackgroundColor: UIColor; cdecl;
    {class} function systemIndigoColor: UIColor; cdecl;
    {class} function systemMintColor: UIColor; cdecl;
    {class} function systemOrangeColor: UIColor; cdecl;
    {class} function systemPinkColor: UIColor; cdecl;
    {class} function systemPurpleColor: UIColor; cdecl;
    {class} function systemRedColor: UIColor; cdecl;
    {class} function systemTealColor: UIColor; cdecl;
    {class} function systemYellowColor: UIColor; cdecl;
    {class} function tertiaryLabelColor: UIColor; cdecl;
    {class} function tertiarySystemBackgroundColor: UIColor; cdecl;
    {class} function tertiarySystemFillColor: UIColor; cdecl;
    {class} function tertiarySystemGroupedBackgroundColor: UIColor; cdecl;
    {class} function tintColor: UIColor; cdecl;
    {class} function underPageBackgroundColor: UIColor; cdecl; // API_DEPRECATED("", ios(5.0, 7.0))
    {class} function viewFlipsideBackgroundColor: UIColor; cdecl; // API_DEPRECATED("", ios(2.0, 7.0))
    {class} function whiteColor: UIColor; cdecl;
    {class} function yellowColor: UIColor; cdecl;
  end;

  UIColor = interface(NSObject)
    ['{F61323A5-9FA7-4BF0-BD70-899F0B534F31}']
    procedure &set; cdecl;
    function accessibilityName: NSString; cdecl;
    function CGColor: CGColorRef; cdecl;
    function CIColor: CIColor; cdecl;
    function colorWithAlphaComponent(alpha: CGFloat): UIColor; cdecl;
    function getHue(hue: PCGFloat; saturation: PCGFloat; brightness: PCGFloat; alpha: PCGFloat): Boolean; cdecl;
    function getRed(red: PCGFloat; green: PCGFloat; blue: PCGFloat; alpha: PCGFloat): Boolean; cdecl;
    function getWhite(white: PCGFloat; alpha: PCGFloat): Boolean; cdecl;
    function initWithCGColor(cgColor: CGColorRef): UIColor; cdecl;
    function initWithCIColor(ciColor: CIColor): UIColor; cdecl;
    function initWithDisplayP3Red(displayP3Red: CGFloat; green: CGFloat; blue: CGFloat; alpha: CGFloat): UIColor; cdecl;
    function initWithDynamicProvider(dynamicProvider: TUIColorBlockMethod1): UIColor; cdecl;
    function initWithHue(hue: CGFloat; saturation: CGFloat; brightness: CGFloat; alpha: CGFloat): UIColor; cdecl;
    function initWithPatternImage(image: UIImage): UIColor; cdecl;
    function initWithRed(red: CGFloat; green: CGFloat; blue: CGFloat; alpha: CGFloat): UIColor; cdecl;
    function initWithWhite(white: CGFloat; alpha: CGFloat): UIColor; cdecl;
    function resolvedColorWithTraitCollection(traitCollection: UITraitCollection): UIColor; cdecl;
    procedure setFill; cdecl;
    procedure setStroke; cdecl;
  end;
  TUIColor = class(TOCGenericImport<UIColorClass, UIColor>) end;

  // Renamed to avoid conflict with: UIFontDescriptorClass = NSInteger
  UIFontDescriptorClazz = interface(NSObjectClass)
    ['{4D398C23-3856-437D-AE57-16D969374F7C}']
    {class} function fontDescriptorWithFontAttributes(attributes: NSDictionary): UIFontDescriptor; cdecl;
    {class} function fontDescriptorWithName(fontName: NSString; matrix: CGAffineTransform): UIFontDescriptor; overload; cdecl;
    {class} function fontDescriptorWithName(fontName: NSString; size: CGFloat): UIFontDescriptor; overload; cdecl;
    {class} function preferredFontDescriptorWithTextStyle(style: UIFontTextStyle;
      compatibleWithTraitCollection: UITraitCollection): UIFontDescriptor; overload; cdecl;
    {class} function preferredFontDescriptorWithTextStyle(style: UIFontTextStyle): UIFontDescriptor; overload; cdecl;
  end;

  UIFontDescriptor = interface(NSObject)
    ['{7FDE74BB-E81D-4DDB-944E-5B9B6B3792B1}']
    function fontAttributes: NSDictionary; cdecl;
    function fontDescriptorByAddingAttributes(attributes: NSDictionary): UIFontDescriptor; cdecl;
    function fontDescriptorWithDesign(design: UIFontDescriptorSystemDesign): UIFontDescriptor; cdecl;
    function fontDescriptorWithFace(newFace: NSString): UIFontDescriptor; cdecl;
    function fontDescriptorWithFamily(newFamily: NSString): UIFontDescriptor; cdecl;
    function fontDescriptorWithMatrix(matrix: CGAffineTransform): UIFontDescriptor; cdecl;
    function fontDescriptorWithSize(newPointSize: CGFloat): UIFontDescriptor; cdecl;
    function fontDescriptorWithSymbolicTraits(symbolicTraits: UIFontDescriptorSymbolicTraits): UIFontDescriptor; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFontAttributes(attributes: NSDictionary): Pointer; cdecl;
    function matchingFontDescriptorsWithMandatoryKeys(mandatoryKeys: NSSet): NSArray; cdecl;
    function matrix: CGAffineTransform; cdecl;
    function objectForKey(anAttribute: UIFontDescriptorAttributeName): Pointer; cdecl;
    function pointSize: CGFloat; cdecl;
    function postscriptName: NSString; cdecl;
    function symbolicTraits: UIFontDescriptorSymbolicTraits; cdecl;
  end;
  TUIFontDescriptor = class(TOCGenericImport<UIFontDescriptorClazz, UIFontDescriptor>) end;

  UIFontClass = interface(NSObjectClass)
    ['{8A75D375-534E-4B8E-9035-53BBE080C378}']
    {class} function boldSystemFontOfSize(fontSize: CGFloat): UIFont; cdecl;
    {class} function buttonFontSize: CGFloat; cdecl;
    {class} function defaultFontSize: CGFloat; cdecl;
    {class} function familyNames: NSArray; cdecl;
    {class} function fontNamesForFamilyName(familyName: NSString): NSArray; cdecl;
    {class} function fontWithDescriptor(descriptor: UIFontDescriptor; size: CGFloat): UIFont; cdecl;
    {class} function fontWithName(fontName: NSString; size: CGFloat): UIFont; cdecl;
    {class} function italicSystemFontOfSize(fontSize: CGFloat): UIFont; cdecl;
    {class} function labelFontSize: CGFloat; cdecl;
    {class} function monospacedDigitSystemFontOfSize(fontSize: CGFloat; weight: UIFontWeight): UIFont; cdecl;
    {class} function monospacedSystemFontOfSize(fontSize: CGFloat; weight: UIFontWeight): UIFont; cdecl;
    {class} function preferredFontForTextStyle(style: UIFontTextStyle): UIFont; overload; cdecl;
    {class} function preferredFontForTextStyle(style: UIFontTextStyle; compatibleWithTraitCollection: UITraitCollection): UIFont; overload; cdecl;
    {class} function smallSystemFontSize: CGFloat; cdecl;
    {class} function systemFontOfSize(fontSize: CGFloat): UIFont; overload; cdecl;
    {class} function systemFontOfSize(fontSize: CGFloat; weight: UIFontWeight): UIFont; overload; cdecl;
    {class} function systemFontOfSize(fontSize: CGFloat; weight: UIFontWeight; width: UIFontWidth): UIFont; overload; cdecl;
    {class} function systemFontSize: CGFloat; cdecl;
    {class} function systemMinimumFontSize: CGFloat; cdecl;
  end;

  UIFont = interface(NSObject)
    ['{5EA98DA0-13C2-42C7-930B-5BA913C3A6EA}']
    function ascender: CGFloat; cdecl;
    function capHeight: CGFloat; cdecl;
    function descender: CGFloat; cdecl;
    function familyName: NSString; cdecl;
    function fontDescriptor: UIFontDescriptor; cdecl;
    function fontName: NSString; cdecl;
    function fontWithSize(fontSize: CGFloat): UIFont; cdecl;
    function leading: CGFloat; cdecl;
    function lineHeight: CGFloat; cdecl;
    function pointSize: CGFloat; cdecl;
    function xHeight: CGFloat; cdecl;
  end;
  TUIFont = class(TOCGenericImport<UIFontClass, UIFont>) end;

  UIFontMetricsClass = interface(NSObjectClass)
    ['{1C898B34-2E4F-4A77-81E2-05A60AE23B22}']
    {class} function defaultMetrics: UIFontMetrics; cdecl;
    {class} function metricsForTextStyle(textStyle: UIFontTextStyle): Pointer; cdecl;
  end;

  UIFontMetrics = interface(NSObject)
    ['{578F081C-AA6A-4EBA-A132-680FF34463E6}']
    function initForTextStyle(textStyle: UIFontTextStyle): Pointer; cdecl;
    function scaledFontForFont(font: UIFont; compatibleWithTraitCollection: UITraitCollection): UIFont; overload; cdecl;
    function scaledFontForFont(font: UIFont; maximumPointSize: CGFloat; compatibleWithTraitCollection: UITraitCollection): UIFont; overload; cdecl;
    function scaledFontForFont(font: UIFont): UIFont; overload; cdecl;
    function scaledFontForFont(font: UIFont; maximumPointSize: CGFloat): UIFont; overload; cdecl;
    function scaledValueForValue(value: CGFloat; compatibleWithTraitCollection: UITraitCollection): CGFloat; overload; cdecl;
    function scaledValueForValue(value: CGFloat): CGFloat; overload; cdecl;
  end;
  TUIFontMetrics = class(TOCGenericImport<UIFontMetricsClass, UIFontMetrics>) end;

  UIItemProviderPresentationSizeProviding = interface(IObjectiveC)
    ['{BA40D43B-EB35-40EF-90BC-D47E9A55EC77}']
    function preferredPresentationSizeForItemProvider: CGSize; cdecl;
  end;

  UIItemProviderReadingAugmentationProviding = interface(IObjectiveC)
    ['{D3E721F0-50B1-4978-8F14-B9A29E639AE8}']
    {class} function additionalLeadingReadableTypeIdentifiersForItemProvider: NSArray; cdecl;
    {class} function additionalTrailingReadableTypeIdentifiersForItemProvider: NSArray; cdecl;
    {class} function objectWithItemProviderData(data: NSData; typeIdentifier: NSString; requestedClass: Pointer; error: PPointer): Pointer; cdecl;
  end;

  UIItemProviderReadingAugmentationDesignating = interface(IObjectiveC)
    ['{AECFA7EA-BEAF-4D31-83BF-565FA0BDB8AE}']
    {class} function _ui_augmentingNSItemProviderReadingClass: Pointer; cdecl;
  end;

  NSTextAttachmentContainer = interface(IObjectiveC)
    ['{905C45D7-D8B1-4393-8ADD-D76A66344A62}']
    function attachmentBoundsForTextContainer(textContainer: NSTextContainer; proposedLineFragment: CGRect; glyphPosition: CGPoint;
      characterIndex: NSUInteger): CGRect; cdecl;
    function imageForBounds(imageBounds: CGRect; textContainer: NSTextContainer; characterIndex: NSUInteger): UIImage; cdecl;
  end;

  NSTextAttachmentLayout = interface(IObjectiveC)
    ['{F36CE1A2-56C0-4113-BC8E-03C51145A878}']
    function attachmentBoundsForAttributes(attributes: NSDictionary; location: Pointer; textContainer: NSTextContainer; proposedLineFragment: CGRect;
      position: CGPoint): CGRect; cdecl;
    function imageForBounds(bounds: CGRect; attributes: NSDictionary; location: Pointer; textContainer: NSTextContainer): UIImage; cdecl;
    function viewProviderForParentView(parentView: UIView; location: Pointer; textContainer: NSTextContainer): NSTextAttachmentViewProvider; cdecl;
  end;

  NSTextAttachmentClass = interface(NSObjectClass)
    ['{E616FBA0-0C23-4EA6-B3F2-D594C0FDA79D}']
    {class} procedure registerTextAttachmentViewProviderClass(textAttachmentViewProviderClass: Pointer; forFileType: NSString); cdecl;
    {class} function textAttachmentViewProviderClassForFileType(fileType: NSString): Pointer; cdecl;
    {class} function textAttachmentWithImage(image: UIImage): NSTextAttachment; cdecl;
  end;

  NSTextAttachment = interface(NSObject)
    ['{52A88A32-8691-4D3B-B75F-14668DB3057C}']
    function allowsTextAttachmentView: Boolean; cdecl;
    function bounds: CGRect; cdecl;
    function contents: NSData; cdecl;
    function fileType: NSString; cdecl;
    function fileWrapper: NSFileWrapper; cdecl;
    function image: UIImage; cdecl;
    function initWithData(contentData: NSData; ofType: NSString): Pointer; cdecl;
    function lineLayoutPadding: CGFloat; cdecl;
    procedure setAllowsTextAttachmentView(allowsTextAttachmentView: Boolean); cdecl;
    procedure setBounds(bounds: CGRect); cdecl;
    procedure setContents(contents: NSData); cdecl;
    procedure setFileType(fileType: NSString); cdecl;
    procedure setFileWrapper(fileWrapper: NSFileWrapper); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setLineLayoutPadding(lineLayoutPadding: CGFloat); cdecl;
    function usesTextAttachmentView: Boolean; cdecl;
  end;
  TNSTextAttachment = class(TOCGenericImport<NSTextAttachmentClass, NSTextAttachment>) end;

  NSTextAttachmentViewProviderClass = interface(NSObjectClass)
    ['{4A510205-9C51-48D0-B537-05BEB4373B4B}']
    {class} function new: Pointer; cdecl;
  end;

  NSTextAttachmentViewProvider = interface(NSObject)
    ['{2DAF3F09-DE5D-463E-9E56-820EE9838EA2}']
    function attachmentBoundsForAttributes(attributes: NSDictionary; location: Pointer; textContainer: NSTextContainer; proposedLineFragment: CGRect;
      position: CGPoint): CGRect; cdecl;
    function initWithTextAttachment(textAttachment: NSTextAttachment; parentView: UIView; textLayoutManager: NSTextLayoutManager;
      location: Pointer): Pointer; cdecl;
    procedure loadView; cdecl;
    function location: Pointer; cdecl;
    procedure setTracksTextAttachmentViewBounds(tracksTextAttachmentViewBounds: Boolean); cdecl;
    procedure setView(view: UIView); cdecl;
    function textAttachment: NSTextAttachment; cdecl;
    function textLayoutManager: NSTextLayoutManager; cdecl;
    function tracksTextAttachmentViewBounds: Boolean; cdecl;
    function view: UIView; cdecl;
  end;
  TNSTextAttachmentViewProvider = class(TOCGenericImport<NSTextAttachmentViewProviderClass, NSTextAttachmentViewProvider>) end;

  UIImageClass = interface(NSObjectClass)
    ['{D7460F0A-539C-4182-A4C3-910D25128C58}']
    {class} function actionsImage: UIImage; cdecl;
    {class} function addImage: UIImage; cdecl;
    {class} function animatedImageNamed(name: NSString; duration: NSTimeInterval): UIImage; cdecl;
    {class} function animatedImageWithImages(images: NSArray; duration: NSTimeInterval): UIImage; cdecl;
    {class} function animatedResizableImageNamed(name: NSString; capInsets: UIEdgeInsets; resizingMode: UIImageResizingMode;
      duration: NSTimeInterval): UIImage; overload; cdecl;
    {class} function animatedResizableImageNamed(name: NSString; capInsets: UIEdgeInsets; duration: NSTimeInterval): UIImage; overload; cdecl;
    {class} function checkmarkImage: UIImage; cdecl;
    {class} function imageNamed(name: NSString; inBundle: NSBundle; variableValue: Double;
      withConfiguration: UIImageConfiguration): UIImage; overload; cdecl;
    {class} function imageNamed(name: NSString): UIImage; overload; cdecl;
    {class} function imageNamed(name: NSString; inBundle: NSBundle; withConfiguration: UIImageConfiguration): UIImage; overload; cdecl;
    {class} function imageNamed(name: NSString; inBundle: NSBundle; compatibleWithTraitCollection: UITraitCollection): UIImage; overload; cdecl;
    {class} function imageWithCGImage(cgImage: CGImageRef; scale: CGFloat; orientation: UIImageOrientation): UIImage; overload; cdecl;
    {class} function imageWithCGImage(cgImage: CGImageRef): UIImage; overload; cdecl;
    {class} function imageWithCIImage(ciImage: CIImage; scale: CGFloat; orientation: UIImageOrientation): UIImage; overload; cdecl;
    {class} function imageWithCIImage(ciImage: CIImage): UIImage; overload; cdecl;
    {class} function imageWithContentsOfFile(path: NSString): UIImage; cdecl;
    {class} function imageWithData(data: NSData; scale: CGFloat): UIImage; overload; cdecl;
    {class} function imageWithData(data: NSData): UIImage; overload; cdecl;
    {class} function removeImage: UIImage; cdecl;
    {class} function strokedCheckmarkImage: UIImage; cdecl;
    {class} function systemImageNamed(name: NSString): UIImage; overload; cdecl;
    {class} function systemImageNamed(name: NSString; variableValue: Double; withConfiguration: UIImageConfiguration): UIImage; overload; cdecl;
    {class} function systemImageNamed(name: NSString; compatibleWithTraitCollection: UITraitCollection): UIImage; overload; cdecl;
    {class} function systemImageNamed(name: NSString; withConfiguration: UIImageConfiguration): UIImage; overload; cdecl;
  end;

  UIImage = interface(NSObject)
    ['{E68BCA1A-2194-4516-A509-EC43B084F5C3}']
    function alignmentRectInsets: UIEdgeInsets; cdecl;
    function baselineOffsetFromBottom: CGFloat; cdecl;
    function capInsets: UIEdgeInsets; cdecl;
    function CGImage: CGImageRef; cdecl;
    function CIImage: CIImage; cdecl;
    function configuration: UIImageConfiguration; cdecl;
    procedure drawAsPatternInRect(rect: CGRect); cdecl;
    procedure drawAtPoint(point: CGPoint; blendMode: CGBlendMode; alpha: CGFloat); overload; cdecl;
    procedure drawAtPoint(point: CGPoint); overload; cdecl;
    procedure drawInRect(rect: CGRect; blendMode: CGBlendMode; alpha: CGFloat); overload; cdecl;
    procedure drawInRect(rect: CGRect); overload; cdecl;
    function duration: NSTimeInterval; cdecl;
    function flipsForRightToLeftLayoutDirection: Boolean; cdecl;
    function hasBaseline: Boolean; cdecl;
    function imageAsset: UIImageAsset; cdecl;
    function imageByApplyingSymbolConfiguration(configuration: UIImageSymbolConfiguration): UIImage; cdecl;
    function imageByPreparingForDisplay: UIImage; cdecl;
    function imageByPreparingThumbnailOfSize(size: CGSize): UIImage; cdecl;
    function imageFlippedForRightToLeftLayoutDirection: UIImage; cdecl;
    function imageOrientation: UIImageOrientation; cdecl;
    function imageRendererFormat: UIGraphicsImageRendererFormat; cdecl;
    function imageRestrictedToStandardDynamicRange: UIImage; cdecl;
    function images: NSArray; cdecl;
    function imageWithAlignmentRectInsets(alignmentInsets: UIEdgeInsets): UIImage; cdecl;
    function imageWithBaselineOffsetFromBottom(baselineOffset: CGFloat): UIImage; cdecl;
    function imageWithConfiguration(configuration: UIImageConfiguration): UIImage; cdecl;
    function imageWithHorizontallyFlippedOrientation: UIImage; cdecl;
    function imageWithoutBaseline: UIImage; cdecl;
    function imageWithRenderingMode(renderingMode: UIImageRenderingMode): UIImage; cdecl;
    function imageWithTintColor(color: UIColor; renderingMode: UIImageRenderingMode): UIImage; overload; cdecl;
    function imageWithTintColor(color: UIColor): UIImage; overload; cdecl;
    function initWithCGImage(cgImage: CGImageRef; scale: CGFloat; orientation: UIImageOrientation): Pointer; overload; cdecl;
    function initWithCGImage(cgImage: CGImageRef): Pointer; overload; cdecl;
    function initWithCIImage(ciImage: CIImage): Pointer; overload; cdecl;
    function initWithCIImage(ciImage: CIImage; scale: CGFloat; orientation: UIImageOrientation): Pointer; overload; cdecl;
    function initWithContentsOfFile(path: NSString): Pointer; cdecl;
    function initWithData(data: NSData; scale: CGFloat): Pointer; overload; cdecl;
    function initWithData(data: NSData): Pointer; overload; cdecl;
    function isHighDynamicRange: Boolean; cdecl;
    function isSymbolImage: Boolean; cdecl;
    function leftCapWidth: NSInteger; cdecl;
    procedure prepareForDisplayWithCompletionHandler(completionHandler: TUIImageBlockMethod1); cdecl;
    procedure prepareThumbnailOfSize(size: CGSize; completionHandler: TUIImageBlockMethod1); cdecl;
    function renderingMode: UIImageRenderingMode; cdecl;
    function resizableImageWithCapInsets(capInsets: UIEdgeInsets; resizingMode: UIImageResizingMode): UIImage; overload; cdecl;
    function resizableImageWithCapInsets(capInsets: UIEdgeInsets): UIImage; overload; cdecl;
    function resizingMode: UIImageResizingMode; cdecl;
    function scale: CGFloat; cdecl;
    function size: CGSize; cdecl;
    function stretchableImageWithLeftCapWidth(leftCapWidth: NSInteger; topCapHeight: NSInteger): UIImage; cdecl;
    function symbolConfiguration: UIImageSymbolConfiguration; cdecl;
    function topCapHeight: NSInteger; cdecl;
    function traitCollection: UITraitCollection; cdecl;
  end;
  TUIImage = class(TOCGenericImport<UIImageClass, UIImage>) end;

  UIImageReaderConfigurationClass = interface(NSObjectClass)
    ['{FECA9BA1-D681-4EB6-AB27-CB737FA685C9}']
  end;

  UIImageReaderConfiguration = interface(NSObject)
    ['{46294CEE-B737-4CEF-9DF6-6D9FD7153BEB}']
    function pixelsPerInch: CGFloat; cdecl;
    function preferredThumbnailSize: CGSize; cdecl;
    function prefersHighDynamicRange: Boolean; cdecl;
    function preparesImagesForDisplay: Boolean; cdecl;
    procedure setPixelsPerInch(pixelsPerInch: CGFloat); cdecl;
    procedure setPreferredThumbnailSize(preferredThumbnailSize: CGSize); cdecl;
    procedure setPrefersHighDynamicRange(prefersHighDynamicRange: Boolean); cdecl;
    procedure setPreparesImagesForDisplay(preparesImagesForDisplay: Boolean); cdecl;
  end;
  TUIImageReaderConfiguration = class(TOCGenericImport<UIImageReaderConfigurationClass, UIImageReaderConfiguration>) end;

  UIImageReaderClass = interface(NSObjectClass)
    ['{A1D0824C-1CFF-4179-BD2F-3CFE2E7A46AF}']
    {class} function defaultReader: UIImageReader; cdecl;
    {class} function readerWithConfiguration(configuration: UIImageReaderConfiguration): Pointer; cdecl;
  end;

  UIImageReader = interface(NSObject)
    ['{9A6C9AFF-6C37-4821-BB19-18EAAE3A7E67}']
    function configuration: UIImageReaderConfiguration; cdecl;
    procedure imageWithContentsOfFileURL(url: NSURL; completion: TUIImageReaderBlockMethod1); overload; cdecl;
    function imageWithContentsOfFileURL(url: NSURL): UIImage; overload; cdecl;
    procedure imageWithData(data: NSData; completion: TUIImageReaderBlockMethod1); overload; cdecl;
    function imageWithData(data: NSData): UIImage; overload; cdecl;
  end;
  TUIImageReader = class(TOCGenericImport<UIImageReaderClass, UIImageReader>) end;

  UIImageConfigurationClass = interface(NSObjectClass)
    ['{556F9022-B74A-4ECD-A2FB-C05325ED9883}']
    {class} function configurationWithLocale(locale: NSLocale): Pointer; cdecl;
    {class} function configurationWithTraitCollection(traitCollection: UITraitCollection): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIImageConfiguration = interface(NSObject)
    ['{0DDA0406-39C7-4EF0-B1B1-A6A28A587B6A}']
    function configurationByApplyingConfiguration(otherConfiguration: UIImageConfiguration): Pointer; cdecl;
    function configurationWithLocale(locale: NSLocale): Pointer; cdecl;
    function configurationWithTraitCollection(traitCollection: UITraitCollection): Pointer; cdecl;
    function locale: NSLocale; cdecl;
    function traitCollection: UITraitCollection; cdecl;
  end;
  TUIImageConfiguration = class(TOCGenericImport<UIImageConfigurationClass, UIImageConfiguration>) end;

  UIImageSymbolConfigurationClass = interface(UIImageConfigurationClass)
    ['{B87F5F7E-99FE-443C-96DB-11712435368D}']
    {class} function configurationPreferringMonochrome: Pointer; cdecl;
    {class} function configurationPreferringMulticolor: Pointer; cdecl;
    {class} function configurationWithFont(font: UIFont): Pointer; overload; cdecl;
    {class} function configurationWithFont(font: UIFont; scale: UIImageSymbolScale): Pointer; overload; cdecl;
    {class} function configurationWithHierarchicalColor(hierarchicalColor: UIColor): Pointer; cdecl;
    {class} function configurationWithPaletteColors(paletteColors: NSArray): Pointer; cdecl;
    {class} function configurationWithPointSize(pointSize: CGFloat): Pointer; overload; cdecl;
    {class} function configurationWithPointSize(pointSize: CGFloat; weight: UIImageSymbolWeight): Pointer; overload; cdecl;
    {class} function configurationWithPointSize(pointSize: CGFloat; weight: UIImageSymbolWeight; scale: UIImageSymbolScale): Pointer; overload; cdecl;
    {class} function configurationWithScale(scale: UIImageSymbolScale): Pointer; cdecl;
    {class} function configurationWithTextStyle(textStyle: UIFontTextStyle): Pointer; overload; cdecl;
    {class} function configurationWithTextStyle(textStyle: UIFontTextStyle; scale: UIImageSymbolScale): Pointer; overload; cdecl;
    {class} function configurationWithWeight(weight: UIImageSymbolWeight): Pointer; cdecl;
    {class} function unspecifiedConfiguration: UIImageSymbolConfiguration; cdecl;
  end;

  UIImageSymbolConfiguration = interface(UIImageConfiguration)
    ['{93DA8A41-4692-4FE5-951F-DD1577D89647}']
    function configurationWithoutPointSizeAndWeight: Pointer; cdecl;
    function configurationWithoutScale: Pointer; cdecl;
    function configurationWithoutTextStyle: Pointer; cdecl;
    function configurationWithoutWeight: Pointer; cdecl;
    function isEqualToConfiguration(otherConfiguration: UIImageSymbolConfiguration): Boolean; cdecl;
  end;
  TUIImageSymbolConfiguration = class(TOCGenericImport<UIImageSymbolConfigurationClass, UIImageSymbolConfiguration>) end;

  NSDataAssetClass = interface(NSObjectClass)
    ['{E4A73CDD-9CE3-4030-B85B-37F5AE86EF44}']
  end;

  NSDataAsset = interface(NSObject)
    ['{394BD18F-D5D2-4902-AF99-DB7478A20184}']
    function data: NSData; cdecl;
    function initWithName(name: NSDataAssetName; bundle: NSBundle): Pointer; overload; cdecl;
    function initWithName(name: NSDataAssetName): Pointer; overload; cdecl;
    function name: NSDataAssetName; cdecl;
    function typeIdentifier: NSString; cdecl;
  end;
  TNSDataAsset = class(TOCGenericImport<NSDataAssetClass, NSDataAsset>) end;

  UILocalNotificationClass = interface(NSObjectClass)
    ['{E46AE668-1AFD-4598-A276-05399C83932B}']
  end;

  UILocalNotification = interface(NSObject)
    ['{26A39B47-1706-4C1D-BC0D-53606D667BE3}']
    function alertAction: NSString; cdecl;
    function alertBody: NSString; cdecl;
    function alertLaunchImage: NSString; cdecl;
    function alertTitle: NSString; cdecl;
    function applicationIconBadgeNumber: NSInteger; cdecl;
    function category: NSString; cdecl;
    function fireDate: NSDate; cdecl;
    function hasAction: Boolean; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function region: CLRegion; cdecl;
    function regionTriggersOnce: Boolean; cdecl;
    function repeatCalendar: NSCalendar; cdecl;
    function repeatInterval: NSCalendarUnit; cdecl;
    procedure setAlertAction(alertAction: NSString); cdecl;
    procedure setAlertBody(alertBody: NSString); cdecl;
    procedure setAlertLaunchImage(alertLaunchImage: NSString); cdecl;
    procedure setAlertTitle(alertTitle: NSString); cdecl;
    procedure setApplicationIconBadgeNumber(applicationIconBadgeNumber: NSInteger); cdecl;
    procedure setCategory(category: NSString); cdecl;
    procedure setFireDate(fireDate: NSDate); cdecl;
    procedure setHasAction(hasAction: Boolean); cdecl;
    procedure setRegion(region: CLRegion); cdecl;
    procedure setRegionTriggersOnce(regionTriggersOnce: Boolean); cdecl;
    procedure setRepeatCalendar(repeatCalendar: NSCalendar); cdecl;
    procedure setRepeatInterval(repeatInterval: NSCalendarUnit); cdecl;
    procedure setSoundName(soundName: NSString); cdecl;
    procedure setTimeZone(timeZone: NSTimeZone); cdecl;
    procedure setUserInfo(userInfo: NSDictionary); cdecl;
    function soundName: NSString; cdecl;
    function timeZone: NSTimeZone; cdecl;
    function userInfo: NSDictionary; cdecl;
  end;
  TUILocalNotification = class(TOCGenericImport<UILocalNotificationClass, UILocalNotification>) end;

  NSTextTabClass = interface(NSObjectClass)
    ['{969B5F52-E1F0-48E2-B05C-2E3C1A556BC8}']
    {class} function columnTerminatorsForLocale(aLocale: NSLocale): NSCharacterSet; cdecl;
  end;

  NSTextTab = interface(NSObject)
    ['{9C90E44C-77DE-4C28-8805-E98595BE30C3}']
    function alignment: NSTextAlignment; cdecl;
    function initWithTextAlignment(alignment: NSTextAlignment; location: CGFloat; options: NSDictionary): Pointer; cdecl;
    function location: CGFloat; cdecl;
    function options: NSDictionary; cdecl;
  end;
  TNSTextTab = class(TOCGenericImport<NSTextTabClass, NSTextTab>) end;

  NSParagraphStyleClass = interface(NSObjectClass)
    ['{C78678A1-74EC-4662-B32A-FA574187AA99}']
    {class} function defaultParagraphStyle: NSParagraphStyle; cdecl;
    {class} function defaultWritingDirectionForLanguage(languageName: NSString): NSWritingDirection; cdecl;
  end;

  NSParagraphStyle = interface(NSObject)
    ['{257838AD-0213-4D5D-8236-4F6E73DB0ECB}']
    function alignment: NSTextAlignment; cdecl;
    function allowsDefaultTighteningForTruncation: Boolean; cdecl;
    function baseWritingDirection: NSWritingDirection; cdecl;
    function defaultTabInterval: CGFloat; cdecl;
    function firstLineHeadIndent: CGFloat; cdecl;
    function headIndent: CGFloat; cdecl;
    function hyphenationFactor: Single; cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    function lineBreakStrategy: NSLineBreakStrategy; cdecl;
    function lineHeightMultiple: CGFloat; cdecl;
    function lineSpacing: CGFloat; cdecl;
    function maximumLineHeight: CGFloat; cdecl;
    function minimumLineHeight: CGFloat; cdecl;
    function paragraphSpacing: CGFloat; cdecl;
    function paragraphSpacingBefore: CGFloat; cdecl;
    function tabStops: NSArray; cdecl;
    function tailIndent: CGFloat; cdecl;
    function textLists: NSArray; cdecl;
    function usesDefaultHyphenation: Boolean; cdecl;
  end;
  TNSParagraphStyle = class(TOCGenericImport<NSParagraphStyleClass, NSParagraphStyle>) end;

  NSMutableParagraphStyleClass = interface(NSParagraphStyleClass)
    ['{BE3A7BC8-0042-4052-AC9F-ECBC2488BAEA}']
  end;

  NSMutableParagraphStyle = interface(NSParagraphStyle)
    ['{A3D37AED-F54A-4D7F-9FDD-F5865B7AA77C}']
    procedure addTabStop(anObject: NSTextTab); cdecl;
    function alignment: NSTextAlignment; cdecl;
    function allowsDefaultTighteningForTruncation: Boolean; cdecl;
    function baseWritingDirection: NSWritingDirection; cdecl;
    function defaultTabInterval: CGFloat; cdecl;
    function firstLineHeadIndent: CGFloat; cdecl;
    function headIndent: CGFloat; cdecl;
    function hyphenationFactor: Single; cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    function lineBreakStrategy: NSLineBreakStrategy; cdecl;
    function lineHeightMultiple: CGFloat; cdecl;
    function lineSpacing: CGFloat; cdecl;
    function maximumLineHeight: CGFloat; cdecl;
    function minimumLineHeight: CGFloat; cdecl;
    function paragraphSpacing: CGFloat; cdecl;
    function paragraphSpacingBefore: CGFloat; cdecl;
    procedure removeTabStop(anObject: NSTextTab); cdecl;
    procedure setAlignment(alignment: NSTextAlignment); cdecl;
    procedure setAllowsDefaultTighteningForTruncation(allowsDefaultTighteningForTruncation: Boolean); cdecl;
    procedure setBaseWritingDirection(baseWritingDirection: NSWritingDirection); cdecl;
    procedure setDefaultTabInterval(defaultTabInterval: CGFloat); cdecl;
    procedure setFirstLineHeadIndent(firstLineHeadIndent: CGFloat); cdecl;
    procedure setHeadIndent(headIndent: CGFloat); cdecl;
    procedure setHyphenationFactor(hyphenationFactor: Single); cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    procedure setLineBreakStrategy(lineBreakStrategy: NSLineBreakStrategy); cdecl;
    procedure setLineHeightMultiple(lineHeightMultiple: CGFloat); cdecl;
    procedure setLineSpacing(lineSpacing: CGFloat); cdecl;
    procedure setMaximumLineHeight(maximumLineHeight: CGFloat); cdecl;
    procedure setMinimumLineHeight(minimumLineHeight: CGFloat); cdecl;
    procedure setParagraphSpacing(paragraphSpacing: CGFloat); cdecl;
    procedure setParagraphSpacingBefore(paragraphSpacingBefore: CGFloat); cdecl;
    procedure setParagraphStyle(obj: NSParagraphStyle); cdecl;
    procedure setTabStops(tabStops: NSArray); cdecl;
    procedure setTailIndent(tailIndent: CGFloat); cdecl;
    procedure setTextLists(textLists: NSArray); cdecl;
    procedure setUsesDefaultHyphenation(usesDefaultHyphenation: Boolean); cdecl;
    function tabStops: NSArray; cdecl;
    function tailIndent: CGFloat; cdecl;
    function textLists: NSArray; cdecl;
    function usesDefaultHyphenation: Boolean; cdecl;
  end;
  TNSMutableParagraphStyle = class(TOCGenericImport<NSMutableParagraphStyleClass, NSMutableParagraphStyle>) end;

  NSShadowClass = interface(NSObjectClass)
    ['{E941DAA7-0008-4769-B44A-5351DDFAD84D}']
  end;

  NSShadow = interface(NSObject)
    ['{C9B9273A-D1C3-4D10-A7D2-9750B3D16C6E}']
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    procedure setShadowBlurRadius(shadowBlurRadius: CGFloat); cdecl;
    procedure setShadowColor(shadowColor: Pointer); cdecl;
    procedure setShadowOffset(shadowOffset: CGSize); cdecl;
    function shadowBlurRadius: CGFloat; cdecl;
    function shadowColor: Pointer; cdecl;
    function shadowOffset: CGSize; cdecl;
  end;
  TNSShadow = class(TOCGenericImport<NSShadowClass, NSShadow>) end;

  NSStringDrawingContextClass = interface(NSObjectClass)
    ['{2E988384-FE88-47BE-B656-4C5083BDC673}']
  end;

  NSStringDrawingContext = interface(NSObject)
    ['{8BB5D639-48FF-4B7F-91AD-BC7AB5E87827}']
    function actualScaleFactor: CGFloat; cdecl;
    function actualTrackingAdjustment: CGFloat; cdecl; // API_DEPRECATED("", ios(6.0, 7.0))
    function minimumScaleFactor: CGFloat; cdecl;
    function minimumTrackingAdjustment: CGFloat; cdecl; // API_DEPRECATED("", ios(6.0, 7.0))
    procedure setMinimumScaleFactor(minimumScaleFactor: CGFloat); cdecl;
    procedure setMinimumTrackingAdjustment(minimumTrackingAdjustment: CGFloat); cdecl; // API_DEPRECATED("", ios(6.0, 7.0))
    function totalBounds: CGRect; cdecl;
  end;
  TNSStringDrawingContext = class(TOCGenericImport<NSStringDrawingContextClass, NSStringDrawingContext>) end;

  UIAccelerationClass = interface(NSObjectClass)
    ['{967F38BC-8688-402C-8FC6-BBC677F1514E}']
  end;

  UIAcceleration = interface(NSObject)
    ['{5B84FFEF-EA4F-4583-A798-1DC331DC37F2}']
    function timestamp: NSTimeInterval; cdecl;
    function x: UIAccelerationValue; cdecl;
    function y: UIAccelerationValue; cdecl;
    function z: UIAccelerationValue; cdecl;
  end;
  TUIAcceleration = class(TOCGenericImport<UIAccelerationClass, UIAcceleration>) end;

  UIAccelerometerClass = interface(NSObjectClass)
    ['{E49C1AFD-0AB1-425E-96B8-4CD27932DAD1}']
    {class} function sharedAccelerometer: UIAccelerometer; cdecl;
  end;

  UIAccelerometer = interface(NSObject)
    ['{5536D489-46A7-4622-8730-6D2A21683B54}']
    function delegate: Pointer; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setUpdateInterval(updateInterval: NSTimeInterval); cdecl;
    function updateInterval: NSTimeInterval; cdecl;
  end;
  TUIAccelerometer = class(TOCGenericImport<UIAccelerometerClass, UIAccelerometer>) end;

  UIAccelerometerDelegate = interface(IObjectiveC)
    ['{B103202C-3A35-4419-A6BB-8CBC3056D351}']
    procedure accelerometer(accelerometer: UIAccelerometer; didAccelerate: UIAcceleration); cdecl; // API_DEPRECATED("", ios(2.0, 5.0))
  end;

  UIMenuElementClass = interface(NSObjectClass)
    ['{6FB9B349-802C-4B96-82CC-233841DC5491}']
    {class} function new: Pointer; cdecl;
  end;

  UIMenuElement = interface(NSObject)
    ['{F7F752DB-D637-4957-A389-CF2DF0B1F317}']
    function image: UIImage; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    procedure setSubtitle(subtitle: NSString); cdecl;
    function subtitle: NSString; cdecl;
    function title: NSString; cdecl;
  end;
  TUIMenuElement = class(TOCGenericImport<UIMenuElementClass, UIMenuElement>) end;

  UIMenuDisplayPreferencesClass = interface(NSObjectClass)
    ['{F62D28EE-D7D7-4BEC-A76E-1A45BF9B7095}']
  end;

  UIMenuDisplayPreferences = interface(NSObject)
    ['{84CA3D2C-ED35-4F98-8444-5EB898722C91}']
    function maximumNumberOfTitleLines: NSInteger; cdecl;
    procedure setMaximumNumberOfTitleLines(maximumNumberOfTitleLines: NSInteger); cdecl;
  end;
  TUIMenuDisplayPreferences = class(TOCGenericImport<UIMenuDisplayPreferencesClass, UIMenuDisplayPreferences>) end;

  UIMenuClass = interface(UIMenuElementClass)
    ['{1EA7287A-9F81-4E85-8EB8-B2EAC44171AF}']
    {class} function menuWithChildren(children: NSArray): UIMenu; cdecl;
    {class} function menuWithTitle(title: NSString; image: UIImage; identifier: UIMenuIdentifier; options: UIMenuOptions;
      children: NSArray): UIMenu; overload; cdecl;
    {class} function menuWithTitle(title: NSString; children: NSArray): UIMenu; overload; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIMenu = interface(UIMenuElement)
    ['{BC3BFF2D-FEBC-4B56-BC98-567CC98309B1}']
    function children: NSArray; cdecl;
    function displayPreferences: UIMenuDisplayPreferences; cdecl;
    function identifier: UIMenuIdentifier; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function menuByReplacingChildren(newChildren: NSArray): UIMenu; cdecl;
    function options: UIMenuOptions; cdecl;
    function preferredElementSize: UIMenuElementSize; cdecl;
    function selectedElements: NSArray; cdecl;
    procedure setDisplayPreferences(displayPreferences: UIMenuDisplayPreferences); cdecl;
    procedure setPreferredElementSize(preferredElementSize: UIMenuElementSize); cdecl;
  end;
  TUIMenu = class(TOCGenericImport<UIMenuClass, UIMenu>) end;

  UIMenuLeaf = interface(IObjectiveC)
    ['{7D01FC60-3CCB-484E-8237-9B957EB21196}']
    function attributes: UIMenuElementAttributes; cdecl;
    function discoverabilityTitle: NSString; cdecl;
    function image: UIImage; cdecl;
    procedure performWithSender(sender: Pointer; target: Pointer); cdecl;
    function presentationSourceItem: Pointer; cdecl;
    function selectedImage: UIImage; cdecl;
    function sender: Pointer; cdecl;
    procedure setAttributes(attributes: UIMenuElementAttributes); cdecl;
    procedure setDiscoverabilityTitle(discoverabilityTitle: NSString); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setSelectedImage(selectedImage: UIImage); cdecl;
    procedure setState(state: UIMenuElementState); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function state: UIMenuElementState; cdecl;
    function title: NSString; cdecl;
  end;

  UICommandAlternateClass = interface(NSObjectClass)
    ['{E9A42ABE-0677-4F56-800C-4E39C7E03076}']
    {class} function alternateWithTitle(title: NSString; action: SEL; modifierFlags: UIKeyModifierFlags): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UICommandAlternate = interface(NSObject)
    ['{43C0CCC1-EC6B-4DD2-A8B1-828D6ECED1EC}']
    function action: SEL; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function modifierFlags: UIKeyModifierFlags; cdecl;
    function title: NSString; cdecl;
  end;
  TUICommandAlternate = class(TOCGenericImport<UICommandAlternateClass, UICommandAlternate>) end;

  UICommandClass = interface(UIMenuElementClass)
    ['{201B959C-052F-4D6B-9D4E-304170A6A8A0}']
    {class} function commandWithTitle(title: NSString; image: UIImage; action: SEL; propertyList: Pointer;
      alternates: NSArray): Pointer; overload; cdecl;
    {class} function commandWithTitle(title: NSString; image: UIImage; action: SEL; propertyList: Pointer): Pointer; overload; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UICommand = interface(UIMenuElement)
    ['{F19CF2AE-BC10-4362-979A-E12D883B79E6}']
    function action: SEL; cdecl;
    function alternates: NSArray; cdecl;
    function attributes: UIMenuElementAttributes; cdecl;
    function discoverabilityTitle: NSString; cdecl;
    function image: UIImage; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function propertyList: Pointer; cdecl;
    procedure setAttributes(attributes: UIMenuElementAttributes); cdecl;
    procedure setDiscoverabilityTitle(discoverabilityTitle: NSString); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setState(state: UIMenuElementState); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function state: UIMenuElementState; cdecl;
    function title: NSString; cdecl;
  end;
  TUICommand = class(TOCGenericImport<UICommandClass, UICommand>) end;

  UIEventClass = interface(NSObjectClass)
    ['{814C74CD-0CE2-45B0-AF49-A483E90DBB9F}']
  end;

  UIEvent = interface(NSObject)
    ['{EA028B04-A5A2-4777-9998-E04A833F65FF}']
    function &type: UIEventType; cdecl;
    function allTouches: NSSet; cdecl;
    function buttonMask: UIEventButtonMask; cdecl;
    function coalescedTouchesForTouch(touch: UITouch): NSArray; cdecl;
    function modifierFlags: UIKeyModifierFlags; cdecl;
    function predictedTouchesForTouch(touch: UITouch): NSArray; cdecl;
    function subtype: UIEventSubtype; cdecl;
    function timestamp: NSTimeInterval; cdecl;
    function touchesForGestureRecognizer(gesture: UIGestureRecognizer): NSSet; cdecl;
    function touchesForView(view: UIView): NSSet; cdecl;
    function touchesForWindow(window: UIWindow): NSSet; cdecl;
  end;
  TUIEvent = class(TOCGenericImport<UIEventClass, UIEvent>) end;

  UIKeyCommandClass = interface(UICommandClass)
    ['{D7AD35CB-FD69-48D0-8CB7-E970AB774715}']
    {class} function commandWithTitle(title: NSString; image: UIImage; action: SEL; propertyList: Pointer): Pointer; overload; cdecl;
    {class} function commandWithTitle(title: NSString; image: UIImage; action: SEL; propertyList: Pointer;
      alternates: NSArray): Pointer; overload; cdecl;
    {class} function commandWithTitle(title: NSString; image: UIImage; action: SEL; input: NSString; modifierFlags: UIKeyModifierFlags;
      propertyList: Pointer; alternates: NSArray): Pointer; overload; cdecl;
    {class} function commandWithTitle(title: NSString; image: UIImage; action: SEL; input: NSString; modifierFlags: UIKeyModifierFlags;
      propertyList: Pointer): Pointer; overload; cdecl;
    {class} function keyCommandWithInput(input: NSString; modifierFlags: UIKeyModifierFlags; action: SEL;
      discoverabilityTitle: NSString): Pointer; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("keyCommandWithInput:modifierFlags:action:", ios(9.0, 13.0))
    {class} function keyCommandWithInput(input: NSString; modifierFlags: UIKeyModifierFlags; action: SEL): Pointer; overload; cdecl;
  end;

  UIKeyCommand = interface(UICommand)
    ['{F7FE7E36-ECAD-474E-886A-E3B4799AAAF5}']
    function action: SEL; cdecl;
    function allowsAutomaticLocalization: Boolean; cdecl;
    function allowsAutomaticMirroring: Boolean; cdecl;
    function alternates: NSArray; cdecl;
    function attributes: UIMenuElementAttributes; cdecl;
    function discoverabilityTitle: NSString; cdecl;
    function image: UIImage; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function input: NSString; cdecl;
    function modifierFlags: UIKeyModifierFlags; cdecl;
    function propertyList: Pointer; cdecl;
    procedure setAllowsAutomaticLocalization(allowsAutomaticLocalization: Boolean); cdecl;
    procedure setAllowsAutomaticMirroring(allowsAutomaticMirroring: Boolean); cdecl;
    procedure setAttributes(attributes: UIMenuElementAttributes); cdecl;
    procedure setDiscoverabilityTitle(discoverabilityTitle: NSString); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setState(state: UIMenuElementState); cdecl;
    procedure setTitle(title: NSString); cdecl;
    procedure setWantsPriorityOverSystemBehavior(wantsPriorityOverSystemBehavior: Boolean); cdecl;
    function state: UIMenuElementState; cdecl;
    function title: NSString; cdecl;
    function wantsPriorityOverSystemBehavior: Boolean; cdecl;
  end;
  TUIKeyCommand = class(TOCGenericImport<UIKeyCommandClass, UIKeyCommand>) end;

  UIPasteConfigurationSupporting = interface(IObjectiveC)
    ['{8FDD6C42-ABFF-4B03-931C-374BBD8B22C9}']
    function canPasteItemProviders(itemProviders: NSArray): Boolean; cdecl;
    function pasteConfiguration: UIPasteConfiguration; cdecl;
    procedure pasteItemProviders(itemProviders: NSArray); cdecl;
    procedure setPasteConfiguration(pasteConfiguration: UIPasteConfiguration); cdecl;
  end;

  UIUserActivityRestoring = interface(IObjectiveC)
    ['{71D768AE-C735-4B0D-B516-033B47E8846A}']
    procedure restoreUserActivityState(userActivity: NSUserActivity); cdecl;
  end;

  UIResponderStandardEditActions = interface(IObjectiveC)
    ['{13D7A0C6-CC03-44E6-801F-1C47386D5330}']
    procedure copy(sender: Pointer); cdecl;
    procedure cut(sender: Pointer); cdecl;
    procedure decreaseSize(sender: Pointer); cdecl;
    procedure delete(sender: Pointer); cdecl;
    procedure duplicate(sender: Pointer); cdecl;
    procedure export(sender: Pointer); cdecl;
    procedure find(sender: Pointer); cdecl;
    procedure findAndReplace(sender: Pointer); cdecl;
    procedure findNext(sender: Pointer); cdecl;
    procedure findPrevious(sender: Pointer); cdecl;
    procedure increaseSize(sender: Pointer); cdecl;
    procedure makeTextWritingDirectionLeftToRight(sender: Pointer); cdecl;
    procedure makeTextWritingDirectionRightToLeft(sender: Pointer); cdecl;
    procedure move(sender: Pointer); cdecl;
    procedure paste(sender: Pointer); cdecl;
    procedure pasteAndGo(sender: Pointer); cdecl;
    procedure pasteAndMatchStyle(sender: Pointer); cdecl;
    procedure pasteAndSearch(sender: Pointer); cdecl;
    procedure print(sender: Pointer); cdecl;
    procedure rename(sender: Pointer); cdecl;
    procedure select(sender: Pointer); cdecl;
    procedure selectAll(sender: Pointer); cdecl;
    procedure toggleBoldface(sender: Pointer); cdecl;
    procedure toggleItalics(sender: Pointer); cdecl;
    procedure toggleUnderline(sender: Pointer); cdecl;
    procedure updateTextAttributesWithConversionHandler(conversionHandler: UITextAttributesConversionHandler); cdecl;
    procedure useSelectionForFind(sender: Pointer); cdecl;
  end;

  UIResponderClass = interface(NSObjectClass)
    ['{ECB314B3-3AE9-4624-8071-57A4B5B76DA1}']
    {class} procedure clearTextInputContextIdentifier(identifier: NSString); cdecl;
  end;

  UIResponder = interface(NSObject)
    ['{1FB82FDA-4846-404A-A684-258859104A3F}']
    function activityItemsConfiguration: Pointer; cdecl;
    function becomeFirstResponder: Boolean; cdecl;
    procedure buildMenuWithBuilder(builder: Pointer); cdecl;
    function canBecomeFirstResponder: Boolean; cdecl;
    function canPerformAction(action: SEL; withSender: Pointer): Boolean; cdecl;
    function canResignFirstResponder: Boolean; cdecl;
    procedure captureTextFromCamera(sender: Pointer); cdecl;
    function editingInteractionConfiguration: UIEditingInteractionConfiguration; cdecl;
    function inputAccessoryView: UIView; cdecl;
    function inputAccessoryViewController: UIInputViewController; cdecl;
    function inputAssistantItem: UITextInputAssistantItem; cdecl;
    function inputView: UIView; cdecl;
    function inputViewController: UIInputViewController; cdecl;
    function isFirstResponder: Boolean; cdecl;
    function keyCommands: NSArray; cdecl;
    procedure motionBegan(motion: UIEventSubtype; withEvent: UIEvent); cdecl;
    procedure motionCancelled(motion: UIEventSubtype; withEvent: UIEvent); cdecl;
    procedure motionEnded(motion: UIEventSubtype; withEvent: UIEvent); cdecl;
    function nextResponder: UIResponder; cdecl;
    procedure pressesBegan(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesCancelled(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesChanged(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesEnded(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure reloadInputViews; cdecl;
    procedure remoteControlReceivedWithEvent(event: UIEvent); cdecl;
    function resignFirstResponder: Boolean; cdecl;
    procedure restoreUserActivityState(activity: NSUserActivity); cdecl;
    procedure setActivityItemsConfiguration(activityItemsConfiguration: Pointer); cdecl;
    procedure setUserActivity(userActivity: NSUserActivity); cdecl;
    function targetForAction(action: SEL; withSender: Pointer): Pointer; cdecl;
    function textInputContextIdentifier: NSString; cdecl;
    function textInputMode: UITextInputMode; cdecl;
    procedure touchesBegan(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesCancelled(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesEnded(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesEstimatedPropertiesUpdated(touches: NSSet); cdecl;
    procedure touchesMoved(touches: NSSet; withEvent: UIEvent); cdecl;
    function undoManager: NSUndoManager; cdecl;
    procedure updateUserActivityState(activity: NSUserActivity); cdecl;
    function userActivity: NSUserActivity; cdecl;
    procedure validateCommand(command: UICommand); cdecl;
  end;
  TUIResponder = class(TOCGenericImport<UIResponderClass, UIResponder>) end;

  UIAppearanceContainer = interface(IObjectiveC)
    ['{67CE9DFA-2169-471D-802D-4B0E3815237B}']
  end;

  UIAppearance = interface(IObjectiveC)
    ['{1D55B26C-3910-4C9F-A115-DE8FAE8A4196}']
    {class} function appearance: Pointer; cdecl;
    {class} function appearanceForTraitCollection(trait: UITraitCollection): Pointer; overload; cdecl;
    {class} function appearanceForTraitCollection(trait: UITraitCollection; whenContainedIn: Pointer): Pointer; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("appearanceForTraitCollection:whenContainedInInstancesOfClasses:", ios(8.0, 9.0))
    {class} function appearanceForTraitCollection(trait: UITraitCollection; whenContainedInInstancesOfClasses: NSArray): Pointer; overload; cdecl;
    {class} function appearanceWhenContainedIn(ContainerClass: Pointer): Pointer; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("appearanceWhenContainedInInstancesOfClasses:", ios(5.0, 9.0))
    {class} function appearanceWhenContainedInInstancesOfClasses(containerTypes: NSArray): Pointer; cdecl;
  end;

  UIDynamicItem = interface(IObjectiveC)
    ['{AF73AC91-522A-481A-9912-A1838781B67D}']
    function bounds: CGRect; cdecl;
    function center: CGPoint; cdecl;
    function collisionBoundingPath: UIBezierPath; cdecl;
    function collisionBoundsType: UIDynamicItemCollisionBoundsType; cdecl;
    procedure setCenter(center: CGPoint); cdecl;
    procedure setTransform(transform: CGAffineTransform); cdecl;
    function transform: CGAffineTransform; cdecl;
  end;

  UIDynamicItemGroupClass = interface(NSObjectClass)
    ['{7001B82D-4EE5-405A-85DC-5E5BE590637B}']
  end;

  UIDynamicItemGroup = interface(NSObject)
    ['{1C1C1EFF-179F-43A6-B749-906A001AE867}']
    function initWithItems(items: NSArray): Pointer; cdecl;
    function items: NSArray; cdecl;
  end;
  TUIDynamicItemGroup = class(TOCGenericImport<UIDynamicItemGroupClass, UIDynamicItemGroup>) end;

  UIDynamicBehaviorClass = interface(NSObjectClass)
    ['{6902EDDC-66B9-4FCE-B1FC-64FD5FB5FABE}']
  end;

  UIDynamicBehavior = interface(NSObject)
    ['{82B0951E-B9BF-4C8A-9C50-9E93232C7574}']
    function action: TUIDynamicBehaviorBlockMethod1; cdecl;
    procedure addChildBehavior(behavior: UIDynamicBehavior); cdecl;
    function childBehaviors: NSArray; cdecl;
    function dynamicAnimator: UIDynamicAnimator; cdecl;
    procedure removeChildBehavior(behavior: UIDynamicBehavior); cdecl;
    procedure setAction(action: TUIDynamicBehaviorBlockMethod1); cdecl;
    procedure willMoveToAnimator(dynamicAnimator: UIDynamicAnimator); cdecl;
  end;
  TUIDynamicBehavior = class(TOCGenericImport<UIDynamicBehaviorClass, UIDynamicBehavior>) end;

  NSLayoutConstraintClass = interface(NSObjectClass)
    ['{4A29C957-847D-4797-A3AC-8E0FA295C9A2}']
    {class} procedure activateConstraints(constraints: NSArray); cdecl;
    {class} function constraintsWithVisualFormat(format: NSString; options: NSLayoutFormatOptions; metrics: NSDictionary;
      views: NSDictionary): NSArray; cdecl;
    [MethodName('constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:')]
    {class} function constraintWithItem(view1: Pointer; attribute: NSLayoutAttribute; relatedBy: NSLayoutRelation; toItem: Pointer;
      attr2: NSLayoutAttribute; multiplier: CGFloat; constant: CGFloat): Pointer; cdecl;
    {class} procedure deactivateConstraints(constraints: NSArray); cdecl;
  end;

  NSLayoutConstraint = interface(NSObject)
    ['{7C453A4A-9A0E-4935-99CA-B4797223503B}']
    function constant: CGFloat; cdecl;
    function firstAnchor: NSLayoutAnchor; cdecl;
    function firstAttribute: NSLayoutAttribute; cdecl;
    function firstItem: Pointer; cdecl;
    function identifier: NSString; cdecl;
    function isActive: Boolean; cdecl;
    function multiplier: CGFloat; cdecl;
    function priority: UILayoutPriority; cdecl;
    function relation: NSLayoutRelation; cdecl;
    function secondAnchor: NSLayoutAnchor; cdecl;
    function secondAttribute: NSLayoutAttribute; cdecl;
    function secondItem: Pointer; cdecl;
    procedure setActive(active: Boolean); cdecl;
    procedure setConstant(constant: CGFloat); cdecl;
    procedure setIdentifier(identifier: NSString); cdecl;
    procedure setPriority(priority: UILayoutPriority); cdecl;
    procedure setShouldBeArchived(shouldBeArchived: Boolean); cdecl;
    function shouldBeArchived: Boolean; cdecl;
  end;
  TNSLayoutConstraint = class(TOCGenericImport<NSLayoutConstraintClass, NSLayoutConstraint>) end;

  UILayoutSupport = interface(IObjectiveC)
    ['{994CDCEB-165A-42A1-A38F-DD87489360A0}']
    function bottomAnchor: NSLayoutYAxisAnchor; cdecl;
    function heightAnchor: NSLayoutDimension; cdecl;
    function length: CGFloat; cdecl;
    function topAnchor: NSLayoutYAxisAnchor; cdecl;
  end;

  UITraitDefinition = interface(IObjectiveC)
    ['{34AB37F0-5DDE-4C89-A789-7FB0A577AC8C}']
    {class} function affectsColorAppearance: Boolean; cdecl;
    {class} function identifier: NSString; cdecl;
    {class} function name: NSString; cdecl;
  end;

  UICGFloatTraitDefinition = interface(IObjectiveC)
    ['{79671876-2CE3-49CD-90BF-FED088889273}']
    {class} function defaultValue: CGFloat; cdecl;
  end;

  UINSIntegerTraitDefinition = interface(IObjectiveC)
    ['{86300024-764B-46A8-90F6-0CA017ADD731}']
    {class} function defaultValue: NSInteger; cdecl;
  end;

  UIObjectTraitDefinition = interface(IObjectiveC)
    ['{3D7DE3C3-8DA2-4511-AEED-B08EAF5A7F3C}']
    {class} function defaultValue: id; cdecl;
  end;

  UITraitUserInterfaceIdiomClass = interface(NSObjectClass)
    ['{82530DEF-22CB-4C72-8246-9ACE7CDA7335}']
  end;

  UITraitUserInterfaceIdiom = interface(NSObject)
    ['{9203F88C-1894-4100-A69B-9402D6BA8F5C}']
  end;
  TUITraitUserInterfaceIdiom = class(TOCGenericImport<UITraitUserInterfaceIdiomClass, UITraitUserInterfaceIdiom>) end;

  UITraitUserInterfaceStyleClass = interface(NSObjectClass)
    ['{FBC29D3F-A23C-450B-9094-0267F3A3F49C}']
  end;

  UITraitUserInterfaceStyle = interface(NSObject)
    ['{18F07C8C-E610-46E0-90B6-648B7D821CCA}']
  end;
  TUITraitUserInterfaceStyle = class(TOCGenericImport<UITraitUserInterfaceStyleClass, UITraitUserInterfaceStyle>) end;

  UITraitLayoutDirectionClass = interface(NSObjectClass)
    ['{122A9422-04EF-4F9A-B35F-47E72DFE6297}']
  end;

  UITraitLayoutDirection = interface(NSObject)
    ['{B8BD7CC5-2433-411F-B92A-FC7DAF62F112}']
  end;
  TUITraitLayoutDirection = class(TOCGenericImport<UITraitLayoutDirectionClass, UITraitLayoutDirection>) end;

  UITraitDisplayScaleClass = interface(NSObjectClass)
    ['{E2126721-0A02-4193-88B2-8BE116E8AACB}']
  end;

  UITraitDisplayScale = interface(NSObject)
    ['{D8AFC6F3-B8B8-4A0E-A26F-B52DBCCBF055}']
  end;
  TUITraitDisplayScale = class(TOCGenericImport<UITraitDisplayScaleClass, UITraitDisplayScale>) end;

  UITraitHorizontalSizeClassClass = interface(NSObjectClass)
    ['{6447B6C1-D267-446C-9D48-96860D2BBE69}']
  end;

  UITraitHorizontalSizeClass = interface(NSObject)
    ['{7A8F71F1-0266-4751-B782-FBC197A3F508}']
  end;
  TUITraitHorizontalSizeClass = class(TOCGenericImport<UITraitHorizontalSizeClassClass, UITraitHorizontalSizeClass>) end;

  UITraitVerticalSizeClassClass = interface(NSObjectClass)
    ['{32E07221-6FEC-4810-9065-AD10CE33860B}']
  end;

  UITraitVerticalSizeClass = interface(NSObject)
    ['{2C2A226F-186E-443C-9204-9E3653895ADC}']
  end;
  TUITraitVerticalSizeClass = class(TOCGenericImport<UITraitVerticalSizeClassClass, UITraitVerticalSizeClass>) end;

  UITraitForceTouchCapabilityClass = interface(NSObjectClass)
    ['{E86FEEE7-BA42-4674-8386-6AD72DAE9C0B}']
  end;

  UITraitForceTouchCapability = interface(NSObject)
    ['{9F5947A4-03A1-4D27-92C0-DF39A0F9F625}']
  end;
  TUITraitForceTouchCapability = class(TOCGenericImport<UITraitForceTouchCapabilityClass, UITraitForceTouchCapability>) end;

  UITraitPreferredContentSizeCategoryClass = interface(NSObjectClass)
    ['{A0C7CC18-94B3-4688-BC85-4F6024D40E0E}']
  end;

  UITraitPreferredContentSizeCategory = interface(NSObject)
    ['{4FB9A3BD-47B1-4027-B8C2-F87FFCFD4323}']
  end;
  TUITraitPreferredContentSizeCategory = class(TOCGenericImport<UITraitPreferredContentSizeCategoryClass, UITraitPreferredContentSizeCategory>) end;

  UITraitDisplayGamutClass = interface(NSObjectClass)
    ['{C1E68A7C-D4B3-4BD0-8955-860BE21FDBF3}']
  end;

  UITraitDisplayGamut = interface(NSObject)
    ['{1B11422C-9F97-4EA1-AD35-FE731D4FAC9A}']
  end;
  TUITraitDisplayGamut = class(TOCGenericImport<UITraitDisplayGamutClass, UITraitDisplayGamut>) end;

  UITraitAccessibilityContrastClass = interface(NSObjectClass)
    ['{1ABE0EF5-4376-433C-A2CF-76F89CC1E9A7}']
  end;

  UITraitAccessibilityContrast = interface(NSObject)
    ['{F2D54FFA-5283-4C52-ACE7-6D91A8AE75AF}']
  end;
  TUITraitAccessibilityContrast = class(TOCGenericImport<UITraitAccessibilityContrastClass, UITraitAccessibilityContrast>) end;

  UITraitUserInterfaceLevelClass = interface(NSObjectClass)
    ['{B2161AA9-1FA5-4637-8E98-4ACFF3CFA1B8}']
  end;

  UITraitUserInterfaceLevel = interface(NSObject)
    ['{D33C6017-35F2-482A-8200-382ADECB56E5}']
  end;
  TUITraitUserInterfaceLevel = class(TOCGenericImport<UITraitUserInterfaceLevelClass, UITraitUserInterfaceLevel>) end;

  UITraitLegibilityWeightClass = interface(NSObjectClass)
    ['{533867D8-238E-4669-B53A-81E786DD7D93}']
  end;

  UITraitLegibilityWeight = interface(NSObject)
    ['{34AB5399-4355-48B8-9BB2-A228544FA03C}']
  end;
  TUITraitLegibilityWeight = class(TOCGenericImport<UITraitLegibilityWeightClass, UITraitLegibilityWeight>) end;

  UITraitActiveAppearanceClass = interface(NSObjectClass)
    ['{57C19714-D277-4C89-AB36-3D99D2EB55D0}']
  end;

  UITraitActiveAppearance = interface(NSObject)
    ['{98EEBCC8-B5C3-4712-BE3B-517D4C679A87}']
  end;
  TUITraitActiveAppearance = class(TOCGenericImport<UITraitActiveAppearanceClass, UITraitActiveAppearance>) end;

  UITraitToolbarItemPresentationSizeClass = interface(NSObjectClass)
    ['{CF533413-2F97-40B0-844E-32CF0214AB88}']
  end;

  UITraitToolbarItemPresentationSize = interface(NSObject)
    ['{D22DD04D-B54F-45F1-946D-46CA35AD4DB8}']
  end;
  TUITraitToolbarItemPresentationSize = class(TOCGenericImport<UITraitToolbarItemPresentationSizeClass, UITraitToolbarItemPresentationSize>) end;

  UITraitImageDynamicRangeClass = interface(NSObjectClass)
    ['{0C5434CE-F8C7-41AC-AA43-69F529EF4AD3}']
  end;

  UITraitImageDynamicRange = interface(NSObject)
    ['{A36C8C57-8E4F-40E0-BA4E-E54C924F1D3A}']
  end;
  TUITraitImageDynamicRange = class(TOCGenericImport<UITraitImageDynamicRangeClass, UITraitImageDynamicRange>) end;

  UITraitTypesettingLanguageClass = interface(NSObjectClass)
    ['{94FDF95D-F23D-451C-9753-90609B9C0C73}']
  end;

  UITraitTypesettingLanguage = interface(NSObject)
    ['{B353375D-24B7-4A0A-BC0F-497068735A2B}']
  end;
  TUITraitTypesettingLanguage = class(TOCGenericImport<UITraitTypesettingLanguageClass, UITraitTypesettingLanguage>) end;

  UITraitSceneCaptureStateClass = interface(NSObjectClass)
    ['{D158081F-FB3B-4B39-A39E-2A30C8787647}']
  end;

  UITraitSceneCaptureState = interface(NSObject)
    ['{15F30451-AA53-4974-AA41-4F186C81A5E9}']
  end;
  TUITraitSceneCaptureState = class(TOCGenericImport<UITraitSceneCaptureStateClass, UITraitSceneCaptureState>) end;

  UIDeviceClass = interface(NSObjectClass)
    ['{005AFB49-4E51-4F5E-A8D5-E5B13FC5FA2A}']
    {class} function currentDevice: UIDevice; cdecl;
  end;

  UIDevice = interface(NSObject)
    ['{E4111E94-AB25-4125-A125-15AB09BB97E8}']
    function batteryLevel: Single; cdecl;
    function batteryState: UIDeviceBatteryState; cdecl;
    procedure beginGeneratingDeviceOrientationNotifications; cdecl;
    procedure endGeneratingDeviceOrientationNotifications; cdecl;
    function identifierForVendor: NSUUID; cdecl;
    function isBatteryMonitoringEnabled: Boolean; cdecl;
    function isGeneratingDeviceOrientationNotifications: Boolean; cdecl;
    function isMultitaskingSupported: Boolean; cdecl;
    function isProximityMonitoringEnabled: Boolean; cdecl;
    function localizedModel: NSString; cdecl;
    function model: NSString; cdecl;
    function name: NSString; cdecl;
    function orientation: UIDeviceOrientation; cdecl;
    procedure playInputClick; cdecl;
    function proximityState: Boolean; cdecl;
    procedure setBatteryMonitoringEnabled(batteryMonitoringEnabled: Boolean); cdecl;
    procedure setProximityMonitoringEnabled(proximityMonitoringEnabled: Boolean); cdecl;
    function systemName: NSString; cdecl;
    function systemVersion: NSString; cdecl;
    function userInterfaceIdiom: UIUserInterfaceIdiom; cdecl;
  end;
  TUIDevice = class(TOCGenericImport<UIDeviceClass, UIDevice>) end;

  UIInputViewAudioFeedback = interface(IObjectiveC)
    ['{3D001FFE-17C5-4322-8944-06483D77C147}']
    function enableInputClicksWhenVisible: Boolean; cdecl;
  end;

  UITouchClass = interface(NSObjectClass)
    ['{BD47897D-5B23-4199-8BB3-9E7BE8A85AE6}']
  end;

  UITouch = interface(NSObject)
    ['{86542540-167E-468F-AA7B-DC7E4C34AD1B}']
    function &type: UITouchType; cdecl;
    function altitudeAngle: CGFloat; cdecl;
    function azimuthAngleInView(view: UIView): CGFloat; cdecl;
    function azimuthUnitVectorInView(view: UIView): CGVector; cdecl;
    function estimatedProperties: UITouchProperties; cdecl;
    function estimatedPropertiesExpectingUpdates: UITouchProperties; cdecl;
    function estimationUpdateIndex: NSNumber; cdecl;
    function force: CGFloat; cdecl;
    function gestureRecognizers: NSArray; cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
    function majorRadius: CGFloat; cdecl;
    function majorRadiusTolerance: CGFloat; cdecl;
    function maximumPossibleForce: CGFloat; cdecl;
    function phase: UITouchPhase; cdecl;
    function preciseLocationInView(view: UIView): CGPoint; cdecl;
    function precisePreviousLocationInView(view: UIView): CGPoint; cdecl;
    function previousLocationInView(view: UIView): CGPoint; cdecl;
    function rollAngle: CGFloat; cdecl;
    function tapCount: NSUInteger; cdecl;
    function timestamp: NSTimeInterval; cdecl;
    function view: UIView; cdecl;
    function window: UIWindow; cdecl;
  end;
  TUITouch = class(TOCGenericImport<UITouchClass, UITouch>) end;

  UITraitCollectionClass = interface(NSObjectClass)
    ['{391284C8-4F86-4715-A14E-46A28447329E}']
    {class} function currentTraitCollection: UITraitCollection; cdecl;
    {class} procedure setCurrentTraitCollection(currentTraitCollection: UITraitCollection); cdecl;
    {class} function systemTraitsAffectingColorAppearance: NSArray; cdecl;
    {class} function systemTraitsAffectingImageLookup: NSArray; cdecl;
    {class} function traitCollectionWithAccessibilityContrast(accessibilityContrast: UIAccessibilityContrast): UITraitCollection; cdecl;
    {class} function traitCollectionWithActiveAppearance(userInterfaceActiveAppearance: UIUserInterfaceActiveAppearance): UITraitCollection; cdecl;
    {class} function traitCollectionWithCGFloatValue(value: CGFloat; forTrait: UICGFloatTrait): UITraitCollection; cdecl;
    {class} function traitCollectionWithDisplayGamut(displayGamut: UIDisplayGamut): UITraitCollection; cdecl;
    {class} function traitCollectionWithDisplayScale(scale: CGFloat): UITraitCollection; cdecl;
    {class} function traitCollectionWithForceTouchCapability(capability: UIForceTouchCapability): UITraitCollection; cdecl;
    {class} function traitCollectionWithHorizontalSizeClass(horizontalSizeClass: UIUserInterfaceSizeClass): UITraitCollection; cdecl;
    {class} function traitCollectionWithImageDynamicRange(imageDynamicRange: UIImageDynamicRange): UITraitCollection; cdecl;
    {class} function traitCollectionWithLayoutDirection(layoutDirection: UITraitEnvironmentLayoutDirection): UITraitCollection; cdecl;
    {class} function traitCollectionWithLegibilityWeight(legibilityWeight: UILegibilityWeight): UITraitCollection; cdecl;
    {class} function traitCollectionWithNSIntegerValue(value: NSInteger; forTrait: UINSIntegerTrait): UITraitCollection; cdecl;
    {class} function traitCollectionWithObject(&object: Pointer; forTrait: UIObjectTrait): UITraitCollection; cdecl;
    {class} function traitCollectionWithPreferredContentSizeCategory(preferredContentSizeCategory: UIContentSizeCategory): UITraitCollection; cdecl;
    {class} function traitCollectionWithSceneCaptureState(sceneCaptureState: UISceneCaptureState): UITraitCollection; cdecl;
    {class} function
      traitCollectionWithToolbarItemPresentationSize(toolbarItemPresentationSize: UINSToolbarItemPresentationSize): UITraitCollection; cdecl;
    {class} function traitCollectionWithTraits(mutations: UITraitMutations): UITraitCollection; cdecl;
    {class} function traitCollectionWithTraitsFromCollections(traitCollections: NSArray): UITraitCollection; cdecl; // API_DEPRECATED("Use +[UITraitCollection traitCollectionWithTraits:] and -[UITraitCollection traitCollectionByModifyingTraits:] to create and modify trait collections", ios(8.0, 17.0), visionos(1.0, 1.0))
    {class} function traitCollectionWithTypesettingLanguage(language: NSString): UITraitCollection; cdecl;
    {class} function traitCollectionWithUserInterfaceIdiom(idiom: UIUserInterfaceIdiom): UITraitCollection; cdecl;
    {class} function traitCollectionWithUserInterfaceLevel(userInterfaceLevel: UIUserInterfaceLevel): UITraitCollection; cdecl;
    {class} function traitCollectionWithUserInterfaceStyle(userInterfaceStyle: UIUserInterfaceStyle): UITraitCollection; cdecl;
    {class} function traitCollectionWithVerticalSizeClass(verticalSizeClass: UIUserInterfaceSizeClass): UITraitCollection; cdecl;
  end;

  UITraitCollection = interface(NSObject)
    ['{6C72BA15-8458-40EE-A7CE-5D6A0264CFE2}']
    function accessibilityContrast: UIAccessibilityContrast; cdecl;
    function activeAppearance: UIUserInterfaceActiveAppearance; cdecl;
    function changedTraitsFromTraitCollection(traitCollection: UITraitCollection): NSSet; cdecl;
    function containsTraitsInCollection(trait: UITraitCollection): Boolean; cdecl; // API_DEPRECATED("Compare values for specific traits in the trait collections instead", ios(8.0, 17.0), visionos(1.0, 1.0))
    function displayGamut: UIDisplayGamut; cdecl;
    function displayScale: CGFloat; cdecl;
    function forceTouchCapability: UIForceTouchCapability; cdecl;
    function hasDifferentColorAppearanceComparedToTraitCollection(traitCollection: UITraitCollection): Boolean; cdecl;
    function horizontalSizeClass: UIUserInterfaceSizeClass; cdecl;
    function imageConfiguration: UIImageConfiguration; cdecl;
    function imageDynamicRange: UIImageDynamicRange; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function layoutDirection: UITraitEnvironmentLayoutDirection; cdecl;
    function legibilityWeight: UILegibilityWeight; cdecl;
    function objectForTrait(trait: UIObjectTrait): id; cdecl;
    procedure performAsCurrentTraitCollection(actions: TUITraitCollectionBlockMethod1); cdecl;
    function preferredContentSizeCategory: UIContentSizeCategory; cdecl;
    function sceneCaptureState: UISceneCaptureState; cdecl;
    function toolbarItemPresentationSize: UINSToolbarItemPresentationSize; cdecl;
    function traitCollectionByModifyingTraits(mutations: UITraitMutations): UITraitCollection; cdecl;
    function traitCollectionByReplacingCGFloatValue(value: CGFloat; forTrait: UICGFloatTrait): UITraitCollection; cdecl;
    function traitCollectionByReplacingNSIntegerValue(value: NSInteger; forTrait: UINSIntegerTrait): UITraitCollection; cdecl;
    function traitCollectionByReplacingObject(&object: Pointer; forTrait: UIObjectTrait): UITraitCollection; cdecl;
    function typesettingLanguage: NSString; cdecl;
    function userInterfaceIdiom: UIUserInterfaceIdiom; cdecl;
    function userInterfaceLevel: UIUserInterfaceLevel; cdecl;
    function userInterfaceStyle: UIUserInterfaceStyle; cdecl;
    function valueForCGFloatTrait(trait: UICGFloatTrait): CGFloat; cdecl;
    function valueForNSIntegerTrait(trait: UINSIntegerTrait): NSInteger; cdecl;
    function verticalSizeClass: UIUserInterfaceSizeClass; cdecl;
  end;
  TUITraitCollection = class(TOCGenericImport<UITraitCollectionClass, UITraitCollection>) end;

  UIMutableTraits = interface(IObjectiveC)
    ['{E1C20AD6-8E9B-4483-A155-2485EFDD5683}']
    function accessibilityContrast: UIAccessibilityContrast; cdecl;
    function activeAppearance: UIUserInterfaceActiveAppearance; cdecl;
    function displayGamut: UIDisplayGamut; cdecl;
    function displayScale: CGFloat; cdecl;
    function forceTouchCapability: UIForceTouchCapability; cdecl;
    function horizontalSizeClass: UIUserInterfaceSizeClass; cdecl;
    function imageDynamicRange: UIImageDynamicRange; cdecl;
    function layoutDirection: UITraitEnvironmentLayoutDirection; cdecl;
    function legibilityWeight: UILegibilityWeight; cdecl;
    function objectForTrait(trait: UIObjectTrait): id; cdecl;
    function preferredContentSizeCategory: UIContentSizeCategory; cdecl;
    function sceneCaptureState: UISceneCaptureState; cdecl;
    procedure setAccessibilityContrast(accessibilityContrast: UIAccessibilityContrast); cdecl;
    procedure setActiveAppearance(activeAppearance: UIUserInterfaceActiveAppearance); cdecl;
    procedure setCGFloatValue(value: CGFloat; forTrait: UICGFloatTrait); cdecl;
    procedure setDisplayGamut(displayGamut: UIDisplayGamut); cdecl;
    procedure setDisplayScale(displayScale: CGFloat); cdecl;
    procedure setForceTouchCapability(forceTouchCapability: UIForceTouchCapability); cdecl;
    procedure setHorizontalSizeClass(horizontalSizeClass: UIUserInterfaceSizeClass); cdecl;
    procedure setImageDynamicRange(imageDynamicRange: UIImageDynamicRange); cdecl;
    procedure setLayoutDirection(layoutDirection: UITraitEnvironmentLayoutDirection); cdecl;
    procedure setLegibilityWeight(legibilityWeight: UILegibilityWeight); cdecl;
    procedure setNSIntegerValue(value: NSInteger; forTrait: UINSIntegerTrait); cdecl;
    procedure setObject(&object: Pointer; forTrait: UIObjectTrait); cdecl;
    procedure setPreferredContentSizeCategory(preferredContentSizeCategory: UIContentSizeCategory); cdecl;
    procedure setSceneCaptureState(sceneCaptureState: UISceneCaptureState); cdecl;
    procedure setToolbarItemPresentationSize(toolbarItemPresentationSize: UINSToolbarItemPresentationSize); cdecl;
    procedure setTypesettingLanguage(typesettingLanguage: NSString); cdecl;
    procedure setUserInterfaceIdiom(userInterfaceIdiom: UIUserInterfaceIdiom); cdecl;
    procedure setUserInterfaceLevel(userInterfaceLevel: UIUserInterfaceLevel); cdecl;
    procedure setUserInterfaceStyle(userInterfaceStyle: UIUserInterfaceStyle); cdecl;
    procedure setVerticalSizeClass(verticalSizeClass: UIUserInterfaceSizeClass); cdecl;
    function toolbarItemPresentationSize: UINSToolbarItemPresentationSize; cdecl;
    function typesettingLanguage: NSString; cdecl;
    function userInterfaceIdiom: UIUserInterfaceIdiom; cdecl;
    function userInterfaceLevel: UIUserInterfaceLevel; cdecl;
    function userInterfaceStyle: UIUserInterfaceStyle; cdecl;
    function valueForCGFloatTrait(trait: UICGFloatTrait): CGFloat; cdecl;
    function valueForNSIntegerTrait(trait: UINSIntegerTrait): NSInteger; cdecl;
    function verticalSizeClass: UIUserInterfaceSizeClass; cdecl;
  end;

  UITraitEnvironmentClass = interface(NSObjectClass)
    ['{52E664EE-1A01-486A-9A9B-9647BCDCA370}']
  end;

  UITraitEnvironment = interface(NSObject)
    ['{3E6DB638-EA4F-404E-8C1A-01542A327EF0}']
    function traitCollection: UITraitCollection; cdecl;
    procedure traitCollectionDidChange(previousTraitCollection: UITraitCollection); cdecl; // API_DEPRECATED("Use the trait change registration APIs declared in the UITraitChangeObservable protocol", ios(8.0, 17.0), visionos(1.0, 1.0))
  end;
  TUITraitEnvironment = class(TOCGenericImport<UITraitEnvironmentClass, UITraitEnvironment>) end;

  UITraitChangeRegistration = interface(IObjectiveC)
    ['{69CB9066-D76F-4E9C-A1CE-B61B2C46A742}']
  end;

  UITraitOverrides = interface(IObjectiveC)
    ['{B6C835A9-17C2-4E15-9BAA-4318BF5DA765}']
    function containsTrait(trait: UITrait): Boolean; cdecl;
    procedure removeTrait(trait: UITrait); cdecl;
  end;

  UITraitChangeObservable = interface(IObjectiveC)
    ['{9A0E46C2-45C8-42D3-9639-87E6A303D627}']
    function registerForTraitChanges(traits: NSArray; withAction: SEL): Pointer; overload; cdecl;
    function registerForTraitChanges(traits: NSArray; withTarget: Pointer; action: SEL): Pointer; overload; cdecl;
    function registerForTraitChanges(traits: NSArray; withHandler: UITraitChangeHandler): Pointer; overload; cdecl;
    procedure unregisterForTraitChanges(registration: Pointer); cdecl;
  end;

  UILayoutGuideClass = interface(NSObjectClass)
    ['{BA0B2E9C-0222-4CB9-8C60-E59F80C1B4F0}']
  end;

  UILayoutGuide = interface(NSObject)
    ['{A21B1301-B061-41C6-860E-CEC46E56F286}']
    function bottomAnchor: NSLayoutYAxisAnchor; cdecl;
    function centerXAnchor: NSLayoutXAxisAnchor; cdecl;
    function centerYAnchor: NSLayoutYAxisAnchor; cdecl;
    function constraintsAffectingLayoutForAxis(axis: UILayoutConstraintAxis): NSArray; cdecl;
    function hasAmbiguousLayout: Boolean; cdecl;
    function heightAnchor: NSLayoutDimension; cdecl;
    function identifier: NSString; cdecl;
    function layoutFrame: CGRect; cdecl;
    function leadingAnchor: NSLayoutXAxisAnchor; cdecl;
    function leftAnchor: NSLayoutXAxisAnchor; cdecl;
    function owningView: UIView; cdecl;
    function rightAnchor: NSLayoutXAxisAnchor; cdecl;
    procedure setIdentifier(identifier: NSString); cdecl;
    procedure setOwningView(owningView: UIView); cdecl;
    function topAnchor: NSLayoutYAxisAnchor; cdecl;
    function trailingAnchor: NSLayoutXAxisAnchor; cdecl;
    function widthAnchor: NSLayoutDimension; cdecl;
  end;
  TUILayoutGuide = class(TOCGenericImport<UILayoutGuideClass, UILayoutGuide>) end;

  UIFocusGuideClass = interface(UILayoutGuideClass)
    ['{11112E9E-AB59-4C62-81D8-ABB9B10AE4E4}']
  end;

  UIFocusGuide = interface(UILayoutGuide)
    ['{350132EF-D6F3-423D-ACF2-4805C53A32DC}']
    function isEnabled: Boolean; cdecl;
    function preferredFocusedView: UIView; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("preferredFocusEnvironments", ios(9.0, 10.0))
    function preferredFocusEnvironments: NSArray; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    procedure setPreferredFocusedView(preferredFocusedView: UIView); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("preferredFocusEnvironments", ios(9.0, 10.0))
    procedure setPreferredFocusEnvironments(preferredFocusEnvironments: NSArray); cdecl;
  end;
  TUIFocusGuide = class(TOCGenericImport<UIFocusGuideClass, UIFocusGuide>) end;

  UIFocusAnimationContext = interface(IObjectiveC)
    ['{A9E16157-C98D-4BC2-AD8B-5935EDB6650A}']
    function duration: NSTimeInterval; cdecl;
  end;

  UIFocusAnimationCoordinatorClass = interface(NSObjectClass)
    ['{F166CE78-84B6-44A5-A911-65675B462A1B}']
  end;

  UIFocusAnimationCoordinator = interface(NSObject)
    ['{BB843325-276E-4387-99D3-1F7E5FE6D410}']
    procedure addCoordinatedAnimations(animations: TUIFocusAnimationCoordinatorBlockMethod1;
      completion: TUIFocusAnimationCoordinatorBlockMethod1); cdecl;
    procedure addCoordinatedFocusingAnimations(animations: TUIFocusAnimationCoordinatorBlockMethod2;
      completion: TUIFocusAnimationCoordinatorBlockMethod1); cdecl;
    procedure addCoordinatedUnfocusingAnimations(animations: TUIFocusAnimationCoordinatorBlockMethod2;
      completion: TUIFocusAnimationCoordinatorBlockMethod1); cdecl;
  end;
  TUIFocusAnimationCoordinator = class(TOCGenericImport<UIFocusAnimationCoordinatorClass, UIFocusAnimationCoordinator>) end;

  UIFocusEnvironment = interface(IObjectiveC)
    ['{5020C46B-0326-4670-B0CA-2B87EF171385}']
    procedure didUpdateFocusInContext(context: UIFocusUpdateContext; withAnimationCoordinator: UIFocusAnimationCoordinator); cdecl;
    function focusGroupIdentifier: NSString; cdecl;
    function focusItemContainer: Pointer; cdecl;
    function parentFocusEnvironment: Pointer; cdecl;
    function preferredFocusedView: UIView; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("preferredFocusEnvironments", ios(9.0, 10.0))
    function preferredFocusEnvironments: NSArray; cdecl;
    procedure setNeedsFocusUpdate; cdecl;
    function shouldUpdateFocusInContext(context: UIFocusUpdateContext): Boolean; cdecl;
    function soundIdentifierForFocusUpdateInContext(context: UIFocusUpdateContext): UIFocusSoundIdentifier; cdecl;
    procedure updateFocusIfNeeded; cdecl;
  end;

  UIFocusItem = interface(IObjectiveC)
    ['{19529052-D544-4033-A590-AE09373D13BC}']
    function canBecomeFocused: Boolean; cdecl;
    procedure didHintFocusMovement(hint: UIFocusMovementHint); cdecl;
    function focusEffect: UIFocusEffect; cdecl;
    function focusGroupPriority: UIFocusGroupPriority; cdecl;
    function frame: CGRect; cdecl;
    function isTransparentFocusItem: Boolean; cdecl;
  end;

  UIFocusItemContainer = interface(IObjectiveC)
    ['{6F514ED2-56E0-4978-ABE4-6FC568FDD6EA}']
    function coordinateSpace: Pointer; cdecl;
    function focusItemsInRect(rect: CGRect): NSArray; cdecl;
  end;

  UIFocusItemScrollableContainer = interface(IObjectiveC)
    ['{7106887A-492E-49F6-BB76-43C2041554F1}']
    function contentOffset: CGPoint; cdecl;
    function contentSize: CGSize; cdecl;
    procedure setContentOffset(contentOffset: CGPoint); cdecl;
    function visibleSize: CGSize; cdecl;
  end;

  UIFocusUpdateContextClass = interface(NSObjectClass)
    ['{E7A0436F-F5E8-4E86-906C-6A05B1D3135C}']
  end;

  UIFocusUpdateContext = interface(NSObject)
    ['{5F384D4E-085A-4582-A937-DE84F77A6580}']
    function focusHeading: UIFocusHeading; cdecl;
    function nextFocusedItem: Pointer; cdecl;
    function nextFocusedView: UIView; cdecl;
    function previouslyFocusedItem: Pointer; cdecl;
    function previouslyFocusedView: UIView; cdecl;
  end;
  TUIFocusUpdateContext = class(TOCGenericImport<UIFocusUpdateContextClass, UIFocusUpdateContext>) end;

  UICoordinateSpace = interface(IObjectiveC)
    ['{D92F0D18-4FE8-4727-905F-B8230808E5F6}']
    function bounds: CGRect; cdecl;
    function convertPoint(point: CGPoint; toCoordinateSpace: Pointer): CGPoint; cdecl;
    [MethodName('convertPoint:fromCoordinateSpace:')]
    function convertPointFromCoordinateSpace(point: CGPoint; fromCoordinateSpace: Pointer): CGPoint; cdecl;
    function convertRect(rect: CGRect; toCoordinateSpace: Pointer): CGRect; cdecl;
    [MethodName('convertRect:fromCoordinateSpace:')]
    function convertRectFromCoordinateSpace(rect: CGRect; fromCoordinateSpace: Pointer): CGRect; cdecl;
  end;

  UIViewClass = interface(UIResponderClass)
    ['{B4D98047-8450-4B2F-A71F-44BFCA282D6A}']
    {class} procedure addKeyframeWithRelativeStartTime(frameStartTime: Double; relativeDuration: Double; animations: TUIViewBlockMethod1); cdecl;
    {class} procedure animateKeyframesWithDuration(duration: NSTimeInterval; delay: NSTimeInterval; options: UIViewKeyframeAnimationOptions;
      animations: TUIViewBlockMethod1; completion: TUIViewBlockMethod2); cdecl;
    {class} procedure animateWithDuration(duration: NSTimeInterval; delay: NSTimeInterval; options: UIViewAnimationOptions;
      animations: TUIViewBlockMethod1; completion: TUIViewBlockMethod2); overload; cdecl;
    {class} procedure animateWithDuration(duration: NSTimeInterval; animations: TUIViewBlockMethod1;
      completion: TUIViewBlockMethod2); overload; cdecl;
    {class} procedure animateWithDuration(duration: NSTimeInterval; delay: NSTimeInterval; usingSpringWithDamping: CGFloat;
      initialSpringVelocity: CGFloat; options: UIViewAnimationOptions; animations: TUIViewBlockMethod1; completion: TUIViewBlockMethod2); overload; cdecl;
    {class} procedure animateWithDuration(duration: NSTimeInterval; animations: TUIViewBlockMethod1); overload; cdecl;
    {class} procedure animateWithSpringDuration(duration: NSTimeInterval; bounce: CGFloat; initialSpringVelocity: CGFloat; delay: NSTimeInterval;
      options: UIViewAnimationOptions; animations: TUIViewBlockMethod1; completion: TUIViewBlockMethod2); cdecl;
    {class} function areAnimationsEnabled: Boolean; cdecl;
    {class} procedure beginAnimations(animationID: NSString; context: Pointer); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure commitAnimations; cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} function inheritedAnimationDuration: NSTimeInterval; cdecl;
    {class} function layerClass: Pointer; cdecl;
    {class} procedure modifyAnimationsWithRepeatCount(count: CGFloat; autoreverses: Boolean; animations: TUIViewBlockMethod1); cdecl;
    {class} procedure performSystemAnimation(animation: UISystemAnimation; onViews: NSArray; options: UIViewAnimationOptions;
      animations: TUIViewBlockMethod1; completion: TUIViewBlockMethod2); cdecl;
    {class} procedure performWithoutAnimation(actionsWithoutAnimation: TUIViewBlockMethod1); cdecl;
    {class} function requiresConstraintBasedLayout: Boolean; cdecl;
    {class} procedure setAnimationBeginsFromCurrentState(fromCurrentState: Boolean); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure setAnimationCurve(curve: UIViewAnimationCurve); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure setAnimationDelay(delay: NSTimeInterval); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure setAnimationDelegate(delegate: Pointer); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure setAnimationDidStopSelector(selector: SEL); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure setAnimationDuration(duration: NSTimeInterval); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure setAnimationRepeatAutoreverses(repeatAutoreverses: Boolean); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure setAnimationRepeatCount(repeatCount: Single); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure setAnimationsEnabled(enabled: Boolean); cdecl;
    {class} procedure setAnimationStartDate(startDate: NSDate); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure setAnimationTransition(transition: UIViewAnimationTransition; forView: UIView; cache: Boolean); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure setAnimationWillStartSelector(selector: SEL); cdecl; // API_DEPRECATED("Use the block-based animation API instead", ios(2.0, 13.0))
    {class} procedure transitionFromView(fromView: UIView; toView: UIView; duration: NSTimeInterval; options: UIViewAnimationOptions;
      completion: TUIViewBlockMethod2); cdecl;
    {class} procedure transitionWithView(view: UIView; duration: NSTimeInterval; options: UIViewAnimationOptions; animations: TUIViewBlockMethod1;
      completion: TUIViewBlockMethod2); cdecl;
    {class} function userInterfaceLayoutDirectionForSemanticContentAttribute(semanticContentAttribute: UISemanticContentAttribute;
      relativeToLayoutDirection: UIUserInterfaceLayoutDirection): UIUserInterfaceLayoutDirection; overload; cdecl;
    {class} function
      userInterfaceLayoutDirectionForSemanticContentAttribute(attribute: UISemanticContentAttribute): UIUserInterfaceLayoutDirection; overload; cdecl;
  end;

  UIView = interface(UIResponder)
    ['{7582725D-8C1F-4843-8597-C34DAB069E29}']
    function accessibilityIgnoresInvertColors: Boolean; cdecl;
    procedure addConstraint(constraint: NSLayoutConstraint); cdecl;
    procedure addConstraints(constraints: NSArray); cdecl;
    procedure addGestureRecognizer(gestureRecognizer: UIGestureRecognizer); cdecl;
    procedure addInteraction(interaction: Pointer); cdecl;
    procedure addLayoutGuide(layoutGuide: UILayoutGuide); cdecl;
    procedure addMotionEffect(effect: UIMotionEffect); cdecl;
    procedure addSubview(view: UIView); cdecl;
    function alignmentRectForFrame(frame: CGRect): CGRect; cdecl;
    function alignmentRectInsets: UIEdgeInsets; cdecl;
    function alpha: CGFloat; cdecl;
    function anchorPoint: CGPoint; cdecl;
    function appliedContentSizeCategoryLimitsDescription: NSString; cdecl;
    function autoresizesSubviews: Boolean; cdecl;
    function autoresizingMask: UIViewAutoresizing; cdecl;
    function backgroundColor: UIColor; cdecl;
    function bottomAnchor: NSLayoutYAxisAnchor; cdecl;
    function bounds: CGRect; cdecl;
    procedure bringSubviewToFront(view: UIView); cdecl;
    function canBecomeFocused: Boolean; cdecl;
    function center: CGPoint; cdecl;
    function centerXAnchor: NSLayoutXAxisAnchor; cdecl;
    function centerYAnchor: NSLayoutYAxisAnchor; cdecl;
    function clearsContextBeforeDrawing: Boolean; cdecl;
    function clipsToBounds: Boolean; cdecl;
    function constraints: NSArray; cdecl;
    function constraintsAffectingLayoutForAxis(axis: UILayoutConstraintAxis): NSArray; cdecl;
    function contentCompressionResistancePriorityForAxis(axis: UILayoutConstraintAxis): UILayoutPriority; cdecl;
    function contentHuggingPriorityForAxis(axis: UILayoutConstraintAxis): UILayoutPriority; cdecl;
    function contentMode: UIViewContentMode; cdecl;
    function contentScaleFactor: CGFloat; cdecl;
    function contentStretch: CGRect; cdecl; // API_DEPRECATED("", ios(3.0, 6.0))
    function convertPoint(point: CGPoint; toView: UIView): CGPoint; cdecl;
    [MethodName('convertPoint:fromView:')]
    function convertPointFromView(point: CGPoint; fromView: UIView): CGPoint; cdecl;
    function convertRect(rect: CGRect; toView: UIView): CGRect; cdecl;
    [MethodName('convertRect:fromView:')]
    function convertRectFromView(rect: CGRect; fromView: UIView): CGRect; cdecl;
    procedure decodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    procedure didAddSubview(subview: UIView); cdecl;
    procedure didMoveToSuperview; cdecl;
    procedure didMoveToWindow; cdecl;
    function directionalLayoutMargins: NSDirectionalEdgeInsets; cdecl;
    procedure drawRect(rect: CGRect; forViewPrintFormatter: UIViewPrintFormatter); overload; cdecl;
    procedure drawRect(rect: CGRect); overload; cdecl;
    function drawViewHierarchyInRect(rect: CGRect; afterScreenUpdates: Boolean): Boolean; cdecl;
    function effectiveUserInterfaceLayoutDirection: UIUserInterfaceLayoutDirection; cdecl;
    procedure encodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    function endEditing(force: Boolean): Boolean; cdecl;
    procedure exchangeSubviewAtIndex(index1: NSInteger; withSubviewAtIndex: NSInteger); cdecl;
    procedure exerciseAmbiguityInLayout; cdecl;
    function firstBaselineAnchor: NSLayoutYAxisAnchor; cdecl;
    function focusEffect: UIFocusEffect; cdecl;
    function focusGroupIdentifier: NSString; cdecl;
    function focusGroupPriority: UIFocusGroupPriority; cdecl;
    function frame: CGRect; cdecl;
    function frameForAlignmentRect(alignmentRect: CGRect): CGRect; cdecl;
    function gestureRecognizers: NSArray; cdecl;
    function gestureRecognizerShouldBegin(gestureRecognizer: UIGestureRecognizer): Boolean; cdecl;
    function hasAmbiguousLayout: Boolean; cdecl;
    function heightAnchor: NSLayoutDimension; cdecl;
    function hitTest(point: CGPoint; withEvent: UIEvent): UIView; cdecl;
    function hoverStyle: UIHoverStyle; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    procedure insertSubview(view: UIView; atIndex: NSInteger); overload; cdecl;
    procedure insertSubview(view: UIView; belowSubview: UIView); overload; cdecl;
    [MethodName('insertSubview:aboveSubview:')]
    procedure insertSubviewAboveSubview(view: UIView; aboveSubview: UIView); cdecl;
    function insetsLayoutMarginsFromSafeArea: Boolean; cdecl;
    function interactions: NSArray; cdecl;
    function intrinsicContentSize: CGSize; cdecl;
    procedure invalidateIntrinsicContentSize; cdecl;
    function isDescendantOfView(view: UIView): Boolean; cdecl;
    function isExclusiveTouch: Boolean; cdecl;
    function isFocused: Boolean; cdecl;
    function isHidden: Boolean; cdecl;
    function isMultipleTouchEnabled: Boolean; cdecl;
    function isOpaque: Boolean; cdecl;
    function isUserInteractionEnabled: Boolean; cdecl;
    function keyboardLayoutGuide: UIKeyboardLayoutGuide; cdecl;
    function lastBaselineAnchor: NSLayoutYAxisAnchor; cdecl;
    function layer: CALayer; cdecl;
    function layoutGuides: NSArray; cdecl;
    procedure layoutIfNeeded; cdecl;
    function layoutMargins: UIEdgeInsets; cdecl;
    procedure layoutMarginsDidChange; cdecl;
    function layoutMarginsGuide: UILayoutGuide; cdecl;
    procedure layoutSubviews; cdecl;
    function leadingAnchor: NSLayoutXAxisAnchor; cdecl;
    function leftAnchor: NSLayoutXAxisAnchor; cdecl;
    function maskView: UIView; cdecl;
    function maximumContentSizeCategory: UIContentSizeCategory; cdecl;
    function minimumContentSizeCategory: UIContentSizeCategory; cdecl;
    function motionEffects: NSArray; cdecl;
    function needsUpdateConstraints: Boolean; cdecl;
    function overrideUserInterfaceStyle: UIUserInterfaceStyle; cdecl;
    function pointInside(point: CGPoint; withEvent: UIEvent): Boolean; cdecl;
    function preservesSuperviewLayoutMargins: Boolean; cdecl;
    function readableContentGuide: UILayoutGuide; cdecl;
    procedure removeConstraint(constraint: NSLayoutConstraint); cdecl;
    procedure removeConstraints(constraints: NSArray); cdecl;
    procedure removeFromSuperview; cdecl;
    procedure removeGestureRecognizer(gestureRecognizer: UIGestureRecognizer); cdecl;
    procedure removeInteraction(interaction: Pointer); cdecl;
    procedure removeLayoutGuide(layoutGuide: UILayoutGuide); cdecl;
    procedure removeMotionEffect(effect: UIMotionEffect); cdecl;
    function resizableSnapshotViewFromRect(rect: CGRect; afterScreenUpdates: Boolean; withCapInsets: UIEdgeInsets): UIView; cdecl;
    function restorationIdentifier: NSString; cdecl;
    function rightAnchor: NSLayoutXAxisAnchor; cdecl;
    function safeAreaInsets: UIEdgeInsets; cdecl;
    procedure safeAreaInsetsDidChange; cdecl;
    function safeAreaLayoutGuide: UILayoutGuide; cdecl;
    function semanticContentAttribute: UISemanticContentAttribute; cdecl;
    procedure sendSubviewToBack(view: UIView); cdecl;
    procedure setAccessibilityIgnoresInvertColors(accessibilityIgnoresInvertColors: Boolean); cdecl;
    procedure setAlpha(alpha: CGFloat); cdecl;
    procedure setAnchorPoint(anchorPoint: CGPoint); cdecl;
    procedure setAutoresizesSubviews(autoresizesSubviews: Boolean); cdecl;
    procedure setAutoresizingMask(autoresizingMask: UIViewAutoresizing); cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    procedure setBounds(bounds: CGRect); cdecl;
    procedure setCenter(center: CGPoint); cdecl;
    procedure setClearsContextBeforeDrawing(clearsContextBeforeDrawing: Boolean); cdecl;
    procedure setClipsToBounds(clipsToBounds: Boolean); cdecl;
    procedure setContentCompressionResistancePriority(priority: UILayoutPriority; forAxis: UILayoutConstraintAxis); cdecl;
    procedure setContentHuggingPriority(priority: UILayoutPriority; forAxis: UILayoutConstraintAxis); cdecl;
    procedure setContentMode(contentMode: UIViewContentMode); cdecl;
    procedure setContentScaleFactor(contentScaleFactor: CGFloat); cdecl;
    procedure setContentStretch(contentStretch: CGRect); cdecl; // API_DEPRECATED("", ios(3.0, 6.0))
    procedure setDirectionalLayoutMargins(directionalLayoutMargins: NSDirectionalEdgeInsets); cdecl;
    procedure setExclusiveTouch(exclusiveTouch: Boolean); cdecl;
    procedure setFocusEffect(focusEffect: UIFocusEffect); cdecl;
    procedure setFocusGroupIdentifier(focusGroupIdentifier: NSString); cdecl;
    procedure setFocusGroupPriority(focusGroupPriority: UIFocusGroupPriority); cdecl;
    procedure setFrame(frame: CGRect); cdecl;
    procedure setGestureRecognizers(gestureRecognizers: NSArray); cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    procedure setHoverStyle(hoverStyle: UIHoverStyle); cdecl;
    procedure setInsetsLayoutMarginsFromSafeArea(insetsLayoutMarginsFromSafeArea: Boolean); cdecl;
    procedure setInteractions(interactions: NSArray); cdecl;
    procedure setLayoutMargins(layoutMargins: UIEdgeInsets); cdecl;
    procedure setMaskView(maskView: UIView); cdecl;
    procedure setMaximumContentSizeCategory(maximumContentSizeCategory: UIContentSizeCategory); cdecl;
    procedure setMinimumContentSizeCategory(minimumContentSizeCategory: UIContentSizeCategory); cdecl;
    procedure setMotionEffects(motionEffects: NSArray); cdecl;
    procedure setMultipleTouchEnabled(multipleTouchEnabled: Boolean); cdecl;
    procedure setNeedsDisplay; cdecl;
    procedure setNeedsDisplayInRect(rect: CGRect); cdecl;
    procedure setNeedsLayout; cdecl;
    procedure setNeedsUpdateConstraints; cdecl;
    procedure setOpaque(opaque: Boolean); cdecl;
    procedure setOverrideUserInterfaceStyle(overrideUserInterfaceStyle: UIUserInterfaceStyle); cdecl;
    procedure setPreservesSuperviewLayoutMargins(preservesSuperviewLayoutMargins: Boolean); cdecl;
    procedure setRestorationIdentifier(restorationIdentifier: NSString); cdecl;
    procedure setSemanticContentAttribute(semanticContentAttribute: UISemanticContentAttribute); cdecl;
    procedure setTag(tag: NSInteger); cdecl;
    procedure setTintAdjustmentMode(tintAdjustmentMode: UIViewTintAdjustmentMode); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    procedure setTransform(transform: CGAffineTransform); cdecl;
    procedure setTransform3D(transform3D: CATransform3D); cdecl;
    procedure setTranslatesAutoresizingMaskIntoConstraints(translatesAutoresizingMaskIntoConstraints: Boolean); cdecl;
    procedure setUserInteractionEnabled(userInteractionEnabled: Boolean); cdecl;
    function sizeThatFits(size: CGSize): CGSize; cdecl;
    procedure sizeToFit; cdecl;
    function snapshotViewAfterScreenUpdates(afterUpdates: Boolean): UIView; cdecl;
    function subviews: NSArray; cdecl;
    function superview: UIView; cdecl;
    function systemLayoutSizeFittingSize(targetSize: CGSize): CGSize; overload; cdecl;
    function systemLayoutSizeFittingSize(targetSize: CGSize; withHorizontalFittingPriority: UILayoutPriority;
      verticalFittingPriority: UILayoutPriority): CGSize; overload; cdecl;
    function tag: NSInteger; cdecl;
    function tintAdjustmentMode: UIViewTintAdjustmentMode; cdecl;
    function tintColor: UIColor; cdecl;
    procedure tintColorDidChange; cdecl;
    function topAnchor: NSLayoutYAxisAnchor; cdecl;
    function trailingAnchor: NSLayoutXAxisAnchor; cdecl;
    function traitOverrides: Pointer; cdecl;
    function transform: CGAffineTransform; cdecl;
    function transform3D: CATransform3D; cdecl;
    function translatesAutoresizingMaskIntoConstraints: Boolean; cdecl;
    procedure updateConstraints; cdecl;
    procedure updateConstraintsIfNeeded; cdecl;
    procedure updateTraitsIfNeeded; cdecl;
    function viewForBaselineLayout: UIView; cdecl; // API_DEPRECATED("Override -viewForFirstBaselineLayout or -viewForLastBaselineLayout as appropriate, instead", ios(6.0, 9.0))
    function viewForFirstBaselineLayout: UIView; cdecl;
    function viewForLastBaselineLayout: UIView; cdecl;
    function viewPrintFormatter: UIViewPrintFormatter; cdecl;
    function viewWithTag(tag: NSInteger): UIView; cdecl;
    function widthAnchor: NSLayoutDimension; cdecl;
    procedure willMoveToSuperview(newSuperview: UIView); cdecl;
    procedure willMoveToWindow(newWindow: UIWindow); cdecl;
    procedure willRemoveSubview(subview: UIView); cdecl;
    function window: UIWindow; cdecl;
  end;
  TUIView = class(TOCGenericImport<UIViewClass, UIView>) end;

  PUIView = ^UIView;

  UIPickerViewClass = interface(UIViewClass)
    ['{FCAF962E-3D3B-4F0A-ABB8-223AC7B812AA}']
  end;

  UIPickerView = interface(UIView)
    ['{1BE54DCF-EC7E-417F-91D1-F62FC5EC86CA}']
    function dataSource: Pointer; cdecl;
    function delegate: Pointer; cdecl;
    function numberOfComponents: NSInteger; cdecl;
    function numberOfRowsInComponent(component: NSInteger): NSInteger; cdecl;
    procedure reloadAllComponents; cdecl;
    procedure reloadComponent(component: NSInteger); cdecl;
    function rowSizeForComponent(component: NSInteger): CGSize; cdecl;
    function selectedRowInComponent(component: NSInteger): NSInteger; cdecl;
    procedure selectRow(row: NSInteger; inComponent: NSInteger; animated: Boolean); cdecl;
    procedure setDataSource(dataSource: Pointer); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setShowsSelectionIndicator(showsSelectionIndicator: Boolean); cdecl; // API_DEPRECATED("This property has no effect on iOS 7 and later.", ios(2.0, 13.0))
    function showsSelectionIndicator: Boolean; cdecl; // API_DEPRECATED("This property has no effect on iOS 7 and later.", ios(2.0, 13.0))
    function viewForRow(row: NSInteger; forComponent: NSInteger): UIView; cdecl;
  end;
  TUIPickerView = class(TOCGenericImport<UIPickerViewClass, UIPickerView>) end;

  UIPickerViewDataSource = interface(IObjectiveC)
    ['{A012FA0B-9667-448A-9180-3814FA0C1165}']
    function numberOfComponentsInPickerView(pickerView: UIPickerView): NSInteger; cdecl;
    function pickerView(pickerView: UIPickerView; numberOfRowsInComponent: NSInteger): NSInteger; cdecl;
  end;

  UIPickerViewDelegate = interface(IObjectiveC)
    ['{DDD61FEB-CB23-41B8-A515-C5C1993A8B00}']
    function pickerView(pickerView: UIPickerView; viewForRow: NSInteger; forComponent: NSInteger; reusingView: UIView): UIView; overload; cdecl;
    function pickerView(pickerView: UIPickerView; titleForRow: NSInteger; forComponent: NSInteger): NSString; overload; cdecl;
    function pickerView(pickerView: UIPickerView; widthForComponent: NSInteger): CGFloat; overload; cdecl;
    [MethodName('pickerView:attributedTitleForRow:forComponent:')]
    function pickerViewAttributedTitleForRow(pickerView: UIPickerView; attributedTitleForRow: NSInteger;
      forComponent: NSInteger): NSAttributedString; cdecl;
    [MethodName('pickerView:didSelectRow:inComponent:')]
    procedure pickerViewDidSelectRow(pickerView: UIPickerView; didSelectRow: NSInteger; inComponent: NSInteger); cdecl;
    [MethodName('pickerView:rowHeightForComponent:')]
    function pickerViewRowHeightForComponent(pickerView: UIPickerView; rowHeightForComponent: NSInteger): CGFloat; cdecl;
  end;

  UIInteraction = interface(IObjectiveC)
    ['{D52D8112-5E3D-459C-B487-D578C4425868}']
    procedure didMoveToView(view: UIView); cdecl;
    function view: UIView; cdecl;
    procedure willMoveToView(view: UIView); cdecl;
  end;

  UIActionClass = interface(UIMenuElementClass)
    ['{75E186DF-3082-4EE8-B384-2E4FDF1226E8}']
    {class} function actionWithHandler(handler: UIActionHandler): Pointer; cdecl;
    {class} function actionWithTitle(title: NSString; image: UIImage; identifier: UIActionIdentifier; handler: UIActionHandler): Pointer; cdecl;
    {class} function captureTextFromCameraActionForResponder(responder: UIResponder; identifier: UIActionIdentifier): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIAction = interface(UIMenuElement)
    ['{35DB105A-7394-466E-933F-99F8A0393592}']
    function attributes: UIMenuElementAttributes; cdecl;
    function discoverabilityTitle: NSString; cdecl;
    function identifier: UIActionIdentifier; cdecl;
    function image: UIImage; cdecl;
    function sender: Pointer; cdecl;
    procedure setAttributes(attributes: UIMenuElementAttributes); cdecl;
    procedure setDiscoverabilityTitle(discoverabilityTitle: NSString); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setState(state: UIMenuElementState); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function state: UIMenuElementState; cdecl;
    function title: NSString; cdecl;
  end;
  TUIAction = class(TOCGenericImport<UIActionClass, UIAction>) end;

  UIContextMenuConfigurationClass = interface(NSObjectClass)
    ['{D4098B0B-49AA-41DC-AFA6-1E4D318F2E9F}']
    {class} function configurationWithIdentifier(identifier: Pointer; previewProvider: UIContextMenuContentPreviewProvider;
      actionProvider: UIContextMenuActionProvider): Pointer; cdecl;
  end;

  UIContextMenuConfiguration = interface(NSObject)
    ['{BC2B64DA-2835-43A0-BFAC-A4E4E6F55D0E}']
    function badgeCount: NSInteger; cdecl;
    function identifier: Pointer; cdecl;
    function preferredMenuElementOrder: UIContextMenuConfigurationElementOrder; cdecl;
    function secondaryItemIdentifiers: NSSet; cdecl;
    procedure setBadgeCount(badgeCount: NSInteger); cdecl;
    procedure setPreferredMenuElementOrder(preferredMenuElementOrder: UIContextMenuConfigurationElementOrder); cdecl;
    procedure setSecondaryItemIdentifiers(secondaryItemIdentifiers: NSSet); cdecl;
  end;
  TUIContextMenuConfiguration = class(TOCGenericImport<UIContextMenuConfigurationClass, UIContextMenuConfiguration>) end;

  UIContextMenuInteractionClass = interface(NSObjectClass)
    ['{379FCD9F-72F6-4163-95FE-5D823F86D844}']
    {class} function new: Pointer; cdecl;
  end;

  UIContextMenuInteraction = interface(NSObject)
    ['{04C4A4E7-8168-4D58-B003-68DD403B7037}']
    function delegate: Pointer; cdecl;
    procedure dismissMenu; cdecl;
    function initWithDelegate(delegate: Pointer): Pointer; cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
    function menuAppearance: UIContextMenuInteractionAppearance; cdecl;
    procedure updateVisibleMenuWithBlock(block: TUIContextMenuInteractionBlockMethod1); cdecl;
  end;
  TUIContextMenuInteraction = class(TOCGenericImport<UIContextMenuInteractionClass, UIContextMenuInteraction>) end;

  UIContextMenuInteractionAnimating = interface(IObjectiveC)
    ['{C7D08495-9EC2-4CEA-B3FC-8F498C7F45F6}']
    procedure addAnimations(animations: Pointer); cdecl;
    procedure addCompletion(completion: Pointer); cdecl;
    function previewViewController: UIViewController; cdecl;
  end;

  UIContextMenuInteractionCommitAnimating = interface(IObjectiveC)
    ['{F4650B41-2BB2-47B3-8B53-5D83F4D5CC04}']
    function preferredCommitStyle: UIContextMenuInteractionCommitStyle; cdecl;
    procedure setPreferredCommitStyle(preferredCommitStyle: UIContextMenuInteractionCommitStyle); cdecl;
  end;

  UIContextMenuInteractionDelegate = interface(IObjectiveC)
    ['{BE4F436F-787E-47C5-BD00-E9EC8045BBF6}']
    function contextMenuInteraction(interaction: UIContextMenuInteraction;
      previewForHighlightingMenuWithConfiguration: UIContextMenuConfiguration): UITargetedPreview; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("contextMenuInteraction:configuration:highlightPreviewForItemWithIdentifier:", ios(13.0, 16.0), visionos(1.0, 1.0))
    function contextMenuInteraction(interaction: UIContextMenuInteraction; configuration: UIContextMenuConfiguration;
      highlightPreviewForItemWithIdentifier: Pointer): UITargetedPreview; overload; cdecl;
    function contextMenuInteraction(interaction: UIContextMenuInteraction;
      configurationForMenuAtLocation: CGPoint): UIContextMenuConfiguration; overload; cdecl;
    [MethodName('contextMenuInteraction:configuration:dismissalPreviewForItemWithIdentifier:')]
    function contextMenuInteractionConfiguration(interaction: UIContextMenuInteraction; configuration: UIContextMenuConfiguration;
      dismissalPreviewForItemWithIdentifier: Pointer): UITargetedPreview; cdecl;
    [MethodName('contextMenuInteraction:previewForDismissingMenuWithConfiguration:')]
    function contextMenuInteractionPreviewForDismissingMenuWithConfiguration(interaction: UIContextMenuInteraction;
      previewForDismissingMenuWithConfiguration: UIContextMenuConfiguration): UITargetedPreview; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("contextMenuInteraction:configuration:dismissalPreviewForItemWithIdentifier:", ios(13.0, 16.0), visionos(1.0, 1.0))
    [MethodName('contextMenuInteraction:willDisplayMenuForConfiguration:animator:')]
    procedure contextMenuInteractionWillDisplayMenuForConfiguration(interaction: UIContextMenuInteraction;
      willDisplayMenuForConfiguration: UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName('contextMenuInteraction:willEndForConfiguration:animator:')]
    procedure contextMenuInteractionWillEndForConfiguration(interaction: UIContextMenuInteraction;
      willEndForConfiguration: UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName('contextMenuInteraction:willPerformPreviewActionForMenuWithConfiguration:animator:')]
    procedure contextMenuInteractionWillPerformPreviewActionForMenuWithConfiguration(interaction: UIContextMenuInteraction;
      willPerformPreviewActionForMenuWithConfiguration: UIContextMenuConfiguration; animator: Pointer); cdecl;
  end;

  UIControlClass = interface(UIViewClass)
    ['{A79CE25D-1186-4E05-8622-E0EEE20EB1C4}']
  end;

  UIControl = interface(UIView)
    ['{E597CC34-DFED-4AA9-A529-0912B6E3CED7}']
    function actionsForTarget(target: Pointer; forControlEvent: UIControlEvents): NSArray; cdecl;
    procedure addAction(action: UIAction; forControlEvents: UIControlEvents); cdecl;
    procedure addTarget(target: Pointer; action: SEL; forControlEvents: UIControlEvents); cdecl;
    function allControlEvents: UIControlEvents; cdecl;
    function allTargets: NSSet; cdecl;
    function beginTrackingWithTouch(touch: UITouch; withEvent: UIEvent): Boolean; cdecl;
    procedure cancelTrackingWithEvent(event: UIEvent); cdecl;
    function contentHorizontalAlignment: UIControlContentHorizontalAlignment; cdecl;
    function contentVerticalAlignment: UIControlContentVerticalAlignment; cdecl;
    function contextMenuInteraction: UIContextMenuInteraction; cdecl;
    function continueTrackingWithTouch(touch: UITouch; withEvent: UIEvent): Boolean; cdecl;
    function effectiveContentHorizontalAlignment: UIControlContentHorizontalAlignment; cdecl;
    procedure endTrackingWithTouch(touch: UITouch; withEvent: UIEvent); cdecl;
    procedure enumerateEventHandlers(iterator: TUIControlBlockMethod1); cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; overload; cdecl;
    function initWithFrame(frame: CGRect; primaryAction: UIAction): Pointer; overload; cdecl;
    function isContextMenuInteractionEnabled: Boolean; cdecl;
    function isEnabled: Boolean; cdecl;
    function isHighlighted: Boolean; cdecl;
    function isSelected: Boolean; cdecl;
    function isSymbolAnimationEnabled: Boolean; cdecl;
    function isTouchInside: Boolean; cdecl;
    function isTracking: Boolean; cdecl;
    function menuAttachmentPointForConfiguration(configuration: UIContextMenuConfiguration): CGPoint; cdecl;
    procedure performPrimaryAction; cdecl;
    procedure removeAction(action: UIAction; forControlEvents: UIControlEvents); cdecl;
    procedure removeActionForIdentifier(actionIdentifier: UIActionIdentifier; forControlEvents: UIControlEvents); cdecl;
    procedure removeTarget(target: Pointer; action: SEL; forControlEvents: UIControlEvents); cdecl;
    procedure sendAction(action: UIAction); overload; cdecl;
    procedure sendAction(action: SEL; &to: Pointer; forEvent: UIEvent); overload; cdecl;
    procedure sendActionsForControlEvents(controlEvents: UIControlEvents); cdecl;
    procedure setContentHorizontalAlignment(contentHorizontalAlignment: UIControlContentHorizontalAlignment); cdecl;
    procedure setContentVerticalAlignment(contentVerticalAlignment: UIControlContentVerticalAlignment); cdecl;
    procedure setContextMenuInteractionEnabled(contextMenuInteractionEnabled: Boolean); cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    procedure setHighlighted(highlighted: Boolean); cdecl;
    procedure setSelected(selected: Boolean); cdecl;
    procedure setShowsMenuAsPrimaryAction(showsMenuAsPrimaryAction: Boolean); cdecl;
    procedure setSymbolAnimationEnabled(symbolAnimationEnabled: Boolean); cdecl;
    procedure setToolTip(toolTip: NSString); cdecl;
    function showsMenuAsPrimaryAction: Boolean; cdecl;
    function state: UIControlState; cdecl;
    function toolTip: NSString; cdecl;
    function toolTipInteraction: UIToolTipInteraction; cdecl;
  end;
  TUIControl = class(TOCGenericImport<UIControlClass, UIControl>) end;

  UIRefreshControlClass = interface(UIControlClass)
    ['{6B8151C0-3CF9-4F7F-A3A0-7445F423A8AA}']
  end;

  UIRefreshControl = interface(UIControl)
    ['{424D162E-51C0-4292-BEA3-1735EEE27941}']
    function attributedTitle: NSAttributedString; cdecl;
    procedure beginRefreshing; cdecl;
    procedure endRefreshing; cdecl;
    function isRefreshing: Boolean; cdecl;
    procedure setAttributedTitle(attributedTitle: NSAttributedString); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
  end;
  TUIRefreshControl = class(TOCGenericImport<UIRefreshControlClass, UIRefreshControl>) end;

  UIScrollViewClass = interface(UIViewClass)
    ['{145E17AA-4A4B-41E5-8F39-51661724BDF2}']
  end;

  UIScrollView = interface(UIView)
    ['{6EB01488-C144-459D-8000-811BA8E40373}']
    function adjustedContentInset: UIEdgeInsets; cdecl;
    procedure adjustedContentInsetDidChange; cdecl;
    function allowsKeyboardScrolling: Boolean; cdecl;
    function alwaysBounceHorizontal: Boolean; cdecl;
    function alwaysBounceVertical: Boolean; cdecl;
    function automaticallyAdjustsScrollIndicatorInsets: Boolean; cdecl;
    function bounces: Boolean; cdecl;
    function bouncesHorizontally: Boolean; cdecl;
    function bouncesVertically: Boolean; cdecl;
    function bouncesZoom: Boolean; cdecl;
    function canCancelContentTouches: Boolean; cdecl;
    function contentAlignmentPoint: CGPoint; cdecl;
    function contentInset: UIEdgeInsets; cdecl;
    function contentInsetAdjustmentBehavior: UIScrollViewContentInsetAdjustmentBehavior; cdecl;
    function contentLayoutGuide: UILayoutGuide; cdecl;
    function contentOffset: CGPoint; cdecl;
    function contentSize: CGSize; cdecl;
    function decelerationRate: UIScrollViewDecelerationRate; cdecl;
    function delaysContentTouches: Boolean; cdecl;
    function delegate: Pointer; cdecl;
    function directionalPressGestureRecognizer: UIGestureRecognizer; cdecl; // API_DEPRECATED("Configuring the panGestureRecognizer for indirect scrolling automatically supports directional presses now, so this property is no longer useful.", tvos(9.0, 11.0))
    procedure flashScrollIndicators; cdecl;
    function frameLayoutGuide: UILayoutGuide; cdecl;
    function horizontalScrollIndicatorInsets: UIEdgeInsets; cdecl;
    function indexDisplayMode: UIScrollViewIndexDisplayMode; cdecl;
    function indicatorStyle: UIScrollViewIndicatorStyle; cdecl;
    function isDecelerating: Boolean; cdecl;
    function isDirectionalLockEnabled: Boolean; cdecl;
    function isDragging: Boolean; cdecl;
    function isPagingEnabled: Boolean; cdecl;
    function isScrollAnimating: Boolean; cdecl;
    function isScrollEnabled: Boolean; cdecl;
    function isTracking: Boolean; cdecl;
    function isZoomAnimating: Boolean; cdecl;
    function isZoomBouncing: Boolean; cdecl;
    function isZooming: Boolean; cdecl;
    function keyboardDismissMode: UIScrollViewKeyboardDismissMode; cdecl;
    function maximumZoomScale: CGFloat; cdecl;
    function minimumZoomScale: CGFloat; cdecl;
    function panGestureRecognizer: UIPanGestureRecognizer; cdecl;
    function pinchGestureRecognizer: UIPinchGestureRecognizer; cdecl;
    function refreshControl: UIRefreshControl; cdecl;
    function scrollIndicatorInsets: UIEdgeInsets; cdecl; // API_DEPRECATED("The scrollIndicatorInsets getter is deprecated, use the verticalScrollIndicatorInsets and horizontalScrollIndicatorInsets getters instead.", ios(2.0, 13.0), tvos(9.0, 13.0))
    procedure scrollRectToVisible(rect: CGRect; animated: Boolean); cdecl;
    function scrollsToTop: Boolean; cdecl;
    procedure setAllowsKeyboardScrolling(allowsKeyboardScrolling: Boolean); cdecl;
    procedure setAlwaysBounceHorizontal(alwaysBounceHorizontal: Boolean); cdecl;
    procedure setAlwaysBounceVertical(alwaysBounceVertical: Boolean); cdecl;
    procedure setAutomaticallyAdjustsScrollIndicatorInsets(automaticallyAdjustsScrollIndicatorInsets: Boolean); cdecl;
    procedure setBounces(bounces: Boolean); cdecl;
    procedure setBouncesHorizontally(bouncesHorizontally: Boolean); cdecl;
    procedure setBouncesVertically(bouncesVertically: Boolean); cdecl;
    procedure setBouncesZoom(bouncesZoom: Boolean); cdecl;
    procedure setCanCancelContentTouches(canCancelContentTouches: Boolean); cdecl;
    procedure setContentAlignmentPoint(contentAlignmentPoint: CGPoint); cdecl;
    procedure setContentInset(contentInset: UIEdgeInsets); cdecl;
    procedure setContentInsetAdjustmentBehavior(contentInsetAdjustmentBehavior: UIScrollViewContentInsetAdjustmentBehavior); cdecl;
    procedure setContentOffset(contentOffset: CGPoint; animated: Boolean); overload; cdecl;
    procedure setContentOffset(contentOffset: CGPoint); overload; cdecl;
    procedure setContentSize(contentSize: CGSize); cdecl;
    procedure setDecelerationRate(decelerationRate: UIScrollViewDecelerationRate); cdecl;
    procedure setDelaysContentTouches(delaysContentTouches: Boolean); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDirectionalLockEnabled(directionalLockEnabled: Boolean); cdecl;
    procedure setHorizontalScrollIndicatorInsets(horizontalScrollIndicatorInsets: UIEdgeInsets); cdecl;
    procedure setIndexDisplayMode(indexDisplayMode: UIScrollViewIndexDisplayMode); cdecl;
    procedure setIndicatorStyle(indicatorStyle: UIScrollViewIndicatorStyle); cdecl;
    procedure setKeyboardDismissMode(keyboardDismissMode: UIScrollViewKeyboardDismissMode); cdecl;
    procedure setMaximumZoomScale(maximumZoomScale: CGFloat); cdecl;
    procedure setMinimumZoomScale(minimumZoomScale: CGFloat); cdecl;
    procedure setPagingEnabled(pagingEnabled: Boolean); cdecl;
    procedure setRefreshControl(refreshControl: UIRefreshControl); cdecl;
    procedure setScrollEnabled(scrollEnabled: Boolean); cdecl;
    procedure setScrollIndicatorInsets(scrollIndicatorInsets: UIEdgeInsets); cdecl;
    procedure setScrollsToTop(scrollsToTop: Boolean); cdecl;
    procedure setShowsHorizontalScrollIndicator(showsHorizontalScrollIndicator: Boolean); cdecl;
    procedure setShowsVerticalScrollIndicator(showsVerticalScrollIndicator: Boolean); cdecl;
    procedure setTransfersHorizontalScrollingToParent(transfersHorizontalScrollingToParent: Boolean); cdecl;
    procedure setTransfersVerticalScrollingToParent(transfersVerticalScrollingToParent: Boolean); cdecl;
    procedure setVerticalScrollIndicatorInsets(verticalScrollIndicatorInsets: UIEdgeInsets); cdecl;
    procedure setZoomScale(scale: CGFloat; animated: Boolean); overload; cdecl;
    procedure setZoomScale(zoomScale: CGFloat); overload; cdecl;
    function showsHorizontalScrollIndicator: Boolean; cdecl;
    function showsVerticalScrollIndicator: Boolean; cdecl;
    procedure stopScrollingAndZooming; cdecl;
    function touchesShouldBegin(touches: NSSet; withEvent: UIEvent; inContentView: UIView): Boolean; cdecl;
    function touchesShouldCancelInContentView(view: UIView): Boolean; cdecl;
    function transfersHorizontalScrollingToParent: Boolean; cdecl;
    function transfersVerticalScrollingToParent: Boolean; cdecl;
    function verticalScrollIndicatorInsets: UIEdgeInsets; cdecl;
    procedure withScrollIndicatorsShownForContentOffsetChanges(changes: TUIScrollViewBlockMethod1); cdecl;
    function zoomScale: CGFloat; cdecl;
    procedure zoomToRect(rect: CGRect; animated: Boolean); cdecl;
  end;
  TUIScrollView = class(TOCGenericImport<UIScrollViewClass, UIScrollView>) end;

  UIScrollViewDelegate = interface(IObjectiveC)
    ['{40BD6FBB-8164-4C56-9C02-B44FC7461EB7}']
    procedure scrollViewDidChangeAdjustedContentInset(scrollView: UIScrollView); cdecl;
    procedure scrollViewDidEndDecelerating(scrollView: UIScrollView); cdecl;
    procedure scrollViewDidEndDragging(scrollView: UIScrollView; willDecelerate: Boolean); cdecl;
    procedure scrollViewDidEndScrollingAnimation(scrollView: UIScrollView); cdecl;
    procedure scrollViewDidEndZooming(scrollView: UIScrollView; withView: UIView; atScale: CGFloat); cdecl;
    procedure scrollViewDidScroll(scrollView: UIScrollView); cdecl;
    procedure scrollViewDidScrollToTop(scrollView: UIScrollView); cdecl;
    procedure scrollViewDidZoom(scrollView: UIScrollView); cdecl;
    function scrollViewShouldScrollToTop(scrollView: UIScrollView): Boolean; cdecl;
    procedure scrollViewWillBeginDecelerating(scrollView: UIScrollView); cdecl;
    procedure scrollViewWillBeginDragging(scrollView: UIScrollView); cdecl;
    procedure scrollViewWillBeginZooming(scrollView: UIScrollView; withView: UIView); cdecl;
    procedure scrollViewWillEndDragging(scrollView: UIScrollView; withVelocity: CGPoint; targetContentOffset: PCGPoint); cdecl;
    function viewForZoomingInScrollView(scrollView: UIScrollView): UIView; cdecl;
  end;

  UIPickerViewAccessibilityDelegate = interface(IObjectiveC)
    ['{508535FB-DE03-4F1A-9D59-ACB0D493AB75}']
    function pickerView(pickerView: UIPickerView; accessibilityLabelForComponent: NSInteger): NSString; cdecl;
    [MethodName('pickerView:accessibilityAttributedHintForComponent:')]
    function pickerViewAccessibilityAttributedHintForComponent(pickerView: UIPickerView;
      accessibilityAttributedHintForComponent: NSInteger): NSAttributedString; cdecl;
    [MethodName('pickerView:accessibilityAttributedLabelForComponent:')]
    function pickerViewAccessibilityAttributedLabelForComponent(pickerView: UIPickerView;
      accessibilityAttributedLabelForComponent: NSInteger): NSAttributedString; cdecl;
    [MethodName('pickerView:accessibilityAttributedUserInputLabelsForComponent:')]
    function pickerViewAccessibilityAttributedUserInputLabelsForComponent(pickerView: UIPickerView;
      accessibilityAttributedUserInputLabelsForComponent: NSInteger): NSArray; cdecl;
    [MethodName('pickerView:accessibilityHintForComponent:')]
    function pickerViewAccessibilityHintForComponent(pickerView: UIPickerView; accessibilityHintForComponent: NSInteger): NSString; cdecl;
    [MethodName('pickerView:accessibilityUserInputLabelsForComponent:')]
    function pickerViewAccessibilityUserInputLabelsForComponent(pickerView: UIPickerView;
      accessibilityUserInputLabelsForComponent: NSInteger): NSArray; cdecl;
  end;

  UIScrollViewAccessibilityDelegate = interface(IObjectiveC)
    ['{0A9F122E-0127-4069-9A7B-8CE54D131427}']
    function accessibilityAttributedScrollStatusForScrollView(scrollView: UIScrollView): NSAttributedString; cdecl;
    function accessibilityScrollStatusForScrollView(scrollView: UIScrollView): NSString; cdecl;
  end;

  UIAccessibilityContainerDataTableCell = interface(IObjectiveC)
    ['{CA393464-4DA4-4E02-A686-A94679BB70C0}']
    function accessibilityColumnRange: NSRange; cdecl;
    function accessibilityRowRange: NSRange; cdecl;
  end;

  UIAccessibilityContainerDataTable = interface(IObjectiveC)
    ['{B2C8C1F2-82B2-45FC-8A15-E1AB06A15FE2}']
    function accessibilityColumnCount: NSUInteger; cdecl;
    function accessibilityDataTableCellElementForRow(row: NSUInteger; column: NSUInteger): Pointer; cdecl;
    function accessibilityHeaderElementsForColumn(column: NSUInteger): NSArray; cdecl;
    function accessibilityHeaderElementsForRow(row: NSUInteger): NSArray; cdecl;
    function accessibilityRowCount: NSUInteger; cdecl;
  end;

  UIAccessibilityCustomActionClass = interface(NSObjectClass)
    ['{33525234-49E4-45FB-A538-961AFB620697}']
  end;

  UIAccessibilityCustomAction = interface(NSObject)
    ['{DDE3BB56-4CF8-4453-B6CD-75B013DE33B2}']
    function actionHandler: UIAccessibilityCustomActionHandler; cdecl;
    function attributedName: NSAttributedString; cdecl;
    function image: UIImage; cdecl;
    function initWithAttributedName(attributedName: NSAttributedString; image: UIImage;
      actionHandler: UIAccessibilityCustomActionHandler): Pointer; overload; cdecl;
    function initWithAttributedName(attributedName: NSAttributedString; actionHandler: UIAccessibilityCustomActionHandler): Pointer; overload; cdecl;
    function initWithAttributedName(attributedName: NSAttributedString; image: UIImage; target: Pointer; selector: SEL): Pointer; overload; cdecl;
    function initWithAttributedName(attributedName: NSAttributedString; target: Pointer; selector: SEL): Pointer; overload; cdecl;
    function initWithName(name: NSString; target: Pointer; selector: SEL): Pointer; overload; cdecl;
    function initWithName(name: NSString; image: UIImage; target: Pointer; selector: SEL): Pointer; overload; cdecl;
    function initWithName(name: NSString; actionHandler: UIAccessibilityCustomActionHandler): Pointer; overload; cdecl;
    function initWithName(name: NSString; image: UIImage; actionHandler: UIAccessibilityCustomActionHandler): Pointer; overload; cdecl;
    function name: NSString; cdecl;
    function selector: SEL; cdecl;
    procedure setActionHandler(actionHandler: UIAccessibilityCustomActionHandler); cdecl;
    procedure setAttributedName(attributedName: NSAttributedString); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setName(name: NSString); cdecl;
    procedure setSelector(selector: SEL); cdecl;
    procedure setTarget(target: Pointer); cdecl;
    function target: Pointer; cdecl;
  end;
  TUIAccessibilityCustomAction = class(TOCGenericImport<UIAccessibilityCustomActionClass, UIAccessibilityCustomAction>) end;

  UITextInputPasswordRulesClass = interface(NSObjectClass)
    ['{AF77B40A-334F-4E3E-9DEF-DF720E2A2BFC}']
    {class} function new: Pointer; cdecl;
    {class} function passwordRulesWithDescriptor(passwordRulesDescriptor: NSString): Pointer; cdecl;
  end;

  UITextInputPasswordRules = interface(NSObject)
    ['{19DFB986-CF4F-4E48-A7BE-F5D462B5E022}']
    function passwordRulesDescriptor: NSString; cdecl;
  end;
  TUITextInputPasswordRules = class(TOCGenericImport<UITextInputPasswordRulesClass, UITextInputPasswordRules>) end;

  UITextInputTraits = interface(IObjectiveC)
    ['{C4569D28-7E9A-41F6-AA7E-F7D0AC55EB35}']
    function autocapitalizationType: UITextAutocapitalizationType; cdecl;
    function autocorrectionType: UITextAutocorrectionType; cdecl;
    function enablesReturnKeyAutomatically: Boolean; cdecl;
    function inlinePredictionType: UITextInlinePredictionType; cdecl;
    function isSecureTextEntry: Boolean; cdecl;
    function keyboardAppearance: UIKeyboardAppearance; cdecl;
    function keyboardType: UIKeyboardType; cdecl;
    function passwordRules: UITextInputPasswordRules; cdecl;
    function returnKeyType: UIReturnKeyType; cdecl;
    procedure setAutocapitalizationType(autocapitalizationType: UITextAutocapitalizationType); cdecl;
    procedure setAutocorrectionType(autocorrectionType: UITextAutocorrectionType); cdecl;
    procedure setEnablesReturnKeyAutomatically(enablesReturnKeyAutomatically: Boolean); cdecl;
    procedure setInlinePredictionType(inlinePredictionType: UITextInlinePredictionType); cdecl;
    procedure setKeyboardAppearance(keyboardAppearance: UIKeyboardAppearance); cdecl;
    procedure setKeyboardType(keyboardType: UIKeyboardType); cdecl;
    procedure setPasswordRules(passwordRules: UITextInputPasswordRules); cdecl;
    procedure setReturnKeyType(returnKeyType: UIReturnKeyType); cdecl;
    procedure setSecureTextEntry(secureTextEntry: Boolean); cdecl;
    procedure setSmartDashesType(smartDashesType: UITextSmartDashesType); cdecl;
    procedure setSmartInsertDeleteType(smartInsertDeleteType: UITextSmartInsertDeleteType); cdecl;
    procedure setSmartQuotesType(smartQuotesType: UITextSmartQuotesType); cdecl;
    procedure setSpellCheckingType(spellCheckingType: UITextSpellCheckingType); cdecl;
    procedure setTextContentType(textContentType: UITextContentType); cdecl;
    function smartDashesType: UITextSmartDashesType; cdecl;
    function smartInsertDeleteType: UITextSmartInsertDeleteType; cdecl;
    function smartQuotesType: UITextSmartQuotesType; cdecl;
    function spellCheckingType: UITextSpellCheckingType; cdecl;
    function textContentType: UITextContentType; cdecl;
  end;

  UIKeyInput = interface(IObjectiveC)
    ['{744104B0-8F5B-4707-8C31-335B3849E0B1}']
    procedure deleteBackward; cdecl;
    function hasText: Boolean; cdecl;
    procedure insertText(text: NSString); cdecl;
  end;

  UIDictationPhraseClass = interface(NSObjectClass)
    ['{AFDA7CDD-5575-49EB-8B4A-D31DD50708E1}']
  end;

  UIDictationPhrase = interface(NSObject)
    ['{65C3CD8A-2FCF-43FF-BF96-AFDBD96655D2}']
    function alternativeInterpretations: NSArray; cdecl;
    function text: NSString; cdecl;
  end;
  TUIDictationPhrase = class(TOCGenericImport<UIDictationPhraseClass, UIDictationPhrase>) end;

  UITextInputAssistantItemClass = interface(NSObjectClass)
    ['{CFA8EF5F-AAB9-4CC8-810F-C99CF725A676}']
  end;

  UITextInputAssistantItem = interface(NSObject)
    ['{C6D9F89E-CB59-487E-AD14-8B20B0DB68F5}']
    function allowsHidingShortcuts: Boolean; cdecl;
    function leadingBarButtonGroups: NSArray; cdecl;
    procedure setAllowsHidingShortcuts(allowsHidingShortcuts: Boolean); cdecl;
    procedure setLeadingBarButtonGroups(leadingBarButtonGroups: NSArray); cdecl;
    procedure setTrailingBarButtonGroups(trailingBarButtonGroups: NSArray); cdecl;
    function trailingBarButtonGroups: NSArray; cdecl;
  end;
  TUITextInputAssistantItem = class(TOCGenericImport<UITextInputAssistantItemClass, UITextInputAssistantItem>) end;

  UITextPlaceholderClass = interface(NSObjectClass)
    ['{42E0D7B9-ECAA-4E1B-99BE-69263D4C58C0}']
  end;

  UITextPlaceholder = interface(NSObject)
    ['{2A9F378C-1170-4C78-8CB8-357232E4CE17}']
    function rects: NSArray; cdecl;
  end;
  TUITextPlaceholder = class(TOCGenericImport<UITextPlaceholderClass, UITextPlaceholder>) end;

  UITextInput = interface(IObjectiveC)
    ['{76FE5851-A9CD-433C-9C5F-FD189474DD19}']
    function baseWritingDirectionForPosition(position: UITextPosition; inDirection: UITextStorageDirection): NSWritingDirection; cdecl;
    procedure beginFloatingCursorAtPoint(point: CGPoint); cdecl;
    function beginningOfDocument: UITextPosition; cdecl;
    function caretRectForPosition(position: UITextPosition): CGRect; cdecl;
    function caretTransformForPosition(position: UITextPosition): CGAffineTransform; cdecl;
    function characterOffsetOfPosition(position: UITextPosition; withinRange: UITextRange): NSInteger; cdecl;
    function characterRangeAtPoint(point: CGPoint): UITextRange; cdecl;
    function characterRangeByExtendingPosition(position: UITextPosition; inDirection: UITextLayoutDirection): UITextRange; cdecl;
    function closestPositionToPoint(point: CGPoint; withinRange: UITextRange): UITextPosition; overload; cdecl;
    function closestPositionToPoint(point: CGPoint): UITextPosition; overload; cdecl;
    function comparePosition(position: UITextPosition; toPosition: UITextPosition): NSComparisonResult; cdecl;
    procedure dictationRecognitionFailed; cdecl;
    procedure dictationRecordingDidEnd; cdecl;
    function editMenuForTextRange(textRange: UITextRange; suggestedActions: NSArray): UIMenu; cdecl;
    procedure endFloatingCursor; cdecl;
    function endOfDocument: UITextPosition; cdecl;
    function firstRectForRange(range: UITextRange): CGRect; cdecl;
    function frameForDictationResultPlaceholder(placeholder: Pointer): CGRect; cdecl;
    function inputDelegate: Pointer; cdecl;
    procedure insertDictationResult(dictationResult: NSArray); cdecl;
    function insertDictationResultPlaceholder: Pointer; cdecl;
    procedure insertText(text: NSString; alternatives: NSArray; style: UITextAlternativeStyle); cdecl;
    function insertTextPlaceholderWithSize(size: CGSize): UITextPlaceholder; cdecl;
    function markedTextRange: UITextRange; cdecl;
    function markedTextStyle: NSDictionary; cdecl;
    function offsetFromPosition(from: UITextPosition; toPosition: UITextPosition): NSInteger; cdecl;
    function positionFromPosition(position: UITextPosition; inDirection: UITextLayoutDirection; offset: NSInteger): UITextPosition; overload; cdecl;
    function positionFromPosition(position: UITextPosition; offset: NSInteger): UITextPosition; overload; cdecl;
    function positionWithinRange(range: UITextRange; atCharacterOffset: NSInteger): UITextPosition; overload; cdecl;
    [MethodName('positionWithinRange:farthestInDirection:')]
    function positionWithinRangeFarthestInDirection(range: UITextRange; farthestInDirection: UITextLayoutDirection): UITextPosition; overload; cdecl;
    procedure removeDictationResultPlaceholder(placeholder: Pointer; willInsertResult: Boolean); cdecl;
    procedure removeTextPlaceholder(textPlaceholder: UITextPlaceholder); cdecl;
    procedure replaceRange(range: UITextRange; withText: NSString); cdecl;
    function selectedTextRange: UITextRange; cdecl;
    function selectionAffinity: UITextStorageDirection; cdecl;
    function selectionRectsForRange(range: UITextRange): NSArray; cdecl;
    procedure setAttributedMarkedText(markedText: NSAttributedString; selectedRange: NSRange); cdecl;
    procedure setBaseWritingDirection(writingDirection: NSWritingDirection; forRange: UITextRange); cdecl;
    procedure setInputDelegate(inputDelegate: Pointer); cdecl;
    procedure setMarkedText(markedText: NSString; selectedRange: NSRange); cdecl;
    procedure setMarkedTextStyle(markedTextStyle: NSDictionary); cdecl;
    procedure setSelectedTextRange(selectedTextRange: UITextRange); cdecl;
    procedure setSelectionAffinity(selectionAffinity: UITextStorageDirection); cdecl;
    function shouldChangeTextInRange(range: UITextRange; replacementText: NSString): Boolean; cdecl;
    function textInputView: UIView; cdecl;
    function textInRange(range: UITextRange): NSString; cdecl;
    function textRangeFromPosition(fromPosition: UITextPosition; toPosition: UITextPosition): UITextRange; cdecl;
    function textStylingAtPosition(position: UITextPosition; inDirection: UITextStorageDirection): NSDictionary; cdecl;
    function tokenizer: Pointer; cdecl;
    procedure unmarkText; cdecl;
    procedure updateFloatingCursorAtPoint(point: CGPoint); cdecl;
    procedure willDismissEditMenuWithAnimator(animator: Pointer); cdecl;
    procedure willPresentEditMenuWithAnimator(animator: Pointer); cdecl;
  end;

  UITextPositionClass = interface(NSObjectClass)
    ['{C18F8467-43A5-4A72-8117-0D3966C4BB60}']
  end;

  UITextPosition = interface(NSObject)
    ['{1393A509-D163-4998-B916-26EB9B3ED59D}']
  end;
  TUITextPosition = class(TOCGenericImport<UITextPositionClass, UITextPosition>) end;

  UITextRangeClass = interface(NSObjectClass)
    ['{76507C3E-FBD1-477A-88C6-360558687BE5}']
  end;

  UITextRange = interface(NSObject)
    ['{8A810EFC-9F5C-4CD3-995D-E16FCF46148C}']
    function &end: UITextPosition; cdecl;
    function isEmpty: Boolean; cdecl;
    function start: UITextPosition; cdecl;
  end;
  TUITextRange = class(TOCGenericImport<UITextRangeClass, UITextRange>) end;

  UITextSelectionRectClass = interface(NSObjectClass)
    ['{F9AB9FF7-35BB-4FC7-AE22-86DACC97AAC5}']
  end;

  UITextSelectionRect = interface(NSObject)
    ['{DE5EAF96-AFC3-4D2C-A1CC-F2BFF057C787}']
    function containsEnd: Boolean; cdecl;
    function containsStart: Boolean; cdecl;
    function isVertical: Boolean; cdecl;
    function rect: CGRect; cdecl;
    function transform: CGAffineTransform; cdecl;
    function writingDirection: NSWritingDirection; cdecl;
  end;
  TUITextSelectionRect = class(TOCGenericImport<UITextSelectionRectClass, UITextSelectionRect>) end;

  UITextInputDelegate = interface(IObjectiveC)
    ['{5F88E586-7E8E-44AE-8CB2-81A3F87E4659}']
    procedure selectionDidChange(textInput: Pointer); cdecl;
    procedure selectionWillChange(textInput: Pointer); cdecl;
    procedure textDidChange(textInput: Pointer); cdecl;
    procedure textWillChange(textInput: Pointer); cdecl;
  end;

  UITextInputTokenizer = interface(IObjectiveC)
    ['{C23F7A96-0555-4C52-9848-3A68685D1C44}']
    function isPosition(position: UITextPosition; atBoundary: UITextGranularity; inDirection: UITextDirection): Boolean; cdecl;
    [MethodName('isPosition:withinTextUnit:inDirection:')]
    function isPositionWithinTextUnit(position: UITextPosition; withinTextUnit: UITextGranularity; inDirection: UITextDirection): Boolean; cdecl;
    function positionFromPosition(position: UITextPosition; toBoundary: UITextGranularity; inDirection: UITextDirection): UITextPosition; cdecl;
    function rangeEnclosingPosition(position: UITextPosition; withGranularity: UITextGranularity; inDirection: UITextDirection): UITextRange; cdecl;
  end;

  UITextInputStringTokenizerClass = interface(NSObjectClass)
    ['{F98C7C7D-6961-42E7-BF36-03AEC53F342F}']
  end;

  UITextInputStringTokenizer = interface(NSObject)
    ['{821C0A33-9EAE-421B-B5D1-689F02F4F9A1}']
    function initWithTextInput(textInput: UIResponder): Pointer; cdecl;
  end;
  TUITextInputStringTokenizer = class(TOCGenericImport<UITextInputStringTokenizerClass, UITextInputStringTokenizer>) end;

  UITextInputModeClass = interface(NSObjectClass)
    ['{44E39989-FCA2-4BA4-AC72-14F37EA7D523}']
    {class} function activeInputModes: NSArray; cdecl;
    {class} function currentInputMode: UITextInputMode; cdecl; // API_DEPRECATED("", ios(4.2, 7.0))
  end;

  UITextInputMode = interface(NSObject)
    ['{5ACC2413-840C-45D8-AACF-4E53BC035BF6}']
    function primaryLanguage: NSString; cdecl;
  end;
  TUITextInputMode = class(TOCGenericImport<UITextInputModeClass, UITextInputMode>) end;

  UIAccessibilityCustomRotorSearchPredicateClass = interface(NSObjectClass)
    ['{C3FC172C-2F06-46BC-B102-B957563C0735}']
  end;

  UIAccessibilityCustomRotorSearchPredicate = interface(NSObject)
    ['{53DE8CA5-F27D-4EA8-9BA1-295D8442CF07}']
    function currentItem: UIAccessibilityCustomRotorItemResult; cdecl;
    function searchDirection: UIAccessibilityCustomRotorDirection; cdecl;
    procedure setCurrentItem(currentItem: UIAccessibilityCustomRotorItemResult); cdecl;
    procedure setSearchDirection(searchDirection: UIAccessibilityCustomRotorDirection); cdecl;
  end;
  TUIAccessibilityCustomRotorSearchPredicate = class(TOCGenericImport<UIAccessibilityCustomRotorSearchPredicateClass,
    UIAccessibilityCustomRotorSearchPredicate>) end;

  UIAccessibilityCustomRotorClass = interface(NSObjectClass)
    ['{E0B0B381-05C5-4C0A-BB6B-26E84C7B1745}']
  end;

  UIAccessibilityCustomRotor = interface(NSObject)
    ['{4B08E2C6-BE04-42E9-8AC4-63849E8A5457}']
    function attributedName: NSAttributedString; cdecl;
    function initWithAttributedName(attributedName: NSAttributedString; itemSearchBlock: UIAccessibilityCustomRotorSearch): Pointer; cdecl;
    function initWithName(name: NSString; itemSearchBlock: UIAccessibilityCustomRotorSearch): Pointer; cdecl;
    function initWithSystemType(&type: UIAccessibilityCustomSystemRotorType; itemSearchBlock: UIAccessibilityCustomRotorSearch): Pointer; cdecl;
    function itemSearchBlock: UIAccessibilityCustomRotorSearch; cdecl;
    function name: NSString; cdecl;
    procedure setAttributedName(attributedName: NSAttributedString); cdecl;
    procedure setItemSearchBlock(itemSearchBlock: UIAccessibilityCustomRotorSearch); cdecl;
    procedure setName(name: NSString); cdecl;
    function systemRotorType: UIAccessibilityCustomSystemRotorType; cdecl;
  end;
  TUIAccessibilityCustomRotor = class(TOCGenericImport<UIAccessibilityCustomRotorClass, UIAccessibilityCustomRotor>) end;

  UIAccessibilityCustomRotorItemResultClass = interface(NSObjectClass)
    ['{BF0D634A-E9D2-4E6C-A435-77C72FBFEEE9}']
  end;

  UIAccessibilityCustomRotorItemResult = interface(NSObject)
    ['{3BBC4B67-BF62-4A99-9D69-13F7D565B8AD}']
    function initWithTargetElement(targetElement: Pointer; targetRange: UITextRange): Pointer; cdecl;
    procedure setTargetElement(targetElement: Pointer); cdecl;
    procedure setTargetRange(targetRange: UITextRange); cdecl;
    function targetElement: Pointer; cdecl;
    function targetRange: UITextRange; cdecl;
  end;
  TUIAccessibilityCustomRotorItemResult = class(TOCGenericImport<UIAccessibilityCustomRotorItemResultClass, UIAccessibilityCustomRotorItemResult>) end;

  UIBarItemClass = interface(NSObjectClass)
    ['{D7661473-7E5E-40E8-83E2-D71B447DD0CE}']
  end;

  UIBarItem = interface(NSObject)
    ['{469484F9-F51E-40BC-827B-A0CEC21B1183}']
    function image: UIImage; cdecl;
    function imageInsets: UIEdgeInsets; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function isEnabled: Boolean; cdecl;
    function landscapeImagePhone: UIImage; cdecl;
    function landscapeImagePhoneInsets: UIEdgeInsets; cdecl;
    function largeContentSizeImage: UIImage; cdecl;
    function largeContentSizeImageInsets: UIEdgeInsets; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setImageInsets(imageInsets: UIEdgeInsets); cdecl;
    procedure setLandscapeImagePhone(landscapeImagePhone: UIImage); cdecl;
    procedure setLandscapeImagePhoneInsets(landscapeImagePhoneInsets: UIEdgeInsets); cdecl;
    procedure setLargeContentSizeImage(largeContentSizeImage: UIImage); cdecl;
    procedure setLargeContentSizeImageInsets(largeContentSizeImageInsets: UIEdgeInsets); cdecl;
    procedure setTag(tag: NSInteger); cdecl;
    procedure setTitle(title: NSString); cdecl;
    procedure setTitleTextAttributes(attributes: NSDictionary; forState: UIControlState); cdecl;
    function tag: NSInteger; cdecl;
    function title: NSString; cdecl;
    function titleTextAttributesForState(state: UIControlState): NSDictionary; cdecl;
  end;
  TUIBarItem = class(TOCGenericImport<UIBarItemClass, UIBarItem>) end;

  UIDropInteractionClass = interface(NSObjectClass)
    ['{FD750C6D-4027-4E4E-A5DA-C4F72BF16DC9}']
    {class} function new: Pointer; cdecl;
  end;

  UIDropInteraction = interface(NSObject)
    ['{A6A3EFBC-2016-45B8-89A5-361DCE3D40CF}']
    function allowsSimultaneousDropSessions: Boolean; cdecl;
    function delegate: Pointer; cdecl;
    function initWithDelegate(delegate: Pointer): Pointer; cdecl;
    procedure setAllowsSimultaneousDropSessions(allowsSimultaneousDropSessions: Boolean); cdecl;
  end;
  TUIDropInteraction = class(TOCGenericImport<UIDropInteractionClass, UIDropInteraction>) end;

  UIDropProposalClass = interface(NSObjectClass)
    ['{22C2FBF6-44B0-4661-8C0B-FB57F904A156}']
    {class} function new: Pointer; cdecl;
  end;

  UIDropProposal = interface(NSObject)
    ['{9F1299FC-9D66-40E6-95B5-190A65870252}']
    function initWithDropOperation(operation: UIDropOperation): Pointer; cdecl;
    function isPrecise: Boolean; cdecl;
    function operation: UIDropOperation; cdecl;
    function prefersFullSizePreview: Boolean; cdecl;
    procedure setPrecise(precise: Boolean); cdecl;
    procedure setPrefersFullSizePreview(prefersFullSizePreview: Boolean); cdecl;
  end;
  TUIDropProposal = class(TOCGenericImport<UIDropProposalClass, UIDropProposal>) end;

  UIDropInteractionDelegate = interface(IObjectiveC)
    ['{07A832B6-BF12-4C32-B0AB-A63039C9D62B}']
    function dropInteraction(interaction: UIDropInteraction; previewForDroppingItem: UIDragItem;
      withDefault: UITargetedDragPreview): UITargetedDragPreview; overload; cdecl;
    procedure dropInteraction(interaction: UIDropInteraction; item: UIDragItem; willAnimateDropWithAnimator: Pointer); overload; cdecl;
    function dropInteraction(interaction: UIDropInteraction; canHandleSession: Pointer): Boolean; overload; cdecl;
    [MethodName('dropInteraction:concludeDrop:')]
    procedure dropInteractionConcludeDrop(interaction: UIDropInteraction; concludeDrop: Pointer); cdecl;
    [MethodName('dropInteraction:performDrop:')]
    procedure dropInteractionPerformDrop(interaction: UIDropInteraction; performDrop: Pointer); cdecl;
    [MethodName('dropInteraction:sessionDidEnd:')]
    procedure dropInteractionSessionDidEnd(interaction: UIDropInteraction; sessionDidEnd: Pointer); cdecl;
    [MethodName('dropInteraction:sessionDidEnter:')]
    procedure dropInteractionSessionDidEnter(interaction: UIDropInteraction; sessionDidEnter: Pointer); cdecl;
    [MethodName('dropInteraction:sessionDidExit:')]
    procedure dropInteractionSessionDidExit(interaction: UIDropInteraction; sessionDidExit: Pointer); cdecl;
    [MethodName('dropInteraction:sessionDidUpdate:')]
    function dropInteractionSessionDidUpdate(interaction: UIDropInteraction; sessionDidUpdate: Pointer): UIDropProposal; cdecl;
  end;

  UIViewAnimating = interface(IObjectiveC)
    ['{3FC210F7-6931-49B4-A991-EE9EE55F6135}']
    procedure finishAnimationAtPosition(finalPosition: UIViewAnimatingPosition); cdecl;
    function fractionComplete: CGFloat; cdecl;
    function isReversed: Boolean; cdecl;
    function isRunning: Boolean; cdecl;
    procedure pauseAnimation; cdecl;
    procedure setFractionComplete(fractionComplete: CGFloat); cdecl;
    procedure setReversed(reversed: Boolean); cdecl;
    procedure startAnimation; cdecl;
    procedure startAnimationAfterDelay(delay: NSTimeInterval); cdecl;
    function state: UIViewAnimatingState; cdecl;
    procedure stopAnimation(withoutFinishing: Boolean); cdecl;
  end;

  UIViewImplicitlyAnimating = interface(IObjectiveC)
    ['{4DC8EE5B-C98C-4D23-93F6-C4B99D404038}']
    procedure addAnimations(animation: Pointer); overload; cdecl;
    procedure addAnimations(animation: Pointer; delayFactor: CGFloat); overload; cdecl;
    procedure addCompletion(completion: Pointer); cdecl;
    procedure continueAnimationWithTimingParameters(parameters: Pointer; durationFactor: CGFloat); cdecl;
  end;

  UIDragAnimating = interface(IObjectiveC)
    ['{5ACF114E-6855-411A-B002-B9E69D4873B2}']
    procedure addAnimations(animations: Pointer); cdecl;
    procedure addCompletion(completion: Pointer); cdecl;
  end;

  UIDragInteractionClass = interface(NSObjectClass)
    ['{1870BCD5-3C52-467A-BA05-60BF84D51983}']
    {class} function isEnabledByDefault: Boolean; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIDragInteraction = interface(NSObject)
    ['{AB0C5653-FCDB-48D8-AC26-53758AE75062}']
    function allowsSimultaneousRecognitionDuringLift: Boolean; cdecl;
    function delegate: Pointer; cdecl;
    function initWithDelegate(delegate: Pointer): Pointer; cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setAllowsSimultaneousRecognitionDuringLift(allowsSimultaneousRecognitionDuringLift: Boolean); cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
  end;
  TUIDragInteraction = class(TOCGenericImport<UIDragInteractionClass, UIDragInteraction>) end;

  UIDragInteractionDelegate = interface(IObjectiveC)
    ['{E35756C9-B30B-4198-9252-9AA9E92B3A69}']
    function dragInteraction(interaction: UIDragInteraction; previewForCancellingItem: UIDragItem;
      withDefault: UITargetedDragPreview): UITargetedDragPreview; overload; cdecl;
    procedure dragInteraction(interaction: UIDragInteraction; session: Pointer; willAddItems: NSArray;
      forInteraction: UIDragInteraction); overload; cdecl;
    procedure dragInteraction(interaction: UIDragInteraction; session: Pointer; willEndWithOperation: UIDropOperation); overload; cdecl;
    function dragInteraction(interaction: UIDragInteraction; sessionForAddingItems: NSArray; withTouchAtPoint: CGPoint): Pointer; overload; cdecl;
    function dragInteraction(interaction: UIDragInteraction; itemsForAddingToSession: Pointer; withTouchAtPoint: CGPoint): NSArray; overload; cdecl;
    procedure dragInteraction(interaction: UIDragInteraction; willAnimateLiftWithAnimator: Pointer; session: Pointer); overload; cdecl;
    function dragInteraction(interaction: UIDragInteraction; previewForLiftingItem: UIDragItem;
      session: Pointer): UITargetedDragPreview; overload; cdecl;
    function dragInteraction(interaction: UIDragInteraction; itemsForBeginningSession: Pointer): NSArray; overload; cdecl;
    [MethodName('dragInteraction:item:willAnimateCancelWithAnimator:')]
    procedure dragInteractionItem(interaction: UIDragInteraction; item: UIDragItem; willAnimateCancelWithAnimator: Pointer); cdecl;
    [MethodName('dragInteraction:prefersFullSizePreviewsForSession:')]
    function dragInteractionPrefersFullSizePreviewsForSession(interaction: UIDragInteraction;
      prefersFullSizePreviewsForSession: Pointer): Boolean; cdecl;
    [MethodName('dragInteraction:session:didEndWithOperation:')]
    procedure dragInteractionSession(interaction: UIDragInteraction; session: Pointer; didEndWithOperation: UIDropOperation); cdecl;
    [MethodName('dragInteraction:sessionAllowsMoveOperation:')]
    function dragInteractionSessionAllowsMoveOperation(interaction: UIDragInteraction; sessionAllowsMoveOperation: Pointer): Boolean; cdecl;
    [MethodName('dragInteraction:sessionDidMove:')]
    procedure dragInteractionSessionDidMove(interaction: UIDragInteraction; sessionDidMove: Pointer); cdecl;
    [MethodName('dragInteraction:sessionDidTransferItems:')]
    procedure dragInteractionSessionDidTransferItems(interaction: UIDragInteraction; sessionDidTransferItems: Pointer); cdecl;
    [MethodName('dragInteraction:sessionIsRestrictedToDraggingApplication:')]
    function dragInteractionSessionIsRestrictedToDraggingApplication(interaction: UIDragInteraction;
      sessionIsRestrictedToDraggingApplication: Pointer): Boolean; cdecl;
    [MethodName('dragInteraction:sessionWillBegin:')]
    procedure dragInteractionSessionWillBegin(interaction: UIDragInteraction; sessionWillBegin: Pointer); cdecl;
  end;

  UITextDraggable = interface(IObjectiveC)
    ['{15B1EABC-6002-4227-B919-836FE1F69685}']
    function isTextDragActive: Boolean; cdecl;
    procedure setTextDragDelegate(textDragDelegate: Pointer); cdecl;
    procedure setTextDragOptions(textDragOptions: UITextDragOptions); cdecl;
    function textDragDelegate: Pointer; cdecl;
    function textDragInteraction: UIDragInteraction; cdecl;
    function textDragOptions: UITextDragOptions; cdecl;
  end;

  UITextDragDelegate = interface(IObjectiveC)
    ['{5413C95B-06CF-4EA7-8CE9-F9334A661089}']
    procedure textDraggableView(textDraggableView: UIView; dragSessionDidEnd: Pointer; withOperation: UIDropOperation); overload; cdecl;
    procedure textDraggableView(textDraggableView: UIView; willAnimateLiftWithAnimator: Pointer; session: Pointer); overload; cdecl;
    function textDraggableView(textDraggableView: UIView; dragPreviewForLiftingItem: UIDragItem;
      session: Pointer): UITargetedDragPreview; overload; cdecl;
    function textDraggableView(textDraggableView: UIView; itemsForDrag: Pointer): NSArray; overload; cdecl;
    [MethodName('textDraggableView:dragSessionWillBegin:')]
    procedure textDraggableViewDragSessionWillBegin(textDraggableView: UIView; dragSessionWillBegin: Pointer); cdecl;
  end;

  UITextDragRequest = interface(IObjectiveC)
    ['{45A7D871-146F-4CED-84C3-59BFD835C9CA}']
    function dragRange: UITextRange; cdecl;
    function dragSession: Pointer; cdecl;
    function existingItems: NSArray; cdecl;
    function isSelected: Boolean; cdecl;
    function suggestedItems: NSArray; cdecl;
  end;

  UITextDropProposalClass = interface(UIDropProposalClass)
    ['{B0473706-8F72-48E0-8180-839B25ADC2B4}']
  end;

  UITextDropProposal = interface(UIDropProposal)
    ['{16F0830D-BD2C-4ECF-B454-89CB2BA111D6}']
    function dropAction: UITextDropAction; cdecl;
    function dropPerformer: UITextDropPerformer; cdecl;
    function dropProgressMode: UITextDropProgressMode; cdecl;
    procedure setDropAction(dropAction: UITextDropAction); cdecl;
    procedure setDropPerformer(dropPerformer: UITextDropPerformer); cdecl;
    procedure setDropProgressMode(dropProgressMode: UITextDropProgressMode); cdecl;
    procedure setUseFastSameViewOperations(useFastSameViewOperations: Boolean); cdecl;
    function useFastSameViewOperations: Boolean; cdecl;
  end;
  TUITextDropProposal = class(TOCGenericImport<UITextDropProposalClass, UITextDropProposal>) end;

  UIPasteConfigurationClass = interface(NSObjectClass)
    ['{5E2B9E34-5F25-46EA-B2DE-741858BFA899}']
  end;

  UIPasteConfiguration = interface(NSObject)
    ['{92DE76BF-2E9F-40B4-AB69-CC53FB46B3BF}']
    function acceptableTypeIdentifiers: NSArray; cdecl;
    procedure addAcceptableTypeIdentifiers(acceptableTypeIdentifiers: NSArray); cdecl;
    procedure addTypeIdentifiersForAcceptingClass(aClass: Pointer); cdecl;
    function initWithAcceptableTypeIdentifiers(acceptableTypeIdentifiers: NSArray): Pointer; cdecl;
    function initWithTypeIdentifiersForAcceptingClass(aClass: Pointer): Pointer; cdecl;
    procedure setAcceptableTypeIdentifiers(acceptableTypeIdentifiers: NSArray); cdecl;
  end;
  TUIPasteConfiguration = class(TOCGenericImport<UIPasteConfigurationClass, UIPasteConfiguration>) end;

  UITextPasteDelegate = interface(IObjectiveC)
    ['{0E12EDC9-99D9-4B89-8ECD-5942CBBA0DB5}']
    function textPasteConfigurationSupporting(textPasteConfigurationSupporting: Pointer; performPasteOfAttributedString: NSAttributedString;
      toRange: UITextRange): UITextRange; overload; cdecl;
    function textPasteConfigurationSupporting(textPasteConfigurationSupporting: Pointer; combineItemAttributedStrings: NSArray;
      forRange: UITextRange): NSAttributedString; overload; cdecl;
    procedure textPasteConfigurationSupporting(textPasteConfigurationSupporting: Pointer; transformPasteItem: Pointer); overload; cdecl;
    [MethodName('textPasteConfigurationSupporting:shouldAnimatePasteOfAttributedString:toRange:')]
    function textPasteConfigurationSupportingShouldAnimatePasteOfAttributedString(textPasteConfigurationSupporting: Pointer;
      shouldAnimatePasteOfAttributedString: NSAttributedString; toRange: UITextRange): Boolean; cdecl;
  end;

  UITextPasteItem = interface(IObjectiveC)
    ['{EFB1F701-275C-4AB4-89A2-5B5421478939}']
    function defaultAttributes: NSDictionary; cdecl;
    function itemProvider: NSItemProvider; cdecl;
    function localObject: Pointer; cdecl;
    procedure setAttachmentResult(textAttachment: NSTextAttachment); cdecl;
    procedure setAttributedStringResult(&string: NSAttributedString); cdecl;
    procedure setDefaultResult; cdecl;
    procedure setNoResult; cdecl;
    procedure setStringResult(&string: NSString); cdecl;
  end;

  UITextPasteConfigurationSupporting = interface(IObjectiveC)
    ['{6BF813A1-4B21-497B-BD5A-CAA3ACE1D6AD}']
    function pasteDelegate: Pointer; cdecl;
    procedure setPasteDelegate(pasteDelegate: Pointer); cdecl;
  end;

  UITextDroppable = interface(IObjectiveC)
    ['{7292DE58-0D4F-4769-8981-3E52F9767DE0}']
    function isTextDropActive: Boolean; cdecl;
    procedure setTextDropDelegate(textDropDelegate: Pointer); cdecl;
    function textDropDelegate: Pointer; cdecl;
    function textDropInteraction: UIDropInteraction; cdecl;
  end;

  UITextDropDelegate = interface(IObjectiveC)
    ['{788CDD10-9426-4722-AED9-FD99765CB16F}']
    function textDroppableView(textDroppableView: UIView;
      previewForDroppingAllItemsWithDefault: UITargetedDragPreview): UITargetedDragPreview; overload; cdecl;
    function textDroppableView(textDroppableView: UIView; willBecomeEditableForDrop: Pointer): UITextDropEditability; overload; cdecl;
    [MethodName('textDroppableView:dropSessionDidEnd:')]
    procedure textDroppableViewDropSessionDidEnd(textDroppableView: UIView; dropSessionDidEnd: Pointer); cdecl;
    [MethodName('textDroppableView:dropSessionDidEnter:')]
    procedure textDroppableViewDropSessionDidEnter(textDroppableView: UIView; dropSessionDidEnter: Pointer); cdecl;
    [MethodName('textDroppableView:dropSessionDidExit:')]
    procedure textDroppableViewDropSessionDidExit(textDroppableView: UIView; dropSessionDidExit: Pointer); cdecl;
    [MethodName('textDroppableView:dropSessionDidUpdate:')]
    procedure textDroppableViewDropSessionDidUpdate(textDroppableView: UIView; dropSessionDidUpdate: Pointer); cdecl;
    [MethodName('textDroppableView:proposalForDrop:')]
    function textDroppableViewProposalForDrop(textDroppableView: UIView; proposalForDrop: Pointer): UITextDropProposal; cdecl;
    [MethodName('textDroppableView:willPerformDrop:')]
    procedure textDroppableViewWillPerformDrop(textDroppableView: UIView; willPerformDrop: Pointer); cdecl;
  end;

  UITextDropRequest = interface(IObjectiveC)
    ['{B8D239A3-CA1D-4056-8DF1-D19F4F595C2A}']
    function dropPosition: UITextPosition; cdecl;
    function dropSession: Pointer; cdecl;
    function isSameView: Boolean; cdecl;
    function suggestedProposal: UITextDropProposal; cdecl;
  end;

  UIContentSizeCategoryAdjusting = interface(IObjectiveC)
    ['{53E2F603-3A04-40DF-A0E4-037B181A1612}']
    function adjustsFontForContentSizeCategory: Boolean; cdecl;
    procedure setAdjustsFontForContentSizeCategory(adjustsFontForContentSizeCategory: Boolean); cdecl;
  end;

  UILetterformAwareAdjusting = interface(IObjectiveC)
    ['{1A37BA4C-3DE6-41A6-A024-765B5EFFFCE1}']
    procedure setSizingRule(sizingRule: UILetterformAwareSizingRule); cdecl;
    function sizingRule: UILetterformAwareSizingRule; cdecl;
  end;

  UITextFieldClass = interface(UIControlClass)
    ['{179F5AED-12D0-4989-8B55-2BA7BDDF08DA}']
  end;

  UITextField = interface(UIControl)
    ['{606A83C7-024D-4344-BEB3-B59E5130C14B}']
    function adjustsFontSizeToFitWidth: Boolean; cdecl;
    function allowsEditingTextAttributes: Boolean; cdecl;
    function attributedPlaceholder: NSAttributedString; cdecl;
    function attributedText: NSAttributedString; cdecl;
    function background: UIImage; cdecl;
    function borderRectForBounds(bounds: CGRect): CGRect; cdecl;
    function borderStyle: UITextBorderStyle; cdecl;
    function clearButtonMode: UITextFieldViewMode; cdecl;
    function clearButtonRectForBounds(bounds: CGRect): CGRect; cdecl;
    function clearsOnBeginEditing: Boolean; cdecl;
    function clearsOnInsertion: Boolean; cdecl;
    function defaultTextAttributes: NSDictionary; cdecl;
    function delegate: Pointer; cdecl;
    function disabledBackground: UIImage; cdecl;
    procedure drawPlaceholderInRect(rect: CGRect); cdecl;
    procedure drawTextInRect(rect: CGRect); cdecl; // API_DEPRECATED("This method is no longer called.", ios(2.0, 15.0), visionos(1.0, 1.0))
    function editingRectForBounds(bounds: CGRect): CGRect; cdecl;
    function font: UIFont; cdecl;
    function inputAccessoryView: UIView; cdecl;
    function inputView: UIView; cdecl;
    function interactionState: Pointer; cdecl;
    function isEditing: Boolean; cdecl;
    function leftView: UIView; cdecl;
    function leftViewMode: UITextFieldViewMode; cdecl;
    function leftViewRectForBounds(bounds: CGRect): CGRect; cdecl;
    function minimumFontSize: CGFloat; cdecl;
    function placeholder: NSString; cdecl;
    function placeholderRectForBounds(bounds: CGRect): CGRect; cdecl;
    function rightView: UIView; cdecl;
    function rightViewMode: UITextFieldViewMode; cdecl;
    function rightViewRectForBounds(bounds: CGRect): CGRect; cdecl;
    procedure setAdjustsFontSizeToFitWidth(adjustsFontSizeToFitWidth: Boolean); cdecl;
    procedure setAllowsEditingTextAttributes(allowsEditingTextAttributes: Boolean); cdecl;
    procedure setAttributedPlaceholder(attributedPlaceholder: NSAttributedString); cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    procedure setBackground(background: UIImage); cdecl;
    procedure setBorderStyle(borderStyle: UITextBorderStyle); cdecl;
    procedure setClearButtonMode(clearButtonMode: UITextFieldViewMode); cdecl;
    procedure setClearsOnBeginEditing(clearsOnBeginEditing: Boolean); cdecl;
    procedure setClearsOnInsertion(clearsOnInsertion: Boolean); cdecl;
    procedure setDefaultTextAttributes(defaultTextAttributes: NSDictionary); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDisabledBackground(disabledBackground: UIImage); cdecl;
    procedure setFont(font: UIFont); cdecl;
    procedure setInputAccessoryView(inputAccessoryView: UIView); cdecl;
    procedure setInputView(inputView: UIView); cdecl;
    procedure setInteractionState(interactionState: Pointer); cdecl;
    procedure setLeftView(leftView: UIView); cdecl;
    procedure setLeftViewMode(leftViewMode: UITextFieldViewMode); cdecl;
    procedure setMinimumFontSize(minimumFontSize: CGFloat); cdecl;
    procedure setPlaceholder(placeholder: NSString); cdecl;
    procedure setRightView(rightView: UIView); cdecl;
    procedure setRightViewMode(rightViewMode: UITextFieldViewMode); cdecl;
    procedure setText(text: NSString); cdecl;
    procedure setTextAlignment(textAlignment: NSTextAlignment); cdecl;
    procedure setTextColor(textColor: UIColor); cdecl;
    procedure setTypingAttributes(typingAttributes: NSDictionary); cdecl;
    function text: NSString; cdecl;
    function textAlignment: NSTextAlignment; cdecl;
    function textColor: UIColor; cdecl;
    function textRectForBounds(bounds: CGRect): CGRect; cdecl;
    function typingAttributes: NSDictionary; cdecl;
  end;
  TUITextField = class(TOCGenericImport<UITextFieldClass, UITextField>) end;

  UITextFieldDelegate = interface(IObjectiveC)
    ['{C4C3F280-C4D3-42F6-B807-D060A01360FF}']
    function textField(textField: UITextField; shouldChangeCharactersInRange: NSRange; replacementString: NSString): Boolean; overload; cdecl;
    function textField(textField: UITextField; editMenuForCharactersInRange: NSRange; suggestedActions: NSArray): UIMenu; overload; cdecl;
    procedure textField(textField: UITextField; willPresentEditMenuWithAnimator: Pointer); overload; cdecl;
    procedure textFieldDidBeginEditing(textField: UITextField); cdecl;
    procedure textFieldDidChangeSelection(textField: UITextField); cdecl;
    procedure textFieldDidEndEditing(textField: UITextField; reason: UITextFieldDidEndEditingReason); overload; cdecl;
    procedure textFieldDidEndEditing(textField: UITextField); overload; cdecl;
    function textFieldShouldBeginEditing(textField: UITextField): Boolean; cdecl;
    function textFieldShouldClear(textField: UITextField): Boolean; cdecl;
    function textFieldShouldEndEditing(textField: UITextField): Boolean; cdecl;
    function textFieldShouldReturn(textField: UITextField): Boolean; cdecl;
    [MethodName('textField:willDismissEditMenuWithAnimator:')]
    procedure textFieldWillDismissEditMenuWithAnimator(textField: UITextField; willDismissEditMenuWithAnimator: Pointer); cdecl;
  end;

  UIActionSheetClass = interface(UIViewClass)
    ['{C92A792C-34A9-4068-AAE1-7279BB2BBD0C}']
  end;

  UIActionSheet = interface(UIView)
    ['{DA7C4AC5-53F4-41B6-A70B-5BA27683A926}']
    function actionSheetStyle: UIActionSheetStyle; cdecl;
    function addButtonWithTitle(title: NSString): NSInteger; cdecl;
    function buttonTitleAtIndex(buttonIndex: NSInteger): NSString; cdecl;
    function cancelButtonIndex: NSInteger; cdecl;
    function delegate: Pointer; cdecl;
    function destructiveButtonIndex: NSInteger; cdecl;
    procedure dismissWithClickedButtonIndex(buttonIndex: NSInteger; animated: Boolean); cdecl;
    function firstOtherButtonIndex: NSInteger; cdecl;
    function initWithTitle(title: NSString; delegate: Pointer; cancelButtonTitle: NSString; destructiveButtonTitle: NSString;
      otherButtonTitles: NSString): Pointer; cdecl;
    function isVisible: Boolean; cdecl;
    function numberOfButtons: NSInteger; cdecl;
    procedure setActionSheetStyle(actionSheetStyle: UIActionSheetStyle); cdecl;
    procedure setCancelButtonIndex(cancelButtonIndex: NSInteger); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDestructiveButtonIndex(destructiveButtonIndex: NSInteger); cdecl;
    procedure setTitle(title: NSString); cdecl;
    procedure showFromBarButtonItem(item: UIBarButtonItem; animated: Boolean); cdecl;
    procedure showFromRect(rect: CGRect; inView: UIView; animated: Boolean); cdecl;
    procedure showFromTabBar(view: UITabBar); cdecl;
    procedure showFromToolbar(view: UIToolbar); cdecl;
    procedure showInView(view: UIView); cdecl;
    function title: NSString; cdecl;
  end;
  TUIActionSheet = class(TOCGenericImport<UIActionSheetClass, UIActionSheet>) end;

  UIActionSheetDelegate = interface(IObjectiveC)
    ['{19A32D02-9148-47DE-A10F-1EC1539A4651}']
    procedure actionSheet(actionSheet: UIActionSheet; clickedButtonAtIndex: NSInteger); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 8.3))
    procedure actionSheetCancel(actionSheet: UIActionSheet); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 8.3))
    [MethodName('actionSheet:didDismissWithButtonIndex:')]
    procedure actionSheetDidDismissWithButtonIndex(actionSheet: UIActionSheet; didDismissWithButtonIndex: NSInteger); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 8.3))
    [MethodName('actionSheet:willDismissWithButtonIndex:')]
    procedure actionSheetWillDismissWithButtonIndex(actionSheet: UIActionSheet; willDismissWithButtonIndex: NSInteger); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 8.3))
    procedure didPresentActionSheet(actionSheet: UIActionSheet); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 8.3))
    procedure willPresentActionSheet(actionSheet: UIActionSheet); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 8.3))
  end;

  UIAlertViewClass = interface(UIViewClass)
    ['{89638025-A821-48E0-991C-F4A183C3A904}']
  end;

  UIAlertView = interface(UIView)
    ['{6F0BB0F2-4DFB-496F-BB54-2687219D57D0}']
    function addButtonWithTitle(title: NSString): NSInteger; cdecl;
    function alertViewStyle: UIAlertViewStyle; cdecl;
    function buttonTitleAtIndex(buttonIndex: NSInteger): NSString; cdecl;
    function cancelButtonIndex: NSInteger; cdecl;
    function delegate: Pointer; cdecl;
    procedure dismissWithClickedButtonIndex(buttonIndex: NSInteger; animated: Boolean); cdecl;
    function firstOtherButtonIndex: NSInteger; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    function initWithTitle(title: NSString; message: NSString; delegate: Pointer; cancelButtonTitle: NSString;
      otherButtonTitles: NSString): Pointer; cdecl;
    function isVisible: Boolean; cdecl;
    function message: NSString; cdecl;
    function numberOfButtons: NSInteger; cdecl;
    procedure setAlertViewStyle(alertViewStyle: UIAlertViewStyle); cdecl;
    procedure setCancelButtonIndex(cancelButtonIndex: NSInteger); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setMessage(message: NSString); cdecl;
    procedure setTitle(title: NSString); cdecl;
    procedure show; cdecl;
    function textFieldAtIndex(textFieldIndex: NSInteger): UITextField; cdecl;
    function title: NSString; cdecl;
  end;
  TUIAlertView = class(TOCGenericImport<UIAlertViewClass, UIAlertView>) end;

  UIAlertViewDelegate = interface(IObjectiveC)
    ['{4385FAF1-8E08-4F14-878A-5F403B3662EC}']
    procedure alertView(alertView: UIAlertView; clickedButtonAtIndex: NSInteger); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 9.0))
    procedure alertViewCancel(alertView: UIAlertView); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 9.0))
    [MethodName('alertView:didDismissWithButtonIndex:')]
    procedure alertViewDidDismissWithButtonIndex(alertView: UIAlertView; didDismissWithButtonIndex: NSInteger); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 9.0))
    function alertViewShouldEnableFirstOtherButton(alertView: UIAlertView): Boolean; cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 9.0))
    [MethodName('alertView:willDismissWithButtonIndex:')]
    procedure alertViewWillDismissWithButtonIndex(alertView: UIAlertView; willDismissWithButtonIndex: NSInteger); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 9.0))
    procedure didPresentAlertView(alertView: UIAlertView); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 9.0))
    procedure willPresentAlertView(alertView: UIAlertView); cdecl; // API_DEPRECATED("Use UIAlertController instead.", ios(2.0, 9.0))
  end;

  UIApplicationClass = interface(UIResponderClass)
    ['{9C5BD9E6-C347-45FA-B54C-598E8BFE70E5}']
    {class} procedure registerObjectForStateRestoration(&object: Pointer; restorationIdentifier: NSString); cdecl;
    {class} function sharedApplication: UIApplication; cdecl;
  end;

  UIApplication = interface(UIResponder)
    ['{F1B77CB8-44A0-4112-87B3-F69EF864CD4D}']
    procedure activateSceneSessionForRequest(request: UISceneSessionActivationRequest; errorHandler: TUIApplicationBlockMethod3); cdecl;
    function alternateIconName: NSString; cdecl;
    function applicationIconBadgeNumber: NSInteger; cdecl; // API_DEPRECATED("Use -[UNUserNotificationCenter setBadgeCount:withCompletionHandler:] instead.", ios(2.0, 17.0))
    function applicationState: UIApplicationState; cdecl;
    function applicationSupportsShakeToEdit: Boolean; cdecl;
    function backgroundRefreshStatus: UIBackgroundRefreshStatus; cdecl;
    function backgroundTimeRemaining: NSTimeInterval; cdecl;
    function beginBackgroundTaskWithExpirationHandler(handler: TUIApplicationBlockMethod2): UIBackgroundTaskIdentifier; cdecl;
    function beginBackgroundTaskWithName(taskName: NSString; expirationHandler: TUIApplicationBlockMethod2): UIBackgroundTaskIdentifier; cdecl;
    procedure beginIgnoringInteractionEvents; cdecl; // API_DEPRECATED("Use UIView's userInteractionEnabled property instead", ios(2.0, 13.0))
    procedure beginReceivingRemoteControlEvents; cdecl;
    procedure cancelAllLocalNotifications; cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenter removeAllPendingNotificationRequests]", ios(4.0, 10.0))
    procedure cancelLocalNotification(notification: UILocalNotification); cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenter removePendingNotificationRequestsWithIdentifiers:]", ios(4.0, 10.0))
    function canOpenURL(url: NSURL): Boolean; cdecl;
    procedure clearKeepAliveTimeout; cdecl; // API_DEPRECATED("Please use PushKit for VoIP applications instead of calling this method", ios(4.0, 9.0))
    procedure completeStateRestoration; cdecl;
    function connectedScenes: NSSet; cdecl;
    function currentUserNotificationSettings: UIUserNotificationSettings; cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:] and -[UNUserNotificationCenter getNotificationCategoriesWithCompletionHandler:]", ios(8.0, 10.0))
    function delegate: Pointer; cdecl;
    function enabledRemoteNotificationTypes: UIRemoteNotificationType; cdecl; // API_DEPRECATED("Use -[UIApplication isRegisteredForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:] to retrieve user-enabled remote notification and user notification settings", ios(3.0, 8.0))
    procedure endBackgroundTask(identifier: UIBackgroundTaskIdentifier); cdecl;
    procedure endIgnoringInteractionEvents; cdecl; // API_DEPRECATED("Use UIView's userInteractionEnabled property instead", ios(2.0, 13.0))
    procedure endReceivingRemoteControlEvents; cdecl;
    procedure extendStateRestoration; cdecl;
    procedure ignoreSnapshotOnNextApplicationLaunch; cdecl;
    function isIdleTimerDisabled: Boolean; cdecl;
    function isIgnoringInteractionEvents: Boolean; cdecl; // API_DEPRECATED("Use UIView's userInteractionEnabled property instead", ios(2.0, 13.0))
    function isNetworkActivityIndicatorVisible: Boolean; cdecl; // API_DEPRECATED("Provide a custom network activity UI in your app if desired.", ios(2.0, 13.0))
    function isProtectedDataAvailable: Boolean; cdecl;
    function isProximitySensingEnabled: Boolean; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function isRegisteredForRemoteNotifications: Boolean; cdecl;
    function isStatusBarHidden: Boolean; cdecl; // API_DEPRECATED("Use the statusBarManager property of the window scene instead.", ios(2.0, 13.0))
    function keyWindow: UIWindow; cdecl; // API_DEPRECATED("Should not be used for applications that support multiple scenes as it returns a key window across all connected scenes", ios(2.0, 13.0))
    function openSessions: NSSet; cdecl;
    function openURL(url: NSURL): Boolean; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("openURL:options:completionHandler:", ios(2.0, 10.0))
    procedure openURL(url: NSURL; options: NSDictionary; completionHandler: TUIApplicationBlockMethod1); overload; cdecl;
    function preferredContentSizeCategory: UIContentSizeCategory; cdecl;
    procedure presentLocalNotificationNow(notification: UILocalNotification); cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]", ios(4.0, 10.0))
    procedure registerForRemoteNotifications; cdecl;
    procedure registerForRemoteNotificationTypes(types: UIRemoteNotificationType); cdecl; // API_DEPRECATED("Use -[UIApplication registerForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]", ios(3.0, 8.0))
    procedure registerUserNotificationSettings(notificationSettings: UIUserNotificationSettings); cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:] and -[UNUserNotificationCenter setNotificationCategories:]", ios(8.0, 10.0))
    procedure requestSceneSessionActivation(sceneSession: UISceneSession; userActivity: NSUserActivity; options: UISceneActivationRequestOptions;
      errorHandler: TUIApplicationBlockMethod3); cdecl; // API_DEPRECATED("Please use activateSceneSessionForRequest:errorHandler:", ios(13.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    procedure requestSceneSessionDestruction(sceneSession: UISceneSession; options: UISceneDestructionRequestOptions;
      errorHandler: TUIApplicationBlockMethod3); cdecl;
    procedure requestSceneSessionRefresh(sceneSession: UISceneSession); cdecl;
    function scheduledLocalNotifications: NSArray; cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenter getPendingNotificationRequestsWithCompletionHandler:]", ios(4.0, 10.0))
    procedure scheduleLocalNotification(notification: UILocalNotification); cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]", ios(4.0, 10.0))
    function sendAction(action: SEL; &to: Pointer; from: Pointer; forEvent: UIEvent): Boolean; cdecl;
    procedure sendEvent(event: UIEvent); cdecl;
    procedure setAlternateIconName(alternateIconName: NSString; completionHandler: TUIApplicationBlockMethod3); cdecl;
    procedure setApplicationIconBadgeNumber(applicationIconBadgeNumber: NSInteger); cdecl; // API_DEPRECATED("Use -[UNUserNotificationCenter setBadgeCount:withCompletionHandler:] instead.", ios(2.0, 17.0))
    procedure setApplicationSupportsShakeToEdit(applicationSupportsShakeToEdit: Boolean); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setIdleTimerDisabled(idleTimerDisabled: Boolean); cdecl;
    function setKeepAliveTimeout(timeout: NSTimeInterval; handler: TUIApplicationBlockMethod2): Boolean; cdecl; // API_DEPRECATED("Please use PushKit for VoIP applications instead of calling this method", ios(4.0, 9.0))
    procedure setMinimumBackgroundFetchInterval(minimumBackgroundFetchInterval: NSTimeInterval); cdecl; // API_DEPRECATED("Use a BGAppRefreshTask in the BackgroundTasks framework instead", ios(7.0, 13.0), tvos(11.0, 13.0))
    procedure setNetworkActivityIndicatorVisible(networkActivityIndicatorVisible: Boolean); cdecl; // API_DEPRECATED("Provide a custom network activity UI in your app if desired.", ios(2.0, 13.0))
    procedure setNewsstandIconImage(image: UIImage); cdecl; // API_DEPRECATED("Newsstand apps now behave like normal apps on SpringBoard", ios(5.0, 9.0))
    procedure setProximitySensingEnabled(proximitySensingEnabled: Boolean); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setScheduledLocalNotifications(scheduledLocalNotifications: NSArray); cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenter getPendingNotificationRequestsWithCompletionHandler:]", ios(4.0, 10.0))
    procedure setShortcutItems(shortcutItems: NSArray); cdecl;
    procedure setStatusBarHidden(statusBarHidden: Boolean); overload; cdecl; // API_DEPRECATED("Use -[UIViewController prefersStatusBarHidden]", ios(2.0, 9.0))
    procedure setStatusBarHidden(hidden: Boolean; animated: Boolean); overload; cdecl; // API_DEPRECATED("Use -[UIViewController prefersStatusBarHidden]", ios(2.0, 3.2))
    procedure setStatusBarHidden(hidden: Boolean; withAnimation: UIStatusBarAnimation); overload; cdecl; // API_DEPRECATED("Use -[UIViewController prefersStatusBarHidden]", ios(3.2, 9.0))
    procedure setStatusBarOrientation(statusBarOrientation: UIInterfaceOrientation); overload; cdecl; // API_DEPRECATED("Explicit setting of the status bar orientation is more limited in iOS 6.0 and later", ios(2.0, 9.0))
    procedure setStatusBarOrientation(interfaceOrientation: UIInterfaceOrientation; animated: Boolean); overload; cdecl; // API_DEPRECATED("Explicit setting of the status bar orientation is more limited in iOS 6.0 and later", ios(2.0, 9.0))
    procedure setStatusBarStyle(statusBarStyle: UIStatusBarStyle; animated: Boolean); overload; cdecl; // API_DEPRECATED("Use -[UIViewController preferredStatusBarStyle]", ios(2.0, 9.0))
    procedure setStatusBarStyle(statusBarStyle: UIStatusBarStyle); overload; cdecl; // API_DEPRECATED("Use -[UIViewController preferredStatusBarStyle]", ios(2.0, 9.0))
    function shortcutItems: NSArray; cdecl;
    function statusBarFrame: CGRect; cdecl; // API_DEPRECATED("Use the statusBarManager property of the window scene instead.", ios(2.0, 13.0))
    function statusBarOrientation: UIInterfaceOrientation; cdecl; // API_DEPRECATED("Use the interfaceOrientation property of the window scene instead.", ios(2.0, 13.0))
    function statusBarOrientationAnimationDuration: NSTimeInterval; cdecl; // API_DEPRECATED("Use viewWillTransitionToSize:withTransitionCoordinator: instead.", ios(2.0, 13.0))
    function statusBarStyle: UIStatusBarStyle; cdecl; // API_DEPRECATED("Use the statusBarManager property of the window scene instead.", ios(2.0, 13.0))
    function supportedInterfaceOrientationsForWindow(window: UIWindow): UIInterfaceOrientationMask; cdecl;
    function supportsAlternateIcons: Boolean; cdecl;
    function supportsMultipleScenes: Boolean; cdecl;
    procedure unregisterForRemoteNotifications; cdecl;
    function userInterfaceLayoutDirection: UIUserInterfaceLayoutDirection; cdecl;
    function windows: NSArray; cdecl; // API_DEPRECATED("Use UIWindowScene.windows on a relevant window scene instead", ios(2.0, 15.0), visionos(1.0, 1.0))
  end;
  TUIApplication = class(TOCGenericImport<UIApplicationClass, UIApplication>) end;

  UIApplicationDelegate = interface(IObjectiveC)
    ['{95CBFF5F-D1B1-4536-971D-9FECA820DD0D}']
    procedure application(application: UIApplication; performActionForShortcutItem: UIApplicationShortcutItem;
      completionHandler: Pointer); overload; cdecl;
    procedure application(application: UIApplication; handleEventsForBackgroundURLSession: NSString; completionHandler: Pointer); overload; cdecl;
    function application(application: UIApplication; handlerForIntent: INIntent): Pointer; overload; cdecl;
    procedure application(application: UIApplication; handleIntent: INIntent; completionHandler: Pointer); overload; cdecl; // API_DEPRECATED("Use application:handlerForIntent: instead", ios(11.0, 14.0), visionos(1.0, 1.0))
    function application(application: UIApplication; supportedInterfaceOrientationsForWindow: UIWindow): UIInterfaceOrientationMask; overload; cdecl;
    procedure application(application: UIApplication; handleActionWithIdentifier: NSString; forRemoteNotification: NSDictionary;
      withResponseInfo: NSDictionary; completionHandler: Pointer); overload; cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]", ios(9.0, 10.0))
    procedure application(application: UIApplication; handleActionWithIdentifier: NSString; forRemoteNotification: NSDictionary;
      completionHandler: Pointer); overload; cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]", ios(8.0, 10.0))
    procedure application(application: UIApplication; handleActionWithIdentifier: NSString; forLocalNotification: UILocalNotification;
      withResponseInfo: NSDictionary; completionHandler: Pointer); overload; cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]", ios(9.0, 10.0))
    procedure application(application: UIApplication; didReceiveRemoteNotification: NSDictionary; fetchCompletionHandler: Pointer); overload; cdecl;
    procedure application(application: UIApplication; performFetchWithCompletionHandler: Pointer); overload; cdecl; // API_DEPRECATED("Use a BGAppRefreshTask in the BackgroundTasks framework instead", ios(7.0, 13.0), tvos(11.0, 13.0))
    procedure application(application: UIApplication; didFailToContinueUserActivityWithType: NSString; error: NSError); overload; cdecl;
    procedure application(application: UIApplication; didUpdateUserActivity: NSUserActivity); overload; cdecl;
    procedure application(application: UIApplication; userDidAcceptCloudKitShareWithMetadata: CKShareMetadata); overload; cdecl;
    function application(application: UIApplication; configurationForConnectingSceneSession: UISceneSession;
      options: UISceneConnectionOptions): UISceneConfiguration; overload; cdecl;
    procedure application(application: UIApplication; didDiscardSceneSessions: NSSet); overload; cdecl;
    function application(application: UIApplication;
      shouldAllowExtensionPointIdentifier: UIApplicationExtensionPointIdentifier): Boolean; overload; cdecl;
    function application(application: UIApplication; viewControllerWithRestorationIdentifierPath: NSArray;
      coder: NSCoder): UIViewController; overload; cdecl;
    function application(application: UIApplication; shouldSaveSecureApplicationState: NSCoder): Boolean; overload; cdecl;
    [MethodName('application:willContinueUserActivityWithType:')]
    function applicationWillContinueUserActivityWithType(application: UIApplication;
      willContinueUserActivityWithType: NSString): Boolean; overload; cdecl;
    function application(application: UIApplication; continueUserActivity: NSUserActivity; restorationHandler: Pointer): Boolean; overload; cdecl;
    procedure application(application: UIApplication; handleActionWithIdentifier: NSString; forLocalNotification: UILocalNotification;
      completionHandler: Pointer); overload; cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]", ios(8.0, 10.0))
    function application(application: UIApplication; handleOpenURL: NSURL): Boolean; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("application:openURL:options:", ios(2.0, 9.0))
    procedure application(application: UIApplication; willChangeStatusBarOrientation: UIInterfaceOrientation;
      duration: NSTimeInterval); overload; cdecl; // API_DEPRECATED("Use viewWillTransitionToSize:withTransitionCoordinator: instead.", ios(2.0, 13.0))
    procedure application(application: UIApplication; didChangeStatusBarOrientation: UIInterfaceOrientation); overload; cdecl; // API_DEPRECATED("Use viewWillTransitionToSize:withTransitionCoordinator: instead.", ios(2.0, 13.0))
    function application(app: UIApplication; openURL: NSURL; options: NSDictionary): Boolean; overload; cdecl;
    function application(application: UIApplication; openURL: NSURL; sourceApplication: NSString; annotation: Pointer): Boolean; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("application:openURL:options:", ios(4.2, 9.0))
    function application(application: UIApplication; willFinishLaunchingWithOptions: NSDictionary): Boolean; overload; cdecl;
    procedure application(application: UIApplication; willChangeStatusBarFrame: CGRect); overload; cdecl; // API_DEPRECATED("Use viewWillTransitionToSize:withTransitionCoordinator: instead.", ios(2.0, 13.0))
    procedure application(application: UIApplication; didRegisterForRemoteNotificationsWithDeviceToken: NSData); overload; cdecl;
    procedure application(application: UIApplication; didFailToRegisterForRemoteNotificationsWithError: NSError); overload; cdecl;
    procedure application(application: UIApplication; didReceiveLocalNotification: UILocalNotification); overload; cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]", ios(4.0, 10.0))
    procedure application(application: UIApplication; didRegisterUserNotificationSettings: UIUserNotificationSettings); overload; cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]", ios(8.0, 10.0))
    procedure applicationDidBecomeActive(application: UIApplication); cdecl;
    [MethodName('application:didChangeStatusBarFrame:')]
    procedure applicationDidChangeStatusBarFrame(application: UIApplication; didChangeStatusBarFrame: CGRect); cdecl; // API_DEPRECATED("Use viewWillTransitionToSize:withTransitionCoordinator: instead.", ios(2.0, 13.0))
    [MethodName('application:didDecodeRestorableStateWithCoder:')]
    procedure applicationDidDecodeRestorableStateWithCoder(application: UIApplication; didDecodeRestorableStateWithCoder: NSCoder); cdecl;
    procedure applicationDidEnterBackground(application: UIApplication); cdecl;
    procedure applicationDidFinishLaunching(application: UIApplication); cdecl;
    [MethodName('application:didFinishLaunchingWithOptions:')]
    function applicationDidFinishLaunchingWithOptions(application: UIApplication; didFinishLaunchingWithOptions: NSDictionary): Boolean; cdecl;
    procedure applicationDidReceiveMemoryWarning(application: UIApplication); cdecl;
    [MethodName('application:didReceiveRemoteNotification:')]
    procedure applicationDidReceiveRemoteNotification(application: UIApplication; didReceiveRemoteNotification: NSDictionary); cdecl; // API_DEPRECATED("Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:] for user visible notifications and -[UIApplicationDelegate application:didReceiveRemoteNotification:fetchCompletionHandler:] for silent remote notifications", ios(3.0, 10.0))
    [MethodName('application:handleWatchKitExtensionRequest:reply:')]
    procedure applicationHandleWatchKitExtensionRequest(application: UIApplication; handleWatchKitExtensionRequest: NSDictionary;
      reply: Pointer); cdecl;
    procedure applicationProtectedDataDidBecomeAvailable(application: UIApplication); cdecl;
    procedure applicationProtectedDataWillBecomeUnavailable(application: UIApplication); cdecl;
    function applicationShouldAutomaticallyLocalizeKeyCommands(application: UIApplication): Boolean; cdecl;
    procedure applicationShouldRequestHealthAuthorization(application: UIApplication); cdecl;
    [MethodName('application:shouldRestoreApplicationState:')]
    function applicationShouldRestoreApplicationState(application: UIApplication; shouldRestoreApplicationState: NSCoder): Boolean; cdecl; // API_DEPRECATED("Use application:shouldRestoreSecureApplicationState: instead", ios(6.0, 13.2))
    [MethodName('application:shouldRestoreSecureApplicationState:')]
    function applicationShouldRestoreSecureApplicationState(application: UIApplication; shouldRestoreSecureApplicationState: NSCoder): Boolean; cdecl;
    [MethodName('application:shouldSaveApplicationState:')]
    function applicationShouldSaveApplicationState(application: UIApplication; shouldSaveApplicationState: NSCoder): Boolean; cdecl; // API_DEPRECATED("Use application:shouldSaveSecureApplicationState: instead", ios(6.0, 13.2))
    procedure applicationSignificantTimeChange(application: UIApplication); cdecl;
    [MethodName('application:willEncodeRestorableStateWithCoder:')]
    procedure applicationWillEncodeRestorableStateWithCoder(application: UIApplication; willEncodeRestorableStateWithCoder: NSCoder); cdecl;
    procedure applicationWillEnterForeground(application: UIApplication); cdecl;
    procedure applicationWillResignActive(application: UIApplication); cdecl;
    procedure applicationWillTerminate(application: UIApplication); cdecl;
    procedure setWindow(window: UIWindow); cdecl;
    function window: UIWindow; cdecl;
  end;

  UIViewControllerRestoration = interface(IObjectiveC)
    ['{FCCF6861-5EEA-4C25-B2BB-47A39DB3BFCA}']
    {class} function viewControllerWithRestorationIdentifierPath(identifierComponents: NSArray; coder: NSCoder): UIViewController; cdecl;
  end;

  UIDataSourceModelAssociation = interface(IObjectiveC)
    ['{291A25B0-600F-4A6A-8F03-E49C47BB9951}']
    function indexPathForElementWithModelIdentifier(identifier: NSString; inView: UIView): NSIndexPath; cdecl;
    function modelIdentifierForElementAtIndexPath(idx: NSIndexPath; inView: UIView): NSString; cdecl;
  end;

  UIStateRestoring = interface(IObjectiveC)
    ['{991C33EC-CCCB-439D-BEF8-903BFC39BC92}']
    procedure applicationFinishedRestoringState; cdecl;
    procedure decodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    procedure encodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    function objectRestorationClass: Pointer; cdecl;
    function restorationParent: Pointer; cdecl;
  end;

  UIObjectRestoration = interface(IObjectiveC)
    ['{276A2ED2-D0BD-471C-937F-46E02BFA5785}']
    {class} function objectWithRestorationIdentifierPath(identifierComponents: NSArray; coder: NSCoder): Pointer; cdecl;
  end;

  UISceneClass = interface(UIResponderClass)
    ['{7D1514FF-5AFF-4C0F-8BB4-2BE007DC8AA7}']
    {class} function new: Pointer; cdecl;
  end;

  UIScene = interface(UIResponder)
    ['{5A00344A-FB39-4014-83B5-B3E994097EB6}']
    function activationConditions: UISceneActivationConditions; cdecl;
    function activationState: UISceneActivationState; cdecl;
    procedure completeStateRestoration; cdecl;
    function delegate: Pointer; cdecl;
    procedure extendStateRestoration; cdecl;
    procedure getDefaultAudioSessionWithCompletionHandler(handler: TUISceneBlockMethod2); cdecl;
    function initWithSession(session: UISceneSession; connectionOptions: UISceneConnectionOptions): Pointer; cdecl;
    procedure openURL(url: NSURL; options: UISceneOpenExternalURLOptions; completionHandler: TUISceneBlockMethod1); cdecl;
    function pointerLockState: UIPointerLockState; cdecl;
    function session: UISceneSession; cdecl;
    procedure setActivationConditions(activationConditions: UISceneActivationConditions); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setSubtitle(subtitle: NSString); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function subtitle: NSString; cdecl;
    function title: NSString; cdecl;
  end;
  TUIScene = class(TOCGenericImport<UISceneClass, UIScene>) end;

  UISceneDelegate = interface(IObjectiveC)
    ['{61A40790-43BB-4FB9-86A8-FC3790671784}']
    procedure scene(scene: UIScene; openURLContexts: NSSet); overload; cdecl;
    procedure scene(scene: UIScene; restoreInteractionStateWithUserActivity: NSUserActivity); overload; cdecl;
    procedure scene(scene: UIScene; willContinueUserActivityWithType: NSString); overload; cdecl;
    procedure scene(scene: UIScene; didFailToContinueUserActivityWithType: NSString; error: NSError); overload; cdecl;
    procedure scene(scene: UIScene; willConnectToSession: UISceneSession; options: UISceneConnectionOptions); overload; cdecl;
    [MethodName('scene:continueUserActivity:')]
    procedure sceneContinueUserActivity(scene: UIScene; continueUserActivity: NSUserActivity); cdecl;
    procedure sceneDidBecomeActive(scene: UIScene); cdecl;
    procedure sceneDidDisconnect(scene: UIScene); cdecl;
    procedure sceneDidEnterBackground(scene: UIScene); cdecl;
    [MethodName('scene:didUpdateUserActivity:')]
    procedure sceneDidUpdateUserActivity(scene: UIScene; didUpdateUserActivity: NSUserActivity); cdecl;
    procedure sceneWillEnterForeground(scene: UIScene); cdecl;
    procedure sceneWillResignActive(scene: UIScene); cdecl;
    function stateRestorationActivityForScene(scene: UIScene): NSUserActivity; cdecl;
  end;

  UIPointerLockStateClass = interface(NSObjectClass)
    ['{11785E4B-21A1-4B87-8B77-9BCEA30DAC1D}']
    {class} function new: Pointer; cdecl;
  end;

  UIPointerLockState = interface(NSObject)
    ['{CA55687B-42A6-4FF4-A9ED-0CF17A174FF1}']
    function isLocked: Boolean; cdecl;
  end;
  TUIPointerLockState = class(TOCGenericImport<UIPointerLockStateClass, UIPointerLockState>) end;

  UIContentContainer = interface(IObjectiveC)
    ['{EE6C1AC0-8B94-433A-A032-84A45912B419}']
    function preferredContentSize: CGSize; cdecl;
    procedure preferredContentSizeDidChangeForChildContentContainer(container: Pointer); cdecl;
    function sizeForChildContentContainer(container: Pointer; withParentContainerSize: CGSize): CGSize; cdecl;
    procedure systemLayoutFittingSizeDidChangeForChildContentContainer(container: Pointer); cdecl;
    procedure viewWillTransitionToSize(size: CGSize; withTransitionCoordinator: Pointer); cdecl;
    procedure willTransitionToTraitCollection(newCollection: UITraitCollection; withTransitionCoordinator: Pointer); cdecl;
  end;

  UIViewControllerClass = interface(UIResponderClass)
    ['{58D78FAB-C76E-48E1-99AC-342B409B9C83}']
    {class} procedure attemptRotationToDeviceOrientation; cdecl; // API_DEPRECATED("Please use instance method `setNeedsUpdateOfSupportedInterfaceOrientations`.", ios(5.0, 16.0), visionos(1.0, 1.0))
  end;

  UIViewController = interface(UIResponder)
    ['{CD5D0CF4-54CB-4850-A59F-B2040DADBC8E}']
    function activePresentationController: UIPresentationController; cdecl;
    procedure addChildViewController(childController: UIViewController); cdecl;
    function additionalSafeAreaInsets: UIEdgeInsets; cdecl;
    procedure addKeyCommand(keyCommand: UIKeyCommand); cdecl;
    function allowedChildViewControllersForUnwindingFromSource(source: UIStoryboardUnwindSegueSource): NSArray; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    procedure applicationFinishedRestoringState; cdecl;
    function automaticallyAdjustsScrollViewInsets: Boolean; cdecl; // API_DEPRECATED("Use UIScrollView's contentInsetAdjustmentBehavior instead", ios(7.0,11.0),tvos(7.0,11.0))
    function automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers: Boolean; cdecl; // API_DEPRECATED("", ios(5.0, 6.0))
    procedure beginAppearanceTransition(isAppearing: Boolean; animated: Boolean); cdecl;
    function bottomLayoutGuide: Pointer; cdecl; // API_DEPRECATED("Use view.safeAreaLayoutGuide.bottomAnchor instead of bottomLayoutGuide.topAnchor", ios(7.0,11.0))
    function canPerformUnwindSegueAction(action: SEL; fromViewController: UIViewController; sender: Pointer): Boolean; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    [MethodName('canPerformUnwindSegueAction:fromViewController:withSender:')]
    function canPerformUnwindSegueActionFromViewController(action: SEL; fromViewController: UIViewController; withSender: Pointer): Boolean; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("canPerformUnwindSegueAction:fromViewController:sender:", ios(6.0, 13.0), tvos(9.0, 13.0))
    function childViewControllerContainingSegueSource(source: UIStoryboardUnwindSegueSource): UIViewController; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    function childViewControllerForHomeIndicatorAutoHidden: UIViewController; cdecl;
    function childViewControllerForPointerLock: UIViewController; cdecl;
    function childViewControllerForPreferredContainerBackgroundStyle: UIViewController; cdecl;
    function childViewControllerForScreenEdgesDeferringSystemGestures: UIViewController; cdecl;
    function childViewControllerForStatusBarHidden: UIViewController; cdecl; // API_DEPRECATED("Has no effect on visionOS", visionos(1.0, 1.0))
    function childViewControllerForStatusBarStyle: UIViewController; cdecl; // API_DEPRECATED("Has no effect on visionOS", visionos(1.0, 1.0))
    function childViewControllerForUserInterfaceStyle: UIViewController; cdecl;
    function childViewControllers: NSArray; cdecl;
    procedure collapseSecondaryViewController(secondaryViewController: UIViewController; forSplitViewController: UISplitViewController); cdecl;
    function contentScrollViewForEdge(edge: NSDirectionalRectEdge): UIScrollView; cdecl;
    function contentSizeForViewInPopover: CGSize; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("preferredContentSize", ios(3.2, 7.0))
    function contentUnavailableConfiguration: Pointer; cdecl;
    function contentUnavailableConfigurationState: UIContentUnavailableConfigurationState; cdecl;
    procedure decodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    function definesPresentationContext: Boolean; cdecl;
    procedure didAnimateFirstHalfOfRotationToInterfaceOrientation(toInterfaceOrientation: UIInterfaceOrientation); cdecl; // API_DEPRECATED("", ios(2.0, 5.0))
    procedure didMoveToParentViewController(parent: UIViewController); cdecl;
    procedure didReceiveMemoryWarning; cdecl;
    procedure didRotateFromInterfaceOrientation(fromInterfaceOrientation: UIInterfaceOrientation); cdecl; // API_DEPRECATED("", ios(2.0, 8.0))
    function disablesAutomaticKeyboardDismissal: Boolean; cdecl;
    procedure dismissModalViewControllerAnimated(animated: Boolean); cdecl; // API_DEPRECATED("", ios(2.0, 6.0))
    procedure dismissViewControllerAnimated(flag: Boolean; completion: TUIViewControllerBlockMethod1); cdecl;
    function edgesForExtendedLayout: UIRectEdge; cdecl;
    function editButtonItem: UIBarButtonItem; cdecl;
    procedure encodeRestorableStateWithCoder(coder: NSCoder); cdecl;
    procedure endAppearanceTransition; cdecl;
    function extendedLayoutIncludesOpaqueBars: Boolean; cdecl;
    function extensionContext: NSExtensionContext; cdecl;
    function focusGroupIdentifier: NSString; cdecl;
    function hidesBottomBarWhenPushed: Boolean; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    function interactionActivityTrackingBaseName: NSString; cdecl;
    function interfaceOrientation: UIInterfaceOrientation; cdecl; // API_DEPRECATED("", ios(2.0, 8.0))
    function isBeingDismissed: Boolean; cdecl;
    function isBeingPresented: Boolean; cdecl;
    function isEditing: Boolean; cdecl;
    function isModalInPopover: Boolean; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("modalInPresentation", ios(3.2, 13.0))
    function isModalInPresentation: Boolean; cdecl;
    function isMovingFromParentViewController: Boolean; cdecl;
    function isMovingToParentViewController: Boolean; cdecl;
    function isViewLoaded: Boolean; cdecl;
    procedure loadView; cdecl;
    procedure loadViewIfNeeded; cdecl;
    function modalPresentationCapturesStatusBarAppearance: Boolean; cdecl;
    function modalPresentationStyle: UIModalPresentationStyle; cdecl;
    function modalTransitionStyle: UIModalTransitionStyle; cdecl;
    function modalViewController: UIViewController; cdecl; // API_DEPRECATED("", ios(2.0, 6.0))
    function navigationController: UINavigationController; cdecl;
    function navigationItem: UINavigationItem; cdecl;
    function nibBundle: NSBundle; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    function nibName: NSString; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    function overrideTraitCollectionForChildViewController(childViewController: UIViewController): UITraitCollection; cdecl; // API_DEPRECATED("Use the traitOverrides property on the child view controller instead", ios(8.0, 17.0), visionos(1.0, 1.0))
    function overrideUserInterfaceStyle: UIUserInterfaceStyle; cdecl;
    function parentViewController: UIViewController; cdecl;
    function performsActionsWhilePresentingModally: Boolean; cdecl;
    procedure performSegueWithIdentifier(identifier: NSString; sender: Pointer); cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    function popoverPresentationController: UIPopoverPresentationController; cdecl;
    function preferredContainerBackgroundStyle: UIContainerBackgroundStyle; cdecl;
    function preferredContentSize: CGSize; cdecl;
    function preferredInterfaceOrientationForPresentation: UIInterfaceOrientation; cdecl;
    function preferredScreenEdgesDeferringSystemGestures: UIRectEdge; cdecl;
    function preferredStatusBarStyle: UIStatusBarStyle; cdecl; // API_DEPRECATED("Has no effect on visionOS", visionos(1.0, 1.0))
    function preferredStatusBarUpdateAnimation: UIStatusBarAnimation; cdecl; // API_DEPRECATED("Has no effect on visionOS", visionos(1.0, 1.0))
    function preferredUserInterfaceStyle: UIUserInterfaceStyle; cdecl;
    function prefersHomeIndicatorAutoHidden: Boolean; cdecl;
    function prefersPointerLocked: Boolean; cdecl;
    function prefersStatusBarHidden: Boolean; cdecl; // API_DEPRECATED("Has no effect on visionOS", visionos(1.0, 1.0))
    procedure prepareForSegue(segue: UIStoryboardSegue; sender: Pointer); cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    function presentationController: UIPresentationController; cdecl;
    function presentedViewController: UIViewController; cdecl;
    function presentingViewController: UIViewController; cdecl;
    procedure presentModalViewController(modalViewController: UIViewController; animated: Boolean); cdecl; // API_DEPRECATED("", ios(2.0, 6.0))
    procedure presentViewController(viewControllerToPresent: UIViewController; animated: Boolean; completion: TUIViewControllerBlockMethod1); cdecl;
    function previewActionItems: NSArray; cdecl; // API_DEPRECATED("UIViewControllerPreviewing is deprecated. Please use UIContextMenuInteraction.", ios(9.0, 13.0))
    function providesPresentationContextTransitionStyle: Boolean; cdecl;
    function registerForPreviewingWithDelegate(delegate: Pointer; sourceView: UIView): Pointer; cdecl; // API_DEPRECATED("UIViewControllerPreviewing is deprecated. Please use UIContextMenuInteraction.", ios(9.0, 13.0))
    procedure removeFromParentViewController; cdecl;
    procedure removeKeyCommand(keyCommand: UIKeyCommand); cdecl;
    function restorationClass: Pointer; cdecl;
    function restorationIdentifier: NSString; cdecl;
    function restoresFocusAfterTransition: Boolean; cdecl;
    function rotatingFooterView: UIView; cdecl; // API_DEPRECATED("Footer views are animated along with the rest of the view hierarchy", ios(2.0, 8.0))
    function rotatingHeaderView: UIView; cdecl; // API_DEPRECATED("Header views are animated along with the rest of the view hierarchy", ios(2.0, 8.0))
    function searchDisplayController: UISearchDisplayController; cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    function segueForUnwindingToViewController(toViewController: UIViewController; fromViewController: UIViewController;
      identifier: NSString): UIStoryboardSegue; cdecl; // API_DEPRECATED("", ios(6.0, 9.0))
    function separateSecondaryViewControllerForSplitViewController(splitViewController: UISplitViewController): UIViewController; cdecl;
    procedure setAdditionalSafeAreaInsets(additionalSafeAreaInsets: UIEdgeInsets); cdecl;
    procedure setAutomaticallyAdjustsScrollViewInsets(automaticallyAdjustsScrollViewInsets: Boolean); cdecl; // API_DEPRECATED("Use UIScrollView's contentInsetAdjustmentBehavior instead", ios(7.0,11.0),tvos(7.0,11.0))
    procedure setContentScrollView(scrollView: UIScrollView; forEdge: NSDirectionalRectEdge); cdecl;
    procedure setContentSizeForViewInPopover(contentSizeForViewInPopover: CGSize); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("preferredContentSize", ios(3.2, 7.0))
    procedure setContentUnavailableConfiguration(contentUnavailableConfiguration: Pointer); cdecl;
    procedure setDefinesPresentationContext(definesPresentationContext: Boolean); cdecl;
    procedure setEdgesForExtendedLayout(edgesForExtendedLayout: UIRectEdge); cdecl;
    procedure setEditing(editing: Boolean); overload; cdecl;
    procedure setEditing(editing: Boolean; animated: Boolean); overload; cdecl;
    procedure setExtendedLayoutIncludesOpaqueBars(extendedLayoutIncludesOpaqueBars: Boolean); cdecl;
    procedure setFocusGroupIdentifier(focusGroupIdentifier: NSString); cdecl;
    procedure setHidesBottomBarWhenPushed(hidesBottomBarWhenPushed: Boolean); cdecl;
    procedure setInteractionActivityTrackingBaseName(interactionActivityTrackingBaseName: NSString); cdecl;
    procedure setModalInPopover(modalInPopover: Boolean); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("modalInPresentation", ios(3.2, 13.0))
    procedure setModalInPresentation(modalInPresentation: Boolean); cdecl;
    procedure setModalPresentationCapturesStatusBarAppearance(modalPresentationCapturesStatusBarAppearance: Boolean); cdecl;
    procedure setModalPresentationStyle(modalPresentationStyle: UIModalPresentationStyle); cdecl;
    procedure setModalTransitionStyle(modalTransitionStyle: UIModalTransitionStyle); cdecl;
    procedure setNeedsStatusBarAppearanceUpdate; cdecl;
    procedure setNeedsUpdateContentUnavailableConfiguration; cdecl;
    procedure setNeedsUpdateOfHomeIndicatorAutoHidden; cdecl;
    procedure setNeedsUpdateOfPreferredContainerBackgroundStyle; cdecl;
    procedure setNeedsUpdateOfPrefersPointerLocked; cdecl;
    procedure setNeedsUpdateOfScreenEdgesDeferringSystemGestures; cdecl;
    procedure setNeedsUpdateOfSupportedInterfaceOrientations; cdecl;
    procedure setNeedsUserInterfaceAppearanceUpdate; cdecl;
    procedure setOverrideTraitCollection(collection: UITraitCollection; forChildViewController: UIViewController); cdecl; // API_DEPRECATED("Use the traitOverrides property on the child view controller instead", ios(8.0, 17.0), visionos(1.0, 1.0))
    procedure setOverrideUserInterfaceStyle(overrideUserInterfaceStyle: UIUserInterfaceStyle); cdecl;
    procedure setPreferredContentSize(preferredContentSize: CGSize); cdecl;
    procedure setProvidesPresentationContextTransitionStyle(providesPresentationContextTransitionStyle: Boolean); cdecl;
    procedure setRestorationClass(restorationClass: Pointer); cdecl;
    procedure setRestorationIdentifier(restorationIdentifier: NSString); cdecl;
    procedure setRestoresFocusAfterTransition(restoresFocusAfterTransition: Boolean); cdecl;
    procedure setTabBarItem(tabBarItem: UITabBarItem); cdecl;
    procedure setTabBarObservedScrollView(tabBarObservedScrollView: UIScrollView); cdecl; // API_DEPRECATED("Use -setContentScrollView:forEdge: instead.", tvos(13.0,API_TO_BE_DEPRECATED))
    procedure setTitle(title: NSString); cdecl;
    procedure setToolbarItems(toolbarItems: NSArray); overload; cdecl;
    procedure setToolbarItems(toolbarItems: NSArray; animated: Boolean); overload; cdecl;
    procedure setTransitioningDelegate(transitioningDelegate: Pointer); cdecl;
    procedure setView(view: UIView); cdecl;
    procedure setViewRespectsSystemMinimumLayoutMargins(viewRespectsSystemMinimumLayoutMargins: Boolean); cdecl;
    procedure setWantsFullScreenLayout(wantsFullScreenLayout: Boolean); cdecl; // API_DEPRECATED("", ios(3.0, 7.0))
    function sheetPresentationController: UISheetPresentationController; cdecl;
    function shouldAutomaticallyForwardAppearanceMethods: Boolean; cdecl;
    function shouldAutomaticallyForwardRotationMethods: Boolean; cdecl; // API_DEPRECATED("Manually forward viewWillTransitionToSize:withTransitionCoordinator: if necessary", ios(6.0, 8.0))
    function shouldAutorotate: Boolean; cdecl; // API_DEPRECATED("Update supported interface orientations and call setNeedsUpdateOfSupportedInterfaceOrientations to indicate a change.", ios(6.0, 16.0), visionos(1.0, 1.0))
    function shouldAutorotateToInterfaceOrientation(toInterfaceOrientation: UIInterfaceOrientation): Boolean; cdecl; // API_DEPRECATED("", ios(2.0, 6.0))
    function shouldPerformSegueWithIdentifier(identifier: NSString; sender: Pointer): Boolean; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    procedure showDetailViewController(vc: UIViewController; sender: Pointer); cdecl;
    procedure showViewController(vc: UIViewController; sender: Pointer); cdecl;
    function splitViewController: UISplitViewController; cdecl;
    function storyboard: UIStoryboard; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    function supportedInterfaceOrientations: UIInterfaceOrientationMask; cdecl;
    function systemMinimumLayoutMargins: NSDirectionalEdgeInsets; cdecl;
    function tabBarController: UITabBarController; cdecl;
    function tabBarItem: UITabBarItem; cdecl;
    function tabBarObservedScrollView: UIScrollView; cdecl; // API_DEPRECATED("Use -setContentScrollView:forEdge: instead.", tvos(13.0,API_TO_BE_DEPRECATED))
    function targetViewControllerForAction(action: SEL; sender: Pointer): UIViewController; cdecl;
    function title: NSString; cdecl;
    function toolbarItems: NSArray; cdecl;
    function topLayoutGuide: Pointer; cdecl; // API_DEPRECATED("Use view.safeAreaLayoutGuide.topAnchor instead of topLayoutGuide.bottomAnchor", ios(7.0,11.0), tvos(7.0,11.0))
    function traitOverrides: Pointer; cdecl;
    function transitionCoordinator: Pointer; cdecl;
    procedure transitionFromViewController(fromViewController: UIViewController; toViewController: UIViewController; duration: NSTimeInterval;
      options: UIViewAnimationOptions; animations: TUIViewControllerBlockMethod1; completion: TUIViewControllerBlockMethod2); cdecl;
    function transitioningDelegate: Pointer; cdecl;
    procedure unregisterForPreviewingWithContext(previewing: Pointer); cdecl; // API_DEPRECATED("UIViewControllerPreviewing is deprecated. Please use UIContextMenuInteraction.", ios(9.0, 13.0))
    procedure unwindForSegue(unwindSegue: UIStoryboardSegue; towardsViewController: UIViewController); cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    procedure updateContentUnavailableConfigurationUsingState(state: UIContentUnavailableConfigurationState); cdecl;
    procedure updateTraitsIfNeeded; cdecl;
    procedure updateViewConstraints; cdecl;
    function view: UIView; cdecl;
    function viewControllerForUnwindSegueAction(action: SEL; fromViewController: UIViewController; withSender: Pointer): UIViewController; cdecl; // API_DEPRECATED("", ios(6.0, 9.0))
    procedure viewDidAppear(animated: Boolean); cdecl;
    procedure viewDidDisappear(animated: Boolean); cdecl;
    procedure viewDidLayoutSubviews; cdecl;
    procedure viewDidLoad; cdecl;
    procedure viewDidUnload; cdecl; // API_DEPRECATED("", ios(3.0, 6.0))
    function viewIfLoaded: UIView; cdecl;
    procedure viewIsAppearing(animated: Boolean); cdecl;
    procedure viewLayoutMarginsDidChange; cdecl;
    function viewRespectsSystemMinimumLayoutMargins: Boolean; cdecl;
    procedure viewSafeAreaInsetsDidChange; cdecl;
    procedure viewWillAppear(animated: Boolean); cdecl;
    procedure viewWillDisappear(animated: Boolean); cdecl;
    procedure viewWillLayoutSubviews; cdecl;
    procedure viewWillUnload; cdecl; // API_DEPRECATED("", ios(5.0, 6.0))
    function wantsFullScreenLayout: Boolean; cdecl; // API_DEPRECATED("", ios(3.0, 7.0))
    procedure willAnimateFirstHalfOfRotationToInterfaceOrientation(toInterfaceOrientation: UIInterfaceOrientation; duration: NSTimeInterval); cdecl; // API_DEPRECATED("", ios(2.0, 5.0))
    procedure willAnimateRotationToInterfaceOrientation(toInterfaceOrientation: UIInterfaceOrientation; duration: NSTimeInterval); cdecl; // API_DEPRECATED("Implement viewWillTransitionToSize:withTransitionCoordinator: instead", ios(3.0, 8.0))
    procedure willAnimateSecondHalfOfRotationFromInterfaceOrientation(fromInterfaceOrientation: UIInterfaceOrientation;
      duration: NSTimeInterval); cdecl; // API_DEPRECATED("", ios(2.0, 5.0))
    procedure willMoveToParentViewController(parent: UIViewController); cdecl;
    procedure willRotateToInterfaceOrientation(toInterfaceOrientation: UIInterfaceOrientation; duration: NSTimeInterval); cdecl; // API_DEPRECATED("Implement viewWillTransitionToSize:withTransitionCoordinator: instead", ios(2.0, 8.0))
  end;
  TUIViewController = class(TOCGenericImport<UIViewControllerClass, UIViewController>) end;

  UIViewControllerPreviewing = interface(IObjectiveC)
    ['{FDDD41C9-7091-4A20-8CBF-B1138CAB19DD}']
    function delegate: Pointer; cdecl; // API_DEPRECATED("UIViewControllerPreviewing is deprecated. Please use UIContextMenuInteraction.", ios(9.0, 13.0))
    function previewingGestureRecognizerForFailureRelationship: UIGestureRecognizer; cdecl; // API_DEPRECATED("UIViewControllerPreviewing is deprecated. Please use UIContextMenuInteraction.", ios(9.0, 13.0))
    procedure setSourceRect(sourceRect: CGRect); cdecl; // API_DEPRECATED("UIViewControllerPreviewing is deprecated. Please use UIContextMenuInteraction.", ios(9.0, 13.0))
    function sourceRect: CGRect; cdecl; // API_DEPRECATED("UIViewControllerPreviewing is deprecated. Please use UIContextMenuInteraction.", ios(9.0, 13.0))
    function sourceView: UIView; cdecl; // API_DEPRECATED("UIViewControllerPreviewing is deprecated. Please use UIContextMenuInteraction.", ios(9.0, 13.0))
  end;

  UIViewControllerPreviewingDelegate = interface(IObjectiveC)
    ['{BF502487-1C1D-400F-B4B1-C5B5C6107408}']
    function previewingContext(previewingContext: Pointer; viewControllerForLocation: CGPoint): UIViewController; overload; cdecl; // API_DEPRECATED("UIViewControllerPreviewing is deprecated. Please use UIContextMenuInteraction.", ios(9.0, 13.0))
    procedure previewingContext(previewingContext: Pointer; commitViewController: UIViewController); overload; cdecl; // API_DEPRECATED("UIViewControllerPreviewing is deprecated. Please use UIContextMenuInteraction.", ios(9.0, 13.0))
  end;

  UIPreviewActionItem = interface(IObjectiveC)
    ['{75A95684-43F8-4AC9-8BCC-E098A34909C0}']
    function title: NSString; cdecl;
  end;

  UIPreviewActionClass = interface(NSObjectClass)
    ['{71AC406E-5625-462D-A3D6-4634A92A5E18}']
    {class} function actionWithTitle(title: NSString; style: UIPreviewActionStyle; handler: TUIPreviewActionBlockMethod1): Pointer; cdecl;
  end;

  UIPreviewAction = interface(NSObject)
    ['{64E9636F-121E-456A-B29D-9B53F0481D98}']
    function handler: TUIPreviewActionBlockMethod2; cdecl;
  end;
  TUIPreviewAction = class(TOCGenericImport<UIPreviewActionClass, UIPreviewAction>) end;

  UIPreviewActionGroupClass = interface(NSObjectClass)
    ['{88D3D2E8-3F3F-4496-8388-1475E4205ABD}']
    {class} function actionGroupWithTitle(title: NSString; style: UIPreviewActionStyle; actions: NSArray): Pointer; cdecl;
  end;

  UIPreviewActionGroup = interface(NSObject)
    ['{B387334C-78CD-4BDC-998D-F4073E47740E}']
  end;
  TUIPreviewActionGroup = class(TOCGenericImport<UIPreviewActionGroupClass, UIPreviewActionGroup>) end;

  UISpringLoadedInteractionSupporting = interface(IObjectiveC)
    ['{4A6B2E49-0872-4CEC-8045-B1E0EFD851FB}']
    function isSpringLoaded: Boolean; cdecl;
    procedure setSpringLoaded(springLoaded: Boolean); cdecl;
  end;

  UIAlertActionClass = interface(NSObjectClass)
    ['{8EA3A081-1B5F-4B3B-B891-B7E788329CA9}']
    {class} function actionWithTitle(title: NSString; style: UIAlertActionStyle; handler: TUIAlertActionBlockMethod1): Pointer; cdecl;
  end;

  UIAlertAction = interface(NSObject)
    ['{76EF7EF6-0FDD-4C8D-94BA-4753989C4730}']
    function isEnabled: Boolean; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    function style: UIAlertActionStyle; cdecl;
    function title: NSString; cdecl;
  end;
  TUIAlertAction = class(TOCGenericImport<UIAlertActionClass, UIAlertAction>) end;

  UIAlertControllerClass = interface(UIViewControllerClass)
    ['{DE1EFC24-44C5-4C23-A123-6ECD9CE26BC2}']
    {class} function alertControllerWithTitle(title: NSString; message: NSString; preferredStyle: UIAlertControllerStyle): Pointer; cdecl;
  end;

  UIAlertController = interface(UIViewController)
    ['{0547CE16-55C2-4786-88B3-9DD932BE1046}']
    function actions: NSArray; cdecl;
    procedure addAction(action: UIAlertAction); cdecl;
    procedure addTextFieldWithConfigurationHandler(configurationHandler: TUIAlertControllerBlockMethod1); cdecl;
    function message: NSString; cdecl;
    function preferredAction: UIAlertAction; cdecl;
    function preferredStyle: UIAlertControllerStyle; cdecl;
    procedure setMessage(message: NSString); cdecl;
    procedure setPreferredAction(preferredAction: UIAlertAction); cdecl;
    procedure setSeverity(severity: UIAlertControllerSeverity); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function severity: UIAlertControllerSeverity; cdecl;
    function textFields: NSArray; cdecl;
    function title: NSString; cdecl;
  end;
  TUIAlertController = class(TOCGenericImport<UIAlertControllerClass, UIAlertController>) end;

  UIAccessibilityIdentification = interface(IObjectiveC)
    ['{730E0346-E581-432D-9B98-6A2C06CEF8DE}']
    function accessibilityIdentifier: NSString; cdecl;
    procedure setAccessibilityIdentifier(accessibilityIdentifier: NSString); cdecl;
  end;

  UIAccessibilityElementClass = interface(UIResponderClass)
    ['{6D9E3968-06F1-43DB-BF20-A50DD4A55C28}']
  end;

  UIAccessibilityElement = interface(UIResponder)
    ['{77C7F200-123D-418A-8353-62090682AA0F}']
    function accessibilityContainer: Pointer; cdecl;
    function accessibilityFrame: CGRect; cdecl;
    function accessibilityFrameInContainerSpace: CGRect; cdecl;
    function accessibilityHint: NSString; cdecl;
    function accessibilityLabel: NSString; cdecl;
    function accessibilityTraits: UIAccessibilityTraits; cdecl;
    function accessibilityValue: NSString; cdecl;
    function initWithAccessibilityContainer(container: Pointer): Pointer; cdecl;
    function isAccessibilityElement: Boolean; cdecl;
    procedure setAccessibilityContainer(accessibilityContainer: Pointer); cdecl;
    procedure setAccessibilityFrame(accessibilityFrame: CGRect); cdecl;
    procedure setAccessibilityFrameInContainerSpace(accessibilityFrameInContainerSpace: CGRect); cdecl;
    procedure setAccessibilityHint(accessibilityHint: NSString); cdecl;
    procedure setAccessibilityLabel(accessibilityLabel: NSString); cdecl;
    procedure setAccessibilityTraits(accessibilityTraits: UIAccessibilityTraits); cdecl;
    procedure setAccessibilityValue(accessibilityValue: NSString); cdecl;
    procedure setIsAccessibilityElement(isAccessibilityElement: Boolean); cdecl;
  end;
  TUIAccessibilityElement = class(TOCGenericImport<UIAccessibilityElementClass, UIAccessibilityElement>) end;

  UIGuidedAccessRestrictionDelegate = interface(IObjectiveC)
    ['{E9592081-8CC0-48FA-84CD-FA509D8FB56A}']
    function detailTextForGuidedAccessRestrictionWithIdentifier(restrictionIdentifier: NSString): NSString; cdecl;
    function guidedAccessRestrictionIdentifiers: NSArray; cdecl;
    procedure guidedAccessRestrictionWithIdentifier(restrictionIdentifier: NSString; didChangeState: UIGuidedAccessRestrictionState); cdecl;
    function textForGuidedAccessRestrictionWithIdentifier(restrictionIdentifier: NSString): NSString; cdecl;
  end;

  UIAccessibilityLocationDescriptorClass = interface(NSObjectClass)
    ['{4E3276D2-9CCC-4D95-B910-5318680DAFC7}']
    {class} function new: Pointer; cdecl;
  end;

  UIAccessibilityLocationDescriptor = interface(NSObject)
    ['{2769AAE4-6D3F-4C26-8BCC-2AE996D63EFB}']
    function attributedName: NSAttributedString; cdecl;
    function initWithAttributedName(attributedName: NSAttributedString; point: CGPoint; inView: UIView): Pointer; cdecl;
    function initWithName(name: NSString; view: UIView): Pointer; overload; cdecl;
    function initWithName(name: NSString; point: CGPoint; inView: UIView): Pointer; overload; cdecl;
    function name: NSString; cdecl;
    function point: CGPoint; cdecl;
    function view: UIView; cdecl;
  end;
  TUIAccessibilityLocationDescriptor = class(TOCGenericImport<UIAccessibilityLocationDescriptorClass, UIAccessibilityLocationDescriptor>) end;

  UIAccessibilityReadingContent = interface(IObjectiveC)
    ['{E9DCB496-1C16-4E91-8826-707CA6CC3741}']
    function accessibilityAttributedContentForLineNumber(lineNumber: NSInteger): NSAttributedString; cdecl;
    function accessibilityAttributedPageContent: NSAttributedString; cdecl;
    function accessibilityContentForLineNumber(lineNumber: NSInteger): NSString; cdecl;
    function accessibilityFrameForLineNumber(lineNumber: NSInteger): CGRect; cdecl;
    function accessibilityLineNumberForPoint(point: CGPoint): NSInteger; cdecl;
    function accessibilityPageContent: NSString; cdecl;
  end;

  UISymbolEffectCompletionContextClass = interface(NSObjectClass)
    ['{4CBF67F1-5D75-45BD-85F5-CB9EDF188193}']
    {class} function new: Pointer; cdecl;
  end;

  UISymbolEffectCompletionContext = interface(NSObject)
    ['{A8A946F1-D977-4C5B-B293-93FC8A3444A4}']
    function contentTransition: NSSymbolContentTransition; cdecl;
    function effect: NSSymbolEffect; cdecl;
    function isFinished: Boolean; cdecl;
    function sender: Pointer; cdecl;
  end;
  TUISymbolEffectCompletionContext = class(TOCGenericImport<UISymbolEffectCompletionContextClass, UISymbolEffectCompletionContext>) end;

  UIImageViewClass = interface(UIViewClass)
    ['{DE73FF5A-6F13-403D-8830-BC7CD624067D}']
  end;

  UIImageView = interface(UIView)
    ['{FB7830C4-943D-4AE5-8A63-D46DB099E0E7}']
    procedure addSymbolEffect(symbolEffect: NSSymbolEffect); overload; cdecl;
    procedure addSymbolEffect(symbolEffect: NSSymbolEffect; options: NSSymbolEffectOptions; animated: Boolean;
      completion: UISymbolEffectCompletion); overload; cdecl;
    procedure addSymbolEffect(symbolEffect: NSSymbolEffect; options: NSSymbolEffectOptions; animated: Boolean); overload; cdecl;
    procedure addSymbolEffect(symbolEffect: NSSymbolEffect; options: NSSymbolEffectOptions); overload; cdecl;
    function adjustsImageWhenAncestorFocused: Boolean; cdecl;
    function animationDuration: NSTimeInterval; cdecl;
    function animationImages: NSArray; cdecl;
    function animationRepeatCount: NSInteger; cdecl;
    function focusedFrameGuide: UILayoutGuide; cdecl;
    function highlightedAnimationImages: NSArray; cdecl;
    function highlightedImage: UIImage; cdecl;
    function image: UIImage; cdecl;
    function imageDynamicRange: UIImageDynamicRange; cdecl;
    function initWithImage(image: UIImage): Pointer; overload; cdecl;
    function initWithImage(image: UIImage; highlightedImage: UIImage): Pointer; overload; cdecl;
    function isAnimating: Boolean; cdecl;
    function isHighlighted: Boolean; cdecl;
    function isUserInteractionEnabled: Boolean; cdecl;
    function masksFocusEffectToContents: Boolean; cdecl;
    function overlayContentView: UIView; cdecl;
    function preferredImageDynamicRange: UIImageDynamicRange; cdecl;
    function preferredSymbolConfiguration: UIImageSymbolConfiguration; cdecl;
    procedure removeAllSymbolEffects; cdecl;
    procedure removeAllSymbolEffectsWithOptions(options: NSSymbolEffectOptions; animated: Boolean); overload; cdecl;
    procedure removeAllSymbolEffectsWithOptions(options: NSSymbolEffectOptions); overload; cdecl;
    procedure removeSymbolEffectOfType(symbolEffect: NSSymbolEffect; options: NSSymbolEffectOptions; animated: Boolean); overload; cdecl;
    procedure removeSymbolEffectOfType(symbolEffect: NSSymbolEffect; options: NSSymbolEffectOptions; animated: Boolean;
      completion: UISymbolEffectCompletion); overload; cdecl;
    procedure removeSymbolEffectOfType(symbolEffect: NSSymbolEffect); overload; cdecl;
    procedure removeSymbolEffectOfType(symbolEffect: NSSymbolEffect; options: NSSymbolEffectOptions); overload; cdecl;
    procedure setAdjustsImageWhenAncestorFocused(adjustsImageWhenAncestorFocused: Boolean); cdecl;
    procedure setAnimationDuration(animationDuration: NSTimeInterval); cdecl;
    procedure setAnimationImages(animationImages: NSArray); cdecl;
    procedure setAnimationRepeatCount(animationRepeatCount: NSInteger); cdecl;
    procedure setHighlighted(highlighted: Boolean); cdecl;
    procedure setHighlightedAnimationImages(highlightedAnimationImages: NSArray); cdecl;
    procedure setHighlightedImage(highlightedImage: UIImage); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setMasksFocusEffectToContents(masksFocusEffectToContents: Boolean); cdecl;
    procedure setPreferredImageDynamicRange(preferredImageDynamicRange: UIImageDynamicRange); cdecl;
    procedure setPreferredSymbolConfiguration(preferredSymbolConfiguration: UIImageSymbolConfiguration); cdecl;
    procedure setSymbolImage(symbolImage: UIImage; withContentTransition: NSSymbolContentTransition; options: NSSymbolEffectOptions;
      completion: UISymbolEffectCompletion); overload; cdecl;
    procedure setSymbolImage(symbolImage: UIImage; withContentTransition: NSSymbolContentTransition; options: NSSymbolEffectOptions); overload; cdecl;
    procedure setSymbolImage(symbolImage: UIImage; withContentTransition: NSSymbolContentTransition); overload; cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    procedure setUserInteractionEnabled(userInteractionEnabled: Boolean); cdecl;
    procedure startAnimating; cdecl;
    procedure stopAnimating; cdecl;
    function tintColor: UIColor; cdecl;
  end;
  TUIImageView = class(TOCGenericImport<UIImageViewClass, UIImageView>) end;

  UIBackgroundConfigurationClass = interface(NSObjectClass)
    ['{3CDDD4F8-42C5-421E-816E-5D51D862C717}']
    {class} function clearConfiguration: Pointer; cdecl;
    {class} function listAccompaniedSidebarCellConfiguration: Pointer; cdecl;
    {class} function listGroupedCellConfiguration: Pointer; cdecl;
    {class} function listGroupedHeaderFooterConfiguration: Pointer; cdecl;
    {class} function listPlainCellConfiguration: Pointer; cdecl;
    {class} function listPlainHeaderFooterConfiguration: Pointer; cdecl;
    {class} function listSidebarCellConfiguration: Pointer; cdecl;
    {class} function listSidebarHeaderConfiguration: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIBackgroundConfiguration = interface(NSObject)
    ['{2990711D-35E6-4D43-9793-43A5C6088ECA}']
    function backgroundColor: UIColor; cdecl;
    function backgroundColorTransformer: UIConfigurationColorTransformer; cdecl;
    function backgroundInsets: NSDirectionalEdgeInsets; cdecl;
    function cornerRadius: CGFloat; cdecl;
    function customView: UIView; cdecl;
    function edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge; cdecl;
    function image: UIImage; cdecl;
    function imageContentMode: UIViewContentMode; cdecl;
    function resolvedBackgroundColorForTintColor(tintColor: UIColor): UIColor; cdecl;
    function resolvedStrokeColorForTintColor(tintColor: UIColor): UIColor; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    procedure setBackgroundColorTransformer(backgroundColorTransformer: UIConfigurationColorTransformer); cdecl;
    procedure setBackgroundInsets(backgroundInsets: NSDirectionalEdgeInsets); cdecl;
    procedure setCornerRadius(cornerRadius: CGFloat); cdecl;
    procedure setCustomView(customView: UIView); cdecl;
    procedure setEdgesAddingLayoutMarginsToBackgroundInsets(edgesAddingLayoutMarginsToBackgroundInsets: NSDirectionalRectEdge); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setImageContentMode(imageContentMode: UIViewContentMode); cdecl;
    procedure setStrokeColor(strokeColor: UIColor); cdecl;
    procedure setStrokeColorTransformer(strokeColorTransformer: UIConfigurationColorTransformer); cdecl;
    procedure setStrokeOutset(strokeOutset: CGFloat); cdecl;
    procedure setStrokeWidth(strokeWidth: CGFloat); cdecl;
    procedure setVisualEffect(visualEffect: UIVisualEffect); cdecl;
    function strokeColor: UIColor; cdecl;
    function strokeColorTransformer: UIConfigurationColorTransformer; cdecl;
    function strokeOutset: CGFloat; cdecl;
    function strokeWidth: CGFloat; cdecl;
    function updatedConfigurationForState(state: Pointer): Pointer; cdecl;
    function visualEffect: UIVisualEffect; cdecl;
  end;
  TUIBackgroundConfiguration = class(TOCGenericImport<UIBackgroundConfigurationClass, UIBackgroundConfiguration>) end;

  UIButtonConfigurationClass = interface(NSObjectClass)
    ['{FC7F6B4D-6DCB-4FBF-95FE-4A6C4B90CCE8}']
    {class} function borderedButtonConfiguration: Pointer; cdecl;
    {class} function borderedProminentButtonConfiguration: Pointer; cdecl;
    {class} function borderedTintedButtonConfiguration: Pointer; cdecl;
    {class} function borderlessButtonConfiguration: Pointer; cdecl;
    {class} function filledButtonConfiguration: Pointer; cdecl;
    {class} function glassButtonConfiguration: Pointer; cdecl;
    {class} function grayButtonConfiguration: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
    {class} function plainButtonConfiguration: Pointer; cdecl;
    {class} function tintedButtonConfiguration: Pointer; cdecl;
    {class} function tintedGlassButtonConfiguration: Pointer; cdecl;
  end;

  UIButtonConfiguration = interface(NSObject)
    ['{18D6A47F-0900-4A41-9873-58FCBC092958}']
    function activityIndicatorColorTransformer: UIConfigurationColorTransformer; cdecl;
    function attributedSubtitle: NSAttributedString; cdecl;
    function attributedTitle: NSAttributedString; cdecl;
    function automaticallyUpdateForSelection: Boolean; cdecl;
    function background: UIBackgroundConfiguration; cdecl;
    function baseBackgroundColor: UIColor; cdecl;
    function baseForegroundColor: UIColor; cdecl;
    function buttonSize: UIButtonConfigurationSize; cdecl;
    function contentInsets: NSDirectionalEdgeInsets; cdecl;
    function cornerStyle: UIButtonConfigurationCornerStyle; cdecl;
    function image: UIImage; cdecl;
    function imageColorTransformer: UIConfigurationColorTransformer; cdecl;
    function imagePadding: CGFloat; cdecl;
    function imagePlacement: NSDirectionalRectEdge; cdecl;
    function indicator: UIButtonConfigurationIndicator; cdecl;
    function indicatorColorTransformer: UIConfigurationColorTransformer; cdecl;
    function macIdiomStyle: UIButtonConfigurationMacIdiomStyle; cdecl;
    function preferredSymbolConfigurationForImage: UIImageSymbolConfiguration; cdecl;
    procedure setActivityIndicatorColorTransformer(activityIndicatorColorTransformer: UIConfigurationColorTransformer); cdecl;
    procedure setAttributedSubtitle(attributedSubtitle: NSAttributedString); cdecl;
    procedure setAttributedTitle(attributedTitle: NSAttributedString); cdecl;
    procedure setAutomaticallyUpdateForSelection(automaticallyUpdateForSelection: Boolean); cdecl;
    procedure setBackground(background: UIBackgroundConfiguration); cdecl;
    procedure setBaseBackgroundColor(baseBackgroundColor: UIColor); cdecl;
    procedure setBaseForegroundColor(baseForegroundColor: UIColor); cdecl;
    procedure setButtonSize(buttonSize: UIButtonConfigurationSize); cdecl;
    procedure setContentInsets(contentInsets: NSDirectionalEdgeInsets); cdecl;
    procedure setCornerStyle(cornerStyle: UIButtonConfigurationCornerStyle); cdecl;
    procedure setDefaultContentInsets; cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setImageColorTransformer(imageColorTransformer: UIConfigurationColorTransformer); cdecl;
    procedure setImagePadding(imagePadding: CGFloat); cdecl;
    procedure setImagePlacement(imagePlacement: NSDirectionalRectEdge); cdecl;
    procedure setIndicator(indicator: UIButtonConfigurationIndicator); cdecl;
    procedure setIndicatorColorTransformer(indicatorColorTransformer: UIConfigurationColorTransformer); cdecl;
    procedure setMacIdiomStyle(macIdiomStyle: UIButtonConfigurationMacIdiomStyle); cdecl;
    procedure setPreferredSymbolConfigurationForImage(preferredSymbolConfigurationForImage: UIImageSymbolConfiguration); cdecl;
    procedure setShowsActivityIndicator(showsActivityIndicator: Boolean); cdecl;
    procedure setSubtitle(subtitle: NSString); cdecl;
    procedure setSubtitleLineBreakMode(subtitleLineBreakMode: NSLineBreakMode); cdecl;
    procedure setSubtitleTextAttributesTransformer(subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer); cdecl;
    procedure setTitle(title: NSString); cdecl;
    procedure setTitleAlignment(titleAlignment: UIButtonConfigurationTitleAlignment); cdecl;
    procedure setTitleLineBreakMode(titleLineBreakMode: NSLineBreakMode); cdecl;
    procedure setTitlePadding(titlePadding: CGFloat); cdecl;
    procedure setTitleTextAttributesTransformer(titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer); cdecl;
    function showsActivityIndicator: Boolean; cdecl;
    function subtitle: NSString; cdecl;
    function subtitleLineBreakMode: NSLineBreakMode; cdecl;
    function subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer; cdecl;
    function title: NSString; cdecl;
    function titleAlignment: UIButtonConfigurationTitleAlignment; cdecl;
    function titleLineBreakMode: NSLineBreakMode; cdecl;
    function titlePadding: CGFloat; cdecl;
    function titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer; cdecl;
    function updatedConfigurationForButton(button: UIButton): Pointer; cdecl;
  end;
  TUIButtonConfiguration = class(TOCGenericImport<UIButtonConfigurationClass, UIButtonConfiguration>) end;

  UIButtonClass = interface(UIControlClass)
    ['{712449FC-5FB2-4F91-935F-0387DEA10434}']
    {class} function buttonWithConfiguration(configuration: UIButtonConfiguration; primaryAction: UIAction): Pointer; cdecl;
    {class} function buttonWithType(buttonType: UIButtonType; primaryAction: UIAction): Pointer; overload; cdecl;
    {class} function buttonWithType(buttonType: UIButtonType): Pointer; overload; cdecl;
    {class} function systemButtonWithImage(image: UIImage; target: Pointer; action: SEL): Pointer; cdecl;
    {class} function systemButtonWithPrimaryAction(primaryAction: UIAction): Pointer; cdecl;
  end;

  UIButton = interface(UIControl)
    ['{49CC44CD-B107-42C5-B2A6-5A9BABF5FA98}']
    function adjustsImageWhenDisabled: Boolean; cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    function adjustsImageWhenHighlighted: Boolean; cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    function attributedTitleForState(state: UIControlState): NSAttributedString; cdecl;
    function automaticallyUpdatesConfiguration: Boolean; cdecl;
    function backgroundImageForState(state: UIControlState): UIImage; cdecl;
    function backgroundRectForBounds(bounds: CGRect): CGRect; cdecl; // API_DEPRECATED("Override layoutSubviews, call super, and position views as you desire.", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    function behavioralStyle: UIBehavioralStyle; cdecl;
    function buttonType: UIButtonType; cdecl;
    function changesSelectionAsPrimaryAction: Boolean; cdecl;
    function configuration: UIButtonConfiguration; cdecl;
    function configurationUpdateHandler: UIButtonConfigurationUpdateHandler; cdecl;
    function contentEdgeInsets: UIEdgeInsets; cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    function contentRectForBounds(bounds: CGRect): CGRect; cdecl; // API_DEPRECATED("Override layoutSubviews, call super, and position views as you desire.", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    function currentAttributedTitle: NSAttributedString; cdecl;
    function currentBackgroundImage: UIImage; cdecl;
    function currentImage: UIImage; cdecl;
    function currentPreferredSymbolConfiguration: UIImageSymbolConfiguration; cdecl;
    function currentTitle: NSString; cdecl;
    function currentTitleColor: UIColor; cdecl;
    function currentTitleShadowColor: UIColor; cdecl;
    function font: UIFont; cdecl; // API_DEPRECATED("Specify an attributed title with a custom font", ios(2.0, 3.0))
    function imageEdgeInsets: UIEdgeInsets; cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    function imageForState(state: UIControlState): UIImage; cdecl;
    function imageRectForContentRect(contentRect: CGRect): CGRect; cdecl; // API_DEPRECATED("Override layoutSubviews, call super, and position views as you desire.", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    function imageView: UIImageView; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect; primaryAction: UIAction): Pointer; overload; cdecl;
    function initWithFrame(frame: CGRect): Pointer; overload; cdecl;
    function isHeld: Boolean; cdecl;
    function isHovered: Boolean; cdecl;
    function isPointerInteractionEnabled: Boolean; cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl; // API_DEPRECATED("Specify an attributed title with a customized paragraph style", ios(2.0, 3.0))
    function menu: UIMenu; cdecl;
    function pointerStyleProvider: UIButtonPointerStyleProvider; cdecl;
    function preferredBehavioralStyle: UIBehavioralStyle; cdecl;
    function preferredMenuElementOrder: UIContextMenuConfigurationElementOrder; cdecl;
    function preferredSymbolConfigurationForImageInState(state: UIControlState): UIImageSymbolConfiguration; cdecl;
    function reversesTitleShadowWhenHighlighted: Boolean; cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    function role: UIButtonRole; cdecl;
    procedure setAdjustsImageWhenDisabled(adjustsImageWhenDisabled: Boolean); cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    procedure setAdjustsImageWhenHighlighted(adjustsImageWhenHighlighted: Boolean); cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    procedure setAttributedTitle(title: NSAttributedString; forState: UIControlState); cdecl;
    procedure setAutomaticallyUpdatesConfiguration(automaticallyUpdatesConfiguration: Boolean); cdecl;
    procedure setBackgroundImage(image: UIImage; forState: UIControlState); cdecl;
    procedure setChangesSelectionAsPrimaryAction(changesSelectionAsPrimaryAction: Boolean); cdecl;
    procedure setConfiguration(configuration: UIButtonConfiguration); cdecl;
    procedure setConfigurationUpdateHandler(configurationUpdateHandler: UIButtonConfigurationUpdateHandler); cdecl;
    procedure setContentEdgeInsets(contentEdgeInsets: UIEdgeInsets); cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    procedure setFont(font: UIFont); cdecl; // API_DEPRECATED("Specify an attributed title with a custom font", ios(2.0, 3.0))
    procedure setImage(image: UIImage; forState: UIControlState); cdecl;
    procedure setImageEdgeInsets(imageEdgeInsets: UIEdgeInsets); cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl; // API_DEPRECATED("Specify an attributed title with a customized paragraph style", ios(2.0, 3.0))
    procedure setMenu(menu: UIMenu); cdecl;
    procedure setNeedsUpdateConfiguration; cdecl;
    procedure setPointerInteractionEnabled(pointerInteractionEnabled: Boolean); cdecl;
    procedure setPointerStyleProvider(pointerStyleProvider: UIButtonPointerStyleProvider); cdecl;
    procedure setPreferredBehavioralStyle(preferredBehavioralStyle: UIBehavioralStyle); cdecl;
    procedure setPreferredMenuElementOrder(preferredMenuElementOrder: UIContextMenuConfigurationElementOrder); cdecl;
    procedure setPreferredSymbolConfiguration(configuration: UIImageSymbolConfiguration; forImageInState: UIControlState); cdecl;
    procedure setReversesTitleShadowWhenHighlighted(reversesTitleShadowWhenHighlighted: Boolean); cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration, you may customize to replicate this behavior via a configurationUpdateHandler", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    procedure setRole(role: UIButtonRole); cdecl;
    procedure setShowsTouchWhenHighlighted(showsTouchWhenHighlighted: Boolean); cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration", ios(2.0,15.0), visionos(1.0, 1.0))
    procedure setTintColor(tintColor: UIColor); cdecl;
    procedure setTitle(title: NSString; forState: UIControlState); cdecl;
    procedure setTitleColor(color: UIColor; forState: UIControlState); cdecl;
    procedure setTitleEdgeInsets(titleEdgeInsets: UIEdgeInsets); cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    procedure setTitleShadowColor(color: UIColor; forState: UIControlState); cdecl;
    procedure setTitleShadowOffset(titleShadowOffset: CGSize); cdecl; // API_DEPRECATED("Specify an attributed title with a customized shadow style", ios(2.0, 3.0))
    function showsTouchWhenHighlighted: Boolean; cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration", ios(2.0,15.0), visionos(1.0, 1.0))
    function subtitleLabel: UILabel; cdecl;
    function tintColor: UIColor; cdecl;
    function titleColorForState(state: UIControlState): UIColor; cdecl;
    function titleEdgeInsets: UIEdgeInsets; cdecl; // API_DEPRECATED("This property is ignored when using UIButtonConfiguration", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    function titleForState(state: UIControlState): NSString; cdecl;
    function titleLabel: UILabel; cdecl;
    function titleRectForContentRect(contentRect: CGRect): CGRect; cdecl; // API_DEPRECATED("Override layoutSubviews, call super, and position views as you desire.", ios(2.0,15.0), tvos(2.0,15.0), visionos(1.0, 1.0))
    function titleShadowColorForState(state: UIControlState): UIColor; cdecl;
    function titleShadowOffset: CGSize; cdecl; // API_DEPRECATED("Specify an attributed title with a customized shadow style", ios(2.0, 3.0))
    procedure updateConfiguration; cdecl;
  end;
  TUIButton = class(TOCGenericImport<UIButtonClass, UIButton>) end;

  UIAccessibilityContentSizeCategoryImageAdjusting = interface(IObjectiveC)
    ['{8FC77359-AE4D-4B07-8944-94511EEDAE9F}']
    function adjustsImageSizeForAccessibilityContentSizeCategory: Boolean; cdecl;
    procedure setAdjustsImageSizeForAccessibilityContentSizeCategory(adjustsImageSizeForAccessibilityContentSizeCategory: Boolean); cdecl;
  end;

  UIActivityIndicatorViewClass = interface(UIViewClass)
    ['{62578F92-A60E-4E17-A852-91C0BA5F0650}']
  end;

  UIActivityIndicatorView = interface(UIView)
    ['{56EC8F7F-7AC8-464F-95DF-D58962B73D2E}']
    function activityIndicatorViewStyle: UIActivityIndicatorViewStyle; cdecl;
    function color: UIColor; cdecl;
    function hidesWhenStopped: Boolean; cdecl;
    function initWithActivityIndicatorStyle(style: UIActivityIndicatorViewStyle): Pointer; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    function isAnimating: Boolean; cdecl;
    procedure setActivityIndicatorViewStyle(activityIndicatorViewStyle: UIActivityIndicatorViewStyle); cdecl;
    procedure setColor(color: UIColor); cdecl;
    procedure setHidesWhenStopped(hidesWhenStopped: Boolean); cdecl;
    procedure startAnimating; cdecl;
    procedure stopAnimating; cdecl;
  end;
  TUIActivityIndicatorView = class(TOCGenericImport<UIActivityIndicatorViewClass, UIActivityIndicatorView>) end;

  UIBarPositioning = interface(IObjectiveC)
    ['{DCE07621-9255-47B6-9EB4-D87BD5114B55}']
    function barPosition: UIBarPosition; cdecl;
  end;

  UIBarPositioningDelegate = interface(IObjectiveC)
    ['{9038F3E1-8B68-41F2-A4E2-FCCC00AC51DD}']
    function positionForBar(bar: Pointer): UIBarPosition; cdecl;
  end;

  UIBarButtonItemClass = interface(UIBarItemClass)
    ['{149784DB-B733-49DD-AA85-9239FFBD40E9}']
    {class} function fixedSpaceItemOfWidth(width: CGFloat): Pointer; cdecl;
    {class} function flexibleSpaceItem: Pointer; cdecl;
  end;

  UIBarButtonItem = interface(UIBarItem)
    ['{58BA5685-C760-43DF-BA3B-61197DBB0E89}']
    function action: SEL; cdecl;
    procedure addSymbolEffect(symbolEffect: NSSymbolEffect; options: NSSymbolEffectOptions; animated: Boolean); overload; cdecl;
    procedure addSymbolEffect(symbolEffect: NSSymbolEffect); overload; cdecl;
    procedure addSymbolEffect(symbolEffect: NSSymbolEffect; options: NSSymbolEffectOptions); overload; cdecl;
    function backButtonBackgroundImageForState(state: UIControlState; barMetrics: UIBarMetrics): UIImage; cdecl;
    function backButtonBackgroundVerticalPositionAdjustmentForBarMetrics(barMetrics: UIBarMetrics): CGFloat; cdecl;
    function backButtonTitlePositionAdjustmentForBarMetrics(barMetrics: UIBarMetrics): UIOffset; cdecl;
    function backgroundImageForState(state: UIControlState; style: UIBarButtonItemStyle; barMetrics: UIBarMetrics): UIImage; overload; cdecl;
    function backgroundImageForState(state: UIControlState; barMetrics: UIBarMetrics): UIImage; overload; cdecl;
    function backgroundVerticalPositionAdjustmentForBarMetrics(barMetrics: UIBarMetrics): CGFloat; cdecl;
    function buttonGroup: UIBarButtonItemGroup; cdecl;
    function changesSelectionAsPrimaryAction: Boolean; cdecl;
    function creatingFixedGroup: UIBarButtonItemGroup; cdecl;
    function creatingMovableGroupWithCustomizationIdentifier(customizationIdentifier: NSString): UIBarButtonItemGroup; cdecl;
    function creatingOptionalGroupWithCustomizationIdentifier(customizationIdentifier: NSString;
      inDefaultCustomization: Boolean): UIBarButtonItemGroup; cdecl;
    function customView: UIView; cdecl;
    function initWithBarButtonSystemItem(systemItem: UIBarButtonSystemItem; primaryAction: UIAction): Pointer; overload; cdecl;
    function initWithBarButtonSystemItem(systemItem: UIBarButtonSystemItem; menu: UIMenu): Pointer; overload; cdecl;
    function initWithBarButtonSystemItem(systemItem: UIBarButtonSystemItem; target: Pointer; action: SEL): Pointer; overload; cdecl;
    function initWithBarButtonSystemItem(systemItem: UIBarButtonSystemItem; primaryAction: UIAction; menu: UIMenu): Pointer; overload; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithCustomView(customView: UIView): Pointer; cdecl;
    function initWithImage(image: UIImage; style: UIBarButtonItemStyle; target: Pointer; action: SEL): Pointer; overload; cdecl;
    function initWithImage(image: UIImage; menu: UIMenu): Pointer; overload; cdecl;
    function initWithImage(image: UIImage; landscapeImagePhone: UIImage; style: UIBarButtonItemStyle; target: Pointer;
      action: SEL): Pointer; overload; cdecl;
    function initWithPrimaryAction(primaryAction: UIAction): Pointer; overload; cdecl;
    function initWithPrimaryAction(primaryAction: UIAction; menu: UIMenu): Pointer; overload; cdecl;
    function initWithTitle(title: NSString; style: UIBarButtonItemStyle; target: Pointer; action: SEL): Pointer; overload; cdecl;
    function initWithTitle(title: NSString; image: UIImage; target: Pointer; action: SEL; menu: UIMenu): Pointer; overload; cdecl;
    function initWithTitle(title: NSString; menu: UIMenu): Pointer; overload; cdecl;
    function isHidden: Boolean; cdecl;
    function isSelected: Boolean; cdecl;
    function isSymbolAnimationEnabled: Boolean; cdecl;
    function menu: UIMenu; cdecl;
    function menuRepresentation: UIMenuElement; cdecl;
    function possibleTitles: NSSet; cdecl;
    function preferredMenuElementOrder: UIContextMenuConfigurationElementOrder; cdecl;
    function primaryAction: UIAction; cdecl;
    procedure removeAllSymbolEffects; cdecl;
    procedure removeAllSymbolEffectsWithOptions(options: NSSymbolEffectOptions); overload; cdecl;
    procedure removeAllSymbolEffectsWithOptions(options: NSSymbolEffectOptions; animated: Boolean); overload; cdecl;
    procedure removeSymbolEffectOfType(symbolEffect: NSSymbolEffect; options: NSSymbolEffectOptions; animated: Boolean); overload; cdecl;
    procedure removeSymbolEffectOfType(symbolEffect: NSSymbolEffect; options: NSSymbolEffectOptions); overload; cdecl;
    procedure removeSymbolEffectOfType(symbolEffect: NSSymbolEffect); overload; cdecl;
    procedure setAction(action: SEL); cdecl;
    procedure setBackButtonBackgroundImage(backgroundImage: UIImage; forState: UIControlState; barMetrics: UIBarMetrics); cdecl;
    procedure setBackButtonBackgroundVerticalPositionAdjustment(adjustment: CGFloat; forBarMetrics: UIBarMetrics); cdecl;
    procedure setBackButtonTitlePositionAdjustment(adjustment: UIOffset; forBarMetrics: UIBarMetrics); cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage; forState: UIControlState; style: UIBarButtonItemStyle;
      barMetrics: UIBarMetrics); overload; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage; forState: UIControlState; barMetrics: UIBarMetrics); overload; cdecl;
    procedure setBackgroundVerticalPositionAdjustment(adjustment: CGFloat; forBarMetrics: UIBarMetrics); cdecl;
    procedure setChangesSelectionAsPrimaryAction(changesSelectionAsPrimaryAction: Boolean); cdecl;
    procedure setCustomView(customView: UIView); cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    procedure setMenu(menu: UIMenu); cdecl;
    procedure setMenuRepresentation(menuRepresentation: UIMenuElement); cdecl;
    procedure setPossibleTitles(possibleTitles: NSSet); cdecl;
    procedure setPreferredMenuElementOrder(preferredMenuElementOrder: UIContextMenuConfigurationElementOrder); cdecl;
    procedure setPrimaryAction(primaryAction: UIAction); cdecl;
    procedure setSelected(selected: Boolean); cdecl;
    procedure setStyle(style: UIBarButtonItemStyle); cdecl;
    procedure setSymbolAnimationEnabled(symbolAnimationEnabled: Boolean); cdecl;
    procedure setSymbolImage(symbolImage: UIImage; withContentTransition: NSSymbolContentTransition; options: NSSymbolEffectOptions); overload; cdecl;
    procedure setSymbolImage(symbolImage: UIImage; withContentTransition: NSSymbolContentTransition); overload; cdecl;
    procedure setTarget(target: Pointer); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    procedure setTitlePositionAdjustment(adjustment: UIOffset; forBarMetrics: UIBarMetrics); cdecl;
    procedure setWidth(width: CGFloat); cdecl;
    function style: UIBarButtonItemStyle; cdecl;
    function target: Pointer; cdecl;
    function tintColor: UIColor; cdecl;
    function titlePositionAdjustmentForBarMetrics(barMetrics: UIBarMetrics): UIOffset; cdecl;
    function width: CGFloat; cdecl;
  end;
  TUIBarButtonItem = class(TOCGenericImport<UIBarButtonItemClass, UIBarButtonItem>) end;

  UIBarButtonItemGroupClass = interface(NSObjectClass)
    ['{7D991137-6D6E-4108-9FBC-DFB04D6148CA}']
    {class} function fixedGroupWithRepresentativeItem(representativeItem: UIBarButtonItem; items: NSArray): UIBarButtonItemGroup; cdecl;
    {class} function movableGroupWithCustomizationIdentifier(customizationIdentifier: NSString; representativeItem: UIBarButtonItem;
      items: NSArray): UIBarButtonItemGroup; cdecl;
    {class} function optionalGroupWithCustomizationIdentifier(customizationIdentifier: NSString; inDefaultCustomization: Boolean;
      representativeItem: UIBarButtonItem; items: NSArray): UIBarButtonItemGroup; cdecl;
  end;

  UIBarButtonItemGroup = interface(NSObject)
    ['{DDA4D8A5-549D-4746-BF89-31D8B63CAF82}']
    function alwaysAvailable: Boolean; cdecl;
    function barButtonItems: NSArray; cdecl;
    function initWithBarButtonItems(barButtonItems: NSArray; representativeItem: UIBarButtonItem): Pointer; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function isDisplayingRepresentativeItem: Boolean; cdecl;
    function isHidden: Boolean; cdecl;
    function menuRepresentation: UIMenuElement; cdecl;
    function representativeItem: UIBarButtonItem; cdecl;
    procedure setAlwaysAvailable(alwaysAvailable: Boolean); cdecl;
    procedure setBarButtonItems(barButtonItems: NSArray); cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    procedure setMenuRepresentation(menuRepresentation: UIMenuElement); cdecl;
    procedure setRepresentativeItem(representativeItem: UIBarButtonItem); cdecl;
  end;
  TUIBarButtonItemGroup = class(TOCGenericImport<UIBarButtonItemGroupClass, UIBarButtonItemGroup>) end;

  UIDataSourceTranslating = interface(IObjectiveC)
    ['{9AD9148A-D875-442A-9AFE-86F1AEA440D9}']
    function dataSourceIndexPathForPresentationIndexPath(presentationIndexPath: NSIndexPath): NSIndexPath; cdecl;
    function dataSourceSectionIndexForPresentationSectionIndex(presentationSectionIndex: NSInteger): NSInteger; cdecl;
    procedure performUsingPresentationValues(actionsToTranslate: Pointer); cdecl;
    function presentationIndexPathForDataSourceIndexPath(dataSourceIndexPath: NSIndexPath): NSIndexPath; cdecl;
    function presentationSectionIndexForDataSourceSectionIndex(dataSourceSectionIndex: NSInteger): NSInteger; cdecl;
  end;

  UICollectionViewFocusUpdateContextClass = interface(UIFocusUpdateContextClass)
    ['{B35A8D14-7BD1-489A-B788-36315FAD2A84}']
  end;

  UICollectionViewFocusUpdateContext = interface(UIFocusUpdateContext)
    ['{BE0AC78F-2CC1-4B3A-B727-D4612F14888B}']
    function nextFocusedIndexPath: NSIndexPath; cdecl;
    function previouslyFocusedIndexPath: NSIndexPath; cdecl;
  end;
  TUICollectionViewFocusUpdateContext = class(TOCGenericImport<UICollectionViewFocusUpdateContextClass, UICollectionViewFocusUpdateContext>) end;

  UICollectionViewDataSource = interface(IObjectiveC)
    ['{B8F2D0B9-E399-401B-983C-E19842876ABA}']
    function collectionView(collectionView: UICollectionView; viewForSupplementaryElementOfKind: NSString;
      atIndexPath: NSIndexPath): UICollectionReusableView; overload; cdecl;
    procedure collectionView(collectionView: UICollectionView; moveItemAtIndexPath: NSIndexPath; toIndexPath: NSIndexPath); overload; cdecl;
    function collectionView(collectionView: UICollectionView; indexPathForIndexTitle: NSString; atIndex: NSInteger): NSIndexPath; overload; cdecl;
    function collectionView(collectionView: UICollectionView; numberOfItemsInSection: NSInteger): NSInteger; overload; cdecl;
    function collectionView(collectionView: UICollectionView; cellForItemAtIndexPath: NSIndexPath): UICollectionViewCell; overload; cdecl;
    [MethodName('collectionView:canMoveItemAtIndexPath:')]
    function collectionViewCanMoveItemAtIndexPath(collectionView: UICollectionView; canMoveItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    function indexTitlesForCollectionView(collectionView: UICollectionView): NSArray; cdecl;
    function numberOfSectionsInCollectionView(collectionView: UICollectionView): NSInteger; cdecl;
  end;

  UICollectionViewDataSourcePrefetching = interface(IObjectiveC)
    ['{19BBF204-959A-40CA-98A9-987E7B930A15}']
    procedure collectionView(collectionView: UICollectionView; prefetchItemsAtIndexPaths: NSArray); cdecl;
    [MethodName('collectionView:cancelPrefetchingForItemsAtIndexPaths:')]
    procedure collectionViewCancelPrefetchingForItemsAtIndexPaths(collectionView: UICollectionView;
      cancelPrefetchingForItemsAtIndexPaths: NSArray); cdecl;
  end;

  UICollectionViewDelegate = interface(IObjectiveC)
    ['{F6BDDFB1-CC2B-4A80-A493-A9F2FC8ADB88}']
    procedure collectionView(collectionView: UICollectionView; didUpdateFocusInContext: UICollectionViewFocusUpdateContext;
      withAnimationCoordinator: UIFocusAnimationCoordinator); overload; cdecl;
    function collectionView(collectionView: UICollectionView; targetIndexPathForMoveOfItemFromOriginalIndexPath: NSIndexPath;
      atCurrentIndexPath: NSIndexPath; toProposedIndexPath: NSIndexPath): NSIndexPath; overload; cdecl;
    function collectionView(collectionView: UICollectionView; targetIndexPathForMoveFromItemAtIndexPath: NSIndexPath;
      toProposedIndexPath: NSIndexPath): NSIndexPath; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("collectionView:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:", ios(9.0, 15.0), visionos(1.0, 1.0))
    function collectionView(collectionView: UICollectionView; canPerformAction: SEL; forItemAtIndexPath: NSIndexPath;
      withSender: Pointer): Boolean; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("collectionView:contextMenuConfigurationForItemsAtIndexPaths:point:", ios(6.0, 13.0))
    function collectionView(collectionView: UICollectionView; transitionLayoutForOldLayout: UICollectionViewLayout;
      newLayout: UICollectionViewLayout): UICollectionViewTransitionLayout; overload; cdecl;
    function collectionView(collectionView: UICollectionView;
      shouldUpdateFocusInContext: UICollectionViewFocusUpdateContext): Boolean; overload; cdecl;
    function collectionView(collectionView: UICollectionView; targetContentOffsetForProposedContentOffset: CGPoint): CGPoint; overload; cdecl;
    procedure collectionView(collectionView: UICollectionView; willPerformPreviewActionForMenuWithConfiguration: UIContextMenuConfiguration;
      animator: Pointer); overload; cdecl;
    function collectionView(collectionView: UICollectionView; sceneActivationConfigurationForItemAtIndexPath: NSIndexPath;
      point: CGPoint): UIWindowSceneActivationConfiguration; overload; cdecl;
    function collectionView(collectionView: UICollectionView;
      previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration): UITargetedPreview; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("collectionView:contextMenuConfiguration:highlightPreviewForItemAtIndexPath:", ios(13.0, 16.0), visionos(1.0, 1.0))
    function collectionView(collectionView: UICollectionView; shouldSpringLoadItemAtIndexPath: NSIndexPath;
      withContext: Pointer): Boolean; overload; cdecl;
    function collectionView(collectionView: UICollectionView; contextMenuConfigurationForItemsAtIndexPaths: NSArray;
      point: CGPoint): UIContextMenuConfiguration; overload; cdecl;
    function collectionView(collectionView: UICollectionView; contextMenuConfiguration: UIContextMenuConfiguration;
      highlightPreviewForItemAtIndexPath: NSIndexPath): UITargetedPreview; overload; cdecl;
    procedure collectionView(collectionView: UICollectionView; willDisplayCell: UICollectionViewCell;
      forItemAtIndexPath: NSIndexPath); overload; cdecl;
    procedure collectionView(collectionView: UICollectionView; willDisplaySupplementaryView: UICollectionReusableView; forElementKind: NSString;
      atIndexPath: NSIndexPath); overload; cdecl;
    function collectionView(collectionView: UICollectionView; shouldHighlightItemAtIndexPath: NSIndexPath): Boolean; overload; cdecl;
    [MethodName('collectionView:canEditItemAtIndexPath:')]
    function collectionViewCanEditItemAtIndexPath(collectionView: UICollectionView; canEditItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:canFocusItemAtIndexPath:')]
    function collectionViewCanFocusItemAtIndexPath(collectionView: UICollectionView; canFocusItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:canPerformPrimaryActionForItemAtIndexPath:')]
    function collectionViewCanPerformPrimaryActionForItemAtIndexPath(collectionView: UICollectionView;
      canPerformPrimaryActionForItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:contextMenuConfiguration:dismissalPreviewForItemAtIndexPath:')]
    function collectionViewContextMenuConfiguration(collectionView: UICollectionView; contextMenuConfiguration: UIContextMenuConfiguration;
      dismissalPreviewForItemAtIndexPath: NSIndexPath): UITargetedPreview; cdecl;
    [MethodName('collectionView:contextMenuConfigurationForItemAtIndexPath:point:')]
    function collectionViewContextMenuConfigurationForItemAtIndexPath(collectionView: UICollectionView;
      contextMenuConfigurationForItemAtIndexPath: NSIndexPath; point: CGPoint): UIContextMenuConfiguration; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("collectionView:contextMenuConfigurationForItemsAtIndexPaths:point:", ios(13.0, 16.0), visionos(1.0, 1.0))
    [MethodName('collectionView:didBeginMultipleSelectionInteractionAtIndexPath:')]
    procedure collectionViewDidBeginMultipleSelectionInteractionAtIndexPath(collectionView: UICollectionView;
      didBeginMultipleSelectionInteractionAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:didDeselectItemAtIndexPath:')]
    procedure collectionViewDidDeselectItemAtIndexPath(collectionView: UICollectionView; didDeselectItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:didEndDisplayingCell:forItemAtIndexPath:')]
    procedure collectionViewDidEndDisplayingCell(collectionView: UICollectionView; didEndDisplayingCell: UICollectionViewCell;
      forItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:')]
    procedure collectionViewDidEndDisplayingSupplementaryView(collectionView: UICollectionView;
      didEndDisplayingSupplementaryView: UICollectionReusableView; forElementOfKind: NSString; atIndexPath: NSIndexPath); cdecl;
    procedure collectionViewDidEndMultipleSelectionInteraction(collectionView: UICollectionView); cdecl;
    [MethodName('collectionView:didHighlightItemAtIndexPath:')]
    procedure collectionViewDidHighlightItemAtIndexPath(collectionView: UICollectionView; didHighlightItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:didSelectItemAtIndexPath:')]
    procedure collectionViewDidSelectItemAtIndexPath(collectionView: UICollectionView; didSelectItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:didUnhighlightItemAtIndexPath:')]
    procedure collectionViewDidUnhighlightItemAtIndexPath(collectionView: UICollectionView; didUnhighlightItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:performAction:forItemAtIndexPath:withSender:')]
    procedure collectionViewPerformAction(collectionView: UICollectionView; performAction: SEL; forItemAtIndexPath: NSIndexPath;
      withSender: Pointer); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("collectionView:contextMenuConfigurationForItemsAtIndexPaths:point:", ios(6.0, 13.0))
    [MethodName('collectionView:performPrimaryActionForItemAtIndexPath:')]
    procedure collectionViewPerformPrimaryActionForItemAtIndexPath(collectionView: UICollectionView;
      performPrimaryActionForItemAtIndexPath: NSIndexPath); cdecl;
    [MethodName('collectionView:previewForDismissingContextMenuWithConfiguration:')]
    function collectionViewPreviewForDismissingContextMenuWithConfiguration(collectionView: UICollectionView;
      previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration): UITargetedPreview; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("collectionView:contextMenuConfiguration:dismissalPreviewForItemAtIndexPath:", ios(13.0, 16.0), visionos(1.0, 1.0))
    [MethodName('collectionView:selectionFollowsFocusForItemAtIndexPath:')]
    function collectionViewSelectionFollowsFocusForItemAtIndexPath(collectionView: UICollectionView;
      selectionFollowsFocusForItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:shouldBeginMultipleSelectionInteractionAtIndexPath:')]
    function collectionViewShouldBeginMultipleSelectionInteractionAtIndexPath(collectionView: UICollectionView;
      shouldBeginMultipleSelectionInteractionAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:shouldDeselectItemAtIndexPath:')]
    function collectionViewShouldDeselectItemAtIndexPath(collectionView: UICollectionView;
      shouldDeselectItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:shouldSelectItemAtIndexPath:')]
    function collectionViewShouldSelectItemAtIndexPath(collectionView: UICollectionView; shouldSelectItemAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('collectionView:shouldShowMenuForItemAtIndexPath:')]
    function collectionViewShouldShowMenuForItemAtIndexPath(collectionView: UICollectionView;
      shouldShowMenuForItemAtIndexPath: NSIndexPath): Boolean; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("collectionView:contextMenuConfigurationForItemsAtIndexPaths:point:", ios(6.0, 13.0))
    [MethodName('collectionView:willDisplayContextMenuWithConfiguration:animator:')]
    procedure collectionViewWillDisplayContextMenuWithConfiguration(collectionView: UICollectionView;
      willDisplayContextMenuWithConfiguration: UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName('collectionView:willEndContextMenuInteractionWithConfiguration:animator:')]
    procedure collectionViewWillEndContextMenuInteractionWithConfiguration(collectionView: UICollectionView;
      willEndContextMenuInteractionWithConfiguration: UIContextMenuConfiguration; animator: Pointer); cdecl;
    function indexPathForPreferredFocusedViewInCollectionView(collectionView: UICollectionView): NSIndexPath; cdecl;
  end;

  UICollectionViewClass = interface(UIScrollViewClass)
    ['{F69A2ECD-43CE-4385-A62A-9D2A07E5E3A8}']
  end;

  UICollectionView = interface(UIScrollView)
    ['{94B527C9-882E-48C5-BCA6-2ACB220A537F}']
    function allowsFocus: Boolean; cdecl;
    function allowsFocusDuringEditing: Boolean; cdecl;
    function allowsMultipleSelection: Boolean; cdecl;
    function allowsMultipleSelectionDuringEditing: Boolean; cdecl;
    function allowsSelection: Boolean; cdecl;
    function allowsSelectionDuringEditing: Boolean; cdecl;
    function backgroundView: UIView; cdecl;
    function beginInteractiveMovementForItemAtIndexPath(indexPath: NSIndexPath): Boolean; cdecl;
    procedure cancelInteractiveMovement; cdecl;
    procedure cancelInteractiveTransition; cdecl;
    function cellForItemAtIndexPath(indexPath: NSIndexPath): UICollectionViewCell; cdecl;
    function collectionViewLayout: UICollectionViewLayout; cdecl;
    function contextMenuInteraction: UIContextMenuInteraction; cdecl;
    function dataSource: Pointer; cdecl;
    function delegate: Pointer; cdecl;
    procedure deleteItemsAtIndexPaths(indexPaths: NSArray); cdecl;
    procedure deleteSections(sections: NSIndexSet); cdecl;
    function dequeueConfiguredReusableCellWithRegistration(registration: UICollectionViewCellRegistration; forIndexPath: NSIndexPath;
      item: Pointer): UICollectionViewCell; cdecl;
    function dequeueConfiguredReusableSupplementaryViewWithRegistration(registration: UICollectionViewSupplementaryRegistration;
      forIndexPath: NSIndexPath): UICollectionReusableView; cdecl;
    function dequeueReusableCellWithReuseIdentifier(identifier: NSString; forIndexPath: NSIndexPath): UICollectionViewCell; cdecl;
    function dequeueReusableSupplementaryViewOfKind(elementKind: NSString; withReuseIdentifier: NSString;
      forIndexPath: NSIndexPath): UICollectionReusableView; cdecl;
    procedure deselectItemAtIndexPath(indexPath: NSIndexPath; animated: Boolean); cdecl;
    function dragDelegate: Pointer; cdecl;
    function dragInteractionEnabled: Boolean; cdecl;
    function dropDelegate: Pointer; cdecl;
    procedure endInteractiveMovement; cdecl;
    procedure finishInteractiveTransition; cdecl;
    function hasActiveDrag: Boolean; cdecl;
    function hasActiveDrop: Boolean; cdecl;
    function hasUncommittedUpdates: Boolean; cdecl;
    function indexPathForCell(cell: UICollectionViewCell): NSIndexPath; cdecl;
    function indexPathForItemAtPoint(point: CGPoint): NSIndexPath; cdecl;
    function indexPathsForSelectedItems: NSArray; cdecl;
    function indexPathsForVisibleItems: NSArray; cdecl;
    function indexPathsForVisibleSupplementaryElementsOfKind(elementKind: NSString): NSArray; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect; collectionViewLayout: UICollectionViewLayout): Pointer; cdecl;
    procedure insertItemsAtIndexPaths(indexPaths: NSArray); cdecl;
    procedure insertSections(sections: NSIndexSet); cdecl;
    function isEditing: Boolean; cdecl;
    function isPrefetchingEnabled: Boolean; cdecl;
    function layoutAttributesForItemAtIndexPath(indexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForSupplementaryElementOfKind(kind: NSString; atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    procedure moveItemAtIndexPath(indexPath: NSIndexPath; toIndexPath: NSIndexPath); cdecl;
    procedure moveSection(section: NSInteger; toSection: NSInteger); cdecl;
    function numberOfItemsInSection(section: NSInteger): NSInteger; cdecl;
    function numberOfSections: NSInteger; cdecl;
    procedure performBatchUpdates(updates: TUICollectionViewBlockMethod2; completion: TUICollectionViewBlockMethod1); cdecl;
    function prefetchDataSource: Pointer; cdecl;
    procedure reconfigureItemsAtIndexPaths(indexPaths: NSArray); cdecl;
    procedure registerClass(cellClass: Pointer; forCellWithReuseIdentifier: NSString); overload; cdecl;
    procedure registerClass(viewClass: Pointer; forSupplementaryViewOfKind: NSString; withReuseIdentifier: NSString); overload; cdecl;
    procedure registerNib(nib: UINib; forCellWithReuseIdentifier: NSString); overload; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    procedure registerNib(nib: UINib; forSupplementaryViewOfKind: NSString; withReuseIdentifier: NSString); overload; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    procedure reloadData; cdecl;
    procedure reloadItemsAtIndexPaths(indexPaths: NSArray); cdecl;
    procedure reloadSections(sections: NSIndexSet); cdecl;
    function remembersLastFocusedIndexPath: Boolean; cdecl;
    function reorderingCadence: UICollectionViewReorderingCadence; cdecl;
    procedure scrollToItemAtIndexPath(indexPath: NSIndexPath; atScrollPosition: UICollectionViewScrollPosition; animated: Boolean); cdecl;
    function selectionFollowsFocus: Boolean; cdecl;
    procedure selectItemAtIndexPath(indexPath: NSIndexPath; animated: Boolean; scrollPosition: UICollectionViewScrollPosition); cdecl;
    function selfSizingInvalidation: UICollectionViewSelfSizingInvalidation; cdecl;
    procedure setAllowsFocus(allowsFocus: Boolean); cdecl;
    procedure setAllowsFocusDuringEditing(allowsFocusDuringEditing: Boolean); cdecl;
    procedure setAllowsMultipleSelection(allowsMultipleSelection: Boolean); cdecl;
    procedure setAllowsMultipleSelectionDuringEditing(allowsMultipleSelectionDuringEditing: Boolean); cdecl;
    procedure setAllowsSelection(allowsSelection: Boolean); cdecl;
    procedure setAllowsSelectionDuringEditing(allowsSelectionDuringEditing: Boolean); cdecl;
    procedure setBackgroundView(backgroundView: UIView); cdecl;
    procedure setCollectionViewLayout(layout: UICollectionViewLayout; animated: Boolean; completion: TUICollectionViewBlockMethod1); overload; cdecl;
    procedure setCollectionViewLayout(layout: UICollectionViewLayout; animated: Boolean); overload; cdecl;
    procedure setCollectionViewLayout(collectionViewLayout: UICollectionViewLayout); overload; cdecl;
    procedure setDataSource(dataSource: Pointer); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDragDelegate(dragDelegate: Pointer); cdecl;
    procedure setDragInteractionEnabled(dragInteractionEnabled: Boolean); cdecl;
    procedure setDropDelegate(dropDelegate: Pointer); cdecl;
    procedure setEditing(editing: Boolean); cdecl;
    procedure setPrefetchDataSource(prefetchDataSource: Pointer); cdecl;
    procedure setPrefetchingEnabled(prefetchingEnabled: Boolean); cdecl;
    procedure setRemembersLastFocusedIndexPath(remembersLastFocusedIndexPath: Boolean); cdecl;
    procedure setReorderingCadence(reorderingCadence: UICollectionViewReorderingCadence); cdecl;
    procedure setSelectionFollowsFocus(selectionFollowsFocus: Boolean); cdecl;
    procedure setSelfSizingInvalidation(selfSizingInvalidation: UICollectionViewSelfSizingInvalidation); cdecl;
    function startInteractiveTransitionToCollectionViewLayout(layout: UICollectionViewLayout;
      completion: UICollectionViewLayoutInteractiveTransitionCompletion): UICollectionViewTransitionLayout; cdecl;
    function supplementaryViewForElementKind(elementKind: NSString; atIndexPath: NSIndexPath): UICollectionReusableView; cdecl;
    procedure updateInteractiveMovementTargetPosition(targetPosition: CGPoint); cdecl;
    function visibleCells: NSArray; cdecl;
    function visibleSupplementaryViewsOfKind(elementKind: NSString): NSArray; cdecl;
  end;
  TUICollectionView = class(TOCGenericImport<UICollectionViewClass, UICollectionView>) end;

  UICollectionViewDragDelegate = interface(IObjectiveC)
    ['{DDF00023-7616-48A2-81FB-F02DE4E75EF9}']
    procedure collectionView(collectionView: UICollectionView; dragSessionWillBegin: Pointer); overload; cdecl;
    function collectionView(collectionView: UICollectionView;
      dragPreviewParametersForItemAtIndexPath: NSIndexPath): UIDragPreviewParameters; overload; cdecl;
    function collectionView(collectionView: UICollectionView; itemsForBeginningDragSession: Pointer;
      atIndexPath: NSIndexPath): NSArray; overload; cdecl;
    function collectionView(collectionView: UICollectionView; itemsForAddingToDragSession: Pointer; atIndexPath: NSIndexPath;
      point: CGPoint): NSArray; overload; cdecl;
    [MethodName('collectionView:dragSessionAllowsMoveOperation:')]
    function collectionViewDragSessionAllowsMoveOperation(collectionView: UICollectionView; dragSessionAllowsMoveOperation: Pointer): Boolean; cdecl;
    [MethodName('collectionView:dragSessionDidEnd:')]
    procedure collectionViewDragSessionDidEnd(collectionView: UICollectionView; dragSessionDidEnd: Pointer); cdecl;
    [MethodName('collectionView:dragSessionIsRestrictedToDraggingApplication:')]
    function collectionViewDragSessionIsRestrictedToDraggingApplication(collectionView: UICollectionView;
      dragSessionIsRestrictedToDraggingApplication: Pointer): Boolean; cdecl;
  end;

  UICollectionViewDropDelegate = interface(IObjectiveC)
    ['{46AFA357-E3E0-4EC5-A219-732BD67298B8}']
    function collectionView(collectionView: UICollectionView;
      dropPreviewParametersForItemAtIndexPath: NSIndexPath): UIDragPreviewParameters; overload; cdecl;
    function collectionView(collectionView: UICollectionView; dropSessionDidUpdate: Pointer;
      withDestinationIndexPath: NSIndexPath): UICollectionViewDropProposal; overload; cdecl;
    procedure collectionView(collectionView: UICollectionView; performDropWithCoordinator: Pointer); overload; cdecl;
    [MethodName('collectionView:canHandleDropSession:')]
    function collectionViewCanHandleDropSession(collectionView: UICollectionView; canHandleDropSession: Pointer): Boolean; cdecl;
    [MethodName('collectionView:dropSessionDidEnd:')]
    procedure collectionViewDropSessionDidEnd(collectionView: UICollectionView; dropSessionDidEnd: Pointer); cdecl;
    [MethodName('collectionView:dropSessionDidEnter:')]
    procedure collectionViewDropSessionDidEnter(collectionView: UICollectionView; dropSessionDidEnter: Pointer); cdecl;
    [MethodName('collectionView:dropSessionDidExit:')]
    procedure collectionViewDropSessionDidExit(collectionView: UICollectionView; dropSessionDidExit: Pointer); cdecl;
  end;

  UICollectionViewDropProposalClass = interface(UIDropProposalClass)
    ['{233EB1E2-763A-42CB-AF06-284D062A7A26}']
  end;

  UICollectionViewDropProposal = interface(UIDropProposal)
    ['{4C1C2146-E43E-4862-8BA3-82D4CED30541}']
    function initWithDropOperation(operation: UIDropOperation; intent: UICollectionViewDropIntent): Pointer; cdecl;
    function intent: UICollectionViewDropIntent; cdecl;
  end;
  TUICollectionViewDropProposal = class(TOCGenericImport<UICollectionViewDropProposalClass, UICollectionViewDropProposal>) end;

  UICollectionViewDropCoordinator = interface(IObjectiveC)
    ['{11333622-25B5-44A9-9DB6-38B9BC772CAA}']
    function destinationIndexPath: NSIndexPath; cdecl;
    function dropItem(dragItem: UIDragItem; toTarget: UIDragPreviewTarget): Pointer; overload; cdecl;
    function dropItem(dragItem: UIDragItem; intoItemAtIndexPath: NSIndexPath; rect: CGRect): Pointer; overload; cdecl;
    function dropItem(dragItem: UIDragItem; toPlaceholder: UICollectionViewDropPlaceholder): Pointer; overload; cdecl;
    function dropItem(dragItem: UIDragItem; toItemAtIndexPath: NSIndexPath): Pointer; overload; cdecl;
    function items: NSArray; cdecl;
    function proposal: UICollectionViewDropProposal; cdecl;
    function session: Pointer; cdecl;
  end;

  UICollectionViewPlaceholderClass = interface(NSObjectClass)
    ['{6D9D9DB9-FDFF-4B54-9AAF-A2250C76662A}']
    {class} function new: Pointer; cdecl;
  end;

  UICollectionViewPlaceholder = interface(NSObject)
    ['{B4F4F5CD-8DE1-4745-9151-550B7B0381F1}']
    function cellUpdateHandler: TUICollectionViewPlaceholderBlockMethod1; cdecl;
    function initWithInsertionIndexPath(insertionIndexPath: NSIndexPath; reuseIdentifier: NSString): Pointer; cdecl;
    procedure setCellUpdateHandler(cellUpdateHandler: TUICollectionViewPlaceholderBlockMethod2); cdecl;
  end;
  TUICollectionViewPlaceholder = class(TOCGenericImport<UICollectionViewPlaceholderClass, UICollectionViewPlaceholder>) end;

  UICollectionViewDropPlaceholderClass = interface(UICollectionViewPlaceholderClass)
    ['{7A2A9955-7922-468C-A191-A181824B91F7}']
  end;

  UICollectionViewDropPlaceholder = interface(UICollectionViewPlaceholder)
    ['{D7DD66EF-CA6D-4394-987B-56387DCC6A78}']
    function previewParametersProvider: TUICollectionViewDropPlaceholderBlockMethod1; cdecl;
    procedure setPreviewParametersProvider(previewParametersProvider: TUICollectionViewDropPlaceholderBlockMethod2); cdecl;
  end;
  TUICollectionViewDropPlaceholder = class(TOCGenericImport<UICollectionViewDropPlaceholderClass, UICollectionViewDropPlaceholder>) end;

  UICollectionViewDropItem = interface(IObjectiveC)
    ['{1DBF986D-3D6C-4A2C-A976-8EC10C3448DA}']
    function dragItem: UIDragItem; cdecl;
    function previewSize: CGSize; cdecl;
    function sourceIndexPath: NSIndexPath; cdecl;
  end;

  UICollectionViewDropPlaceholderContext = interface(IObjectiveC)
    ['{09AC0C5F-133C-47F9-97CD-8E509250B353}']
    function commitInsertionWithDataSourceUpdates(dataSourceUpdates: Pointer): Boolean; cdecl;
    function deletePlaceholder: Boolean; cdecl;
    function dragItem: UIDragItem; cdecl;
    procedure setNeedsCellUpdate; cdecl;
  end;

  UICollectionReusableViewClass = interface(UIViewClass)
    ['{5FD825A5-88AA-4125-8EF5-D84351105F34}']
  end;

  UICollectionReusableView = interface(UIView)
    ['{53B8852D-1299-4086-AD65-0636D17A2E72}']
    procedure applyLayoutAttributes(layoutAttributes: UICollectionViewLayoutAttributes); cdecl;
    procedure didTransitionFromLayout(oldLayout: UICollectionViewLayout; toLayout: UICollectionViewLayout); cdecl;
    function preferredLayoutAttributesFittingAttributes(layoutAttributes: UICollectionViewLayoutAttributes): UICollectionViewLayoutAttributes; cdecl;
    procedure prepareForReuse; cdecl;
    function reuseIdentifier: NSString; cdecl;
    procedure willTransitionFromLayout(oldLayout: UICollectionViewLayout; toLayout: UICollectionViewLayout); cdecl;
  end;
  TUICollectionReusableView = class(TOCGenericImport<UICollectionReusableViewClass, UICollectionReusableView>) end;

  UICollectionViewCellClass = interface(UICollectionReusableViewClass)
    ['{42CF4F82-AC65-46D2-AF81-478BB7E8A2EE}']
  end;

  UICollectionViewCell = interface(UICollectionReusableView)
    ['{1E3D9717-8E1F-463A-AD81-9A1797A278EE}']
    function automaticallyUpdatesBackgroundConfiguration: Boolean; cdecl;
    function automaticallyUpdatesContentConfiguration: Boolean; cdecl;
    function backgroundConfiguration: UIBackgroundConfiguration; cdecl;
    function backgroundView: UIView; cdecl;
    function configurationState: UICellConfigurationState; cdecl;
    function configurationUpdateHandler: UICollectionViewCellConfigurationUpdateHandler; cdecl;
    function contentConfiguration: Pointer; cdecl;
    function contentView: UIView; cdecl;
    function defaultBackgroundConfiguration: UIBackgroundConfiguration; cdecl;
    procedure dragStateDidChange(dragState: UICollectionViewCellDragState); cdecl;
    function isHighlighted: Boolean; cdecl;
    function isSelected: Boolean; cdecl;
    function selectedBackgroundView: UIView; cdecl;
    procedure setAutomaticallyUpdatesBackgroundConfiguration(automaticallyUpdatesBackgroundConfiguration: Boolean); cdecl;
    procedure setAutomaticallyUpdatesContentConfiguration(automaticallyUpdatesContentConfiguration: Boolean); cdecl;
    procedure setBackgroundConfiguration(backgroundConfiguration: UIBackgroundConfiguration); cdecl;
    procedure setBackgroundView(backgroundView: UIView); cdecl;
    procedure setConfigurationUpdateHandler(configurationUpdateHandler: UICollectionViewCellConfigurationUpdateHandler); cdecl;
    procedure setContentConfiguration(contentConfiguration: Pointer); cdecl;
    procedure setHighlighted(highlighted: Boolean); cdecl;
    procedure setNeedsUpdateConfiguration; cdecl;
    procedure setSelected(selected: Boolean); cdecl;
    procedure setSelectedBackgroundView(selectedBackgroundView: UIView); cdecl;
    procedure updateConfigurationUsingState(state: UICellConfigurationState); cdecl;
  end;
  TUICollectionViewCell = class(TOCGenericImport<UICollectionViewCellClass, UICollectionViewCell>) end;

  UICollectionViewControllerClass = interface(UIViewControllerClass)
    ['{6238D4A7-F928-4B0B-AF17-459BCA92C4AE}']
  end;

  UICollectionViewController = interface(UIViewController)
    ['{D356A20F-0FCF-4BA4-B985-81DD680AB350}']
    function clearsSelectionOnViewWillAppear: Boolean; cdecl;
    function collectionView: UICollectionView; cdecl;
    function collectionViewLayout: UICollectionViewLayout; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithCollectionViewLayout(layout: UICollectionViewLayout): Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    function installsStandardGestureForInteractiveMovement: Boolean; cdecl;
    procedure setClearsSelectionOnViewWillAppear(clearsSelectionOnViewWillAppear: Boolean); cdecl;
    procedure setCollectionView(collectionView: UICollectionView); cdecl;
    procedure setInstallsStandardGestureForInteractiveMovement(installsStandardGestureForInteractiveMovement: Boolean); cdecl;
    procedure setUseLayoutToLayoutNavigationTransitions(useLayoutToLayoutNavigationTransitions: Boolean); cdecl;
    function useLayoutToLayoutNavigationTransitions: Boolean; cdecl;
  end;
  TUICollectionViewController = class(TOCGenericImport<UICollectionViewControllerClass, UICollectionViewController>) end;

  UICollectionViewUpdateItemClass = interface(NSObjectClass)
    ['{25FAC850-FABC-41B0-9612-CF03167F69EB}']
  end;

  UICollectionViewUpdateItem = interface(NSObject)
    ['{A0388C1B-45AF-46E2-AD79-7F7E7F41FE0E}']
    function indexPathAfterUpdate: NSIndexPath; cdecl;
    function indexPathBeforeUpdate: NSIndexPath; cdecl;
    function updateAction: UICollectionUpdateAction; cdecl;
  end;
  TUICollectionViewUpdateItem = class(TOCGenericImport<UICollectionViewUpdateItemClass, UICollectionViewUpdateItem>) end;

  UICollectionViewLayoutAttributesClass = interface(NSObjectClass)
    ['{203FFCD2-A076-466E-96B1-CA03299EA0DB}']
    {class} function layoutAttributesForCellWithIndexPath(indexPath: NSIndexPath): Pointer; cdecl;
    {class} function layoutAttributesForDecorationViewOfKind(decorationViewKind: NSString; withIndexPath: NSIndexPath): Pointer; cdecl;
    {class} function layoutAttributesForSupplementaryViewOfKind(elementKind: NSString; withIndexPath: NSIndexPath): Pointer; cdecl;
  end;

  UICollectionViewLayoutAttributes = interface(NSObject)
    ['{ADA89233-460D-455F-81CA-20692D6EE504}']
    function alpha: CGFloat; cdecl;
    function bounds: CGRect; cdecl;
    function center: CGPoint; cdecl;
    function frame: CGRect; cdecl;
    function indexPath: NSIndexPath; cdecl;
    function isHidden: Boolean; cdecl;
    function representedElementCategory: UICollectionElementCategory; cdecl;
    function representedElementKind: NSString; cdecl;
    procedure setAlpha(alpha: CGFloat); cdecl;
    procedure setBounds(bounds: CGRect); cdecl;
    procedure setCenter(center: CGPoint); cdecl;
    procedure setFrame(frame: CGRect); cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    procedure setIndexPath(indexPath: NSIndexPath); cdecl;
    procedure setSize(size: CGSize); cdecl;
    procedure setTransform(transform: CGAffineTransform); cdecl;
    procedure setTransform3D(transform3D: CATransform3D); cdecl;
    procedure setZIndex(zIndex: NSInteger); cdecl;
    function size: CGSize; cdecl;
    function transform: CGAffineTransform; cdecl;
    function transform3D: CATransform3D; cdecl;
    function zIndex: NSInteger; cdecl;
  end;
  TUICollectionViewLayoutAttributes = class(TOCGenericImport<UICollectionViewLayoutAttributesClass, UICollectionViewLayoutAttributes>) end;

  UICollectionViewLayoutInvalidationContextClass = interface(NSObjectClass)
    ['{A9179A70-D368-4BDE-9EE9-74DA76554FB1}']
  end;

  UICollectionViewLayoutInvalidationContext = interface(NSObject)
    ['{8F66D12E-1960-4E68-AB00-41ECACDE56F3}']
    function contentOffsetAdjustment: CGPoint; cdecl;
    function contentSizeAdjustment: CGSize; cdecl;
    function interactiveMovementTarget: CGPoint; cdecl;
    function invalidateDataSourceCounts: Boolean; cdecl;
    function invalidatedDecorationIndexPaths: NSDictionary; cdecl;
    procedure invalidateDecorationElementsOfKind(elementKind: NSString; atIndexPaths: NSArray); cdecl;
    function invalidatedItemIndexPaths: NSArray; cdecl;
    function invalidatedSupplementaryIndexPaths: NSDictionary; cdecl;
    function invalidateEverything: Boolean; cdecl;
    procedure invalidateItemsAtIndexPaths(indexPaths: NSArray); cdecl;
    procedure invalidateSupplementaryElementsOfKind(elementKind: NSString; atIndexPaths: NSArray); cdecl;
    function previousIndexPathsForInteractivelyMovingItems: NSArray; cdecl;
    procedure setContentOffsetAdjustment(contentOffsetAdjustment: CGPoint); cdecl;
    procedure setContentSizeAdjustment(contentSizeAdjustment: CGSize); cdecl;
    function targetIndexPathsForInteractivelyMovingItems: NSArray; cdecl;
  end;
  TUICollectionViewLayoutInvalidationContext = class(TOCGenericImport<UICollectionViewLayoutInvalidationContextClass, UICollectionViewLayoutInvalidationContext>) end;

  UICollectionViewLayoutClass = interface(NSObjectClass)
    ['{30F9C6E8-B130-48CE-B0A7-134293432386}']
    {class} function invalidationContextClass: Pointer; cdecl;
    {class} function layoutAttributesClass: Pointer; cdecl;
  end;

  UICollectionViewLayout = interface(NSObject)
    ['{FCCE5A8D-455B-4E7D-BA02-7AC3F5AF5813}']
    function collectionView: UICollectionView; cdecl;
    function collectionViewContentSize: CGSize; cdecl;
    function developmentLayoutDirection: UIUserInterfaceLayoutDirection; cdecl;
    procedure finalizeAnimatedBoundsChange; cdecl;
    procedure finalizeCollectionViewUpdates; cdecl;
    procedure finalizeLayoutTransition; cdecl;
    function finalLayoutAttributesForDisappearingDecorationElementOfKind(elementKind: NSString;
      atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function finalLayoutAttributesForDisappearingSupplementaryElementOfKind(elementKind: NSString;
      atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function flipsHorizontallyInOppositeLayoutDirection: Boolean; cdecl;
    function indexPathsToDeleteForDecorationViewOfKind(elementKind: NSString): NSArray; cdecl;
    function indexPathsToDeleteForSupplementaryViewOfKind(elementKind: NSString): NSArray; cdecl;
    function indexPathsToInsertForDecorationViewOfKind(elementKind: NSString): NSArray; cdecl;
    function indexPathsToInsertForSupplementaryViewOfKind(elementKind: NSString): NSArray; cdecl;
    function initialLayoutAttributesForAppearingDecorationElementOfKind(elementKind: NSString;
      atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function initialLayoutAttributesForAppearingSupplementaryElementOfKind(elementKind: NSString;
      atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    procedure invalidateLayout; cdecl;
    procedure invalidateLayoutWithContext(context: UICollectionViewLayoutInvalidationContext); cdecl;
    function invalidationContextForBoundsChange(newBounds: CGRect): UICollectionViewLayoutInvalidationContext; cdecl;
    function invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths(indexPaths: NSArray; previousIndexPaths: NSArray;
      movementCancelled: Boolean): UICollectionViewLayoutInvalidationContext; cdecl;
    function invalidationContextForInteractivelyMovingItems(targetIndexPaths: NSArray; withTargetPosition: CGPoint; previousIndexPaths: NSArray;
      previousPosition: CGPoint): UICollectionViewLayoutInvalidationContext; cdecl;
    function invalidationContextForPreferredLayoutAttributes(preferredAttributes: UICollectionViewLayoutAttributes;
      withOriginalAttributes: UICollectionViewLayoutAttributes): UICollectionViewLayoutInvalidationContext; cdecl;
    function layoutAttributesForDecorationViewOfKind(elementKind: NSString; atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForElementsInRect(rect: CGRect): NSArray; cdecl;
    function layoutAttributesForInteractivelyMovingItemAtIndexPath(indexPath: NSIndexPath;
      withTargetPosition: CGPoint): UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForItemAtIndexPath(indexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForSupplementaryViewOfKind(elementKind: NSString; atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    procedure prepareForAnimatedBoundsChange(oldBounds: CGRect); cdecl;
    procedure prepareForCollectionViewUpdates(updateItems: NSArray); cdecl;
    procedure prepareForTransitionFromLayout(oldLayout: UICollectionViewLayout); cdecl;
    procedure prepareForTransitionToLayout(newLayout: UICollectionViewLayout); cdecl;
    procedure prepareLayout; cdecl;
    procedure registerClass(viewClass: Pointer; forDecorationViewOfKind: NSString); cdecl;
    procedure registerNib(nib: UINib; forDecorationViewOfKind: NSString); cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    function shouldInvalidateLayoutForBoundsChange(newBounds: CGRect): Boolean; cdecl;
    function shouldInvalidateLayoutForPreferredLayoutAttributes(preferredAttributes: UICollectionViewLayoutAttributes;
      withOriginalAttributes: UICollectionViewLayoutAttributes): Boolean; cdecl;
    function targetContentOffsetForProposedContentOffset(proposedContentOffset: CGPoint): CGPoint; overload; cdecl;
    function targetContentOffsetForProposedContentOffset(proposedContentOffset: CGPoint; withScrollingVelocity: CGPoint): CGPoint; overload; cdecl;
    function targetIndexPathForInteractivelyMovingItem(previousIndexPath: NSIndexPath; withPosition: CGPoint): NSIndexPath; cdecl;
  end;
  TUICollectionViewLayout = class(TOCGenericImport<UICollectionViewLayoutClass, UICollectionViewLayout>) end;

  UICollectionViewFlowLayoutInvalidationContextClass = interface(UICollectionViewLayoutInvalidationContextClass)
    ['{3D81DA2C-81B3-4893-8101-3504682A0E3F}']
  end;

  UICollectionViewFlowLayoutInvalidationContext = interface(UICollectionViewLayoutInvalidationContext)
    ['{749770EE-C73E-4CFD-8613-86798B3DAAB5}']
    function invalidateFlowLayoutAttributes: Boolean; cdecl;
    function invalidateFlowLayoutDelegateMetrics: Boolean; cdecl;
    procedure setInvalidateFlowLayoutAttributes(invalidateFlowLayoutAttributes: Boolean); cdecl;
    procedure setInvalidateFlowLayoutDelegateMetrics(invalidateFlowLayoutDelegateMetrics: Boolean); cdecl;
  end;
  TUICollectionViewFlowLayoutInvalidationContext = class(TOCGenericImport<UICollectionViewFlowLayoutInvalidationContextClass, UICollectionViewFlowLayoutInvalidationContext>) end;

  UICollectionViewDelegateFlowLayout = interface(IObjectiveC)
    ['{33FF76C9-6207-4070-B5D2-79FEBC211DB9}']
    function collectionView(collectionView: UICollectionView; layout: UICollectionViewLayout;
      sizeForItemAtIndexPath: NSIndexPath): CGSize; overload; cdecl;
    function collectionView(collectionView: UICollectionView; layout: UICollectionViewLayout;
      insetForSectionAtIndex: NSInteger): UIEdgeInsets; overload; cdecl;
    [MethodName('collectionView:layout:minimumLineSpacingForSectionAtIndex:')]
    function collectionViewLayout(collectionView: UICollectionView; layout: UICollectionViewLayout;
      minimumLineSpacingForSectionAtIndex: NSInteger): CGFloat; cdecl;
    [MethodName('collectionView:layout:minimumInteritemSpacingForSectionAtIndex:')]
    function collectionViewLayoutMinimumInteritemSpacingForSectionAtIndex(collectionView: UICollectionView; layout: UICollectionViewLayout;
      minimumInteritemSpacingForSectionAtIndex: NSInteger): CGFloat; cdecl;
    [MethodName('collectionView:layout:referenceSizeForFooterInSection:')]
    function collectionViewLayoutReferenceSizeForFooterInSection(collectionView: UICollectionView; layout: UICollectionViewLayout;
      referenceSizeForFooterInSection: NSInteger): CGSize; cdecl;
    [MethodName('collectionView:layout:referenceSizeForHeaderInSection:')]
    function collectionViewLayoutReferenceSizeForHeaderInSection(collectionView: UICollectionView; layout: UICollectionViewLayout;
      referenceSizeForHeaderInSection: NSInteger): CGSize; cdecl;
  end;

  UICollectionViewFlowLayoutClass = interface(UICollectionViewLayoutClass)
    ['{186A5387-783E-4F05-9EC7-95E5A647BE39}']
  end;

  UICollectionViewFlowLayout = interface(UICollectionViewLayout)
    ['{93596EC6-2BBF-4214-9535-9E6BFAEA7F6C}']
    function estimatedItemSize: CGSize; cdecl;
    function footerReferenceSize: CGSize; cdecl;
    function headerReferenceSize: CGSize; cdecl;
    function itemSize: CGSize; cdecl;
    function minimumInteritemSpacing: CGFloat; cdecl;
    function minimumLineSpacing: CGFloat; cdecl;
    function scrollDirection: UICollectionViewScrollDirection; cdecl;
    function sectionFootersPinToVisibleBounds: Boolean; cdecl;
    function sectionHeadersPinToVisibleBounds: Boolean; cdecl;
    function sectionInset: UIEdgeInsets; cdecl;
    function sectionInsetReference: UICollectionViewFlowLayoutSectionInsetReference; cdecl;
    procedure setEstimatedItemSize(estimatedItemSize: CGSize); cdecl;
    procedure setFooterReferenceSize(footerReferenceSize: CGSize); cdecl;
    procedure setHeaderReferenceSize(headerReferenceSize: CGSize); cdecl;
    procedure setItemSize(itemSize: CGSize); cdecl;
    procedure setMinimumInteritemSpacing(minimumInteritemSpacing: CGFloat); cdecl;
    procedure setMinimumLineSpacing(minimumLineSpacing: CGFloat); cdecl;
    procedure setScrollDirection(scrollDirection: UICollectionViewScrollDirection); cdecl;
    procedure setSectionFootersPinToVisibleBounds(sectionFootersPinToVisibleBounds: Boolean); cdecl;
    procedure setSectionHeadersPinToVisibleBounds(sectionHeadersPinToVisibleBounds: Boolean); cdecl;
    procedure setSectionInset(sectionInset: UIEdgeInsets); cdecl;
    procedure setSectionInsetReference(sectionInsetReference: UICollectionViewFlowLayoutSectionInsetReference); cdecl;
  end;
  TUICollectionViewFlowLayout = class(TOCGenericImport<UICollectionViewFlowLayoutClass, UICollectionViewFlowLayout>) end;

  UICollectionViewTransitionLayoutClass = interface(UICollectionViewLayoutClass)
    ['{2EC1EC45-FA13-453A-A4E8-C818BE1181FD}']
  end;

  UICollectionViewTransitionLayout = interface(UICollectionViewLayout)
    ['{F82B0057-1BBE-4A60-B72F-0391D6C03021}']
    function currentLayout: UICollectionViewLayout; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithCurrentLayout(currentLayout: UICollectionViewLayout; nextLayout: UICollectionViewLayout): Pointer; cdecl;
    function nextLayout: UICollectionViewLayout; cdecl;
    procedure setTransitionProgress(transitionProgress: CGFloat); cdecl;
    function transitionProgress: CGFloat; cdecl;
    procedure updateValue(value: CGFloat; forAnimatedKey: NSString); cdecl;
    function valueForAnimatedKey(key: NSString): CGFloat; cdecl;
  end;
  TUICollectionViewTransitionLayout = class(TOCGenericImport<UICollectionViewTransitionLayoutClass, UICollectionViewTransitionLayout>) end;

  UICollectionViewCompositionalLayoutConfigurationClass = interface(NSObjectClass)
    ['{63C6C0A5-FC9F-4A5D-933B-73CD10185AF3}']
  end;

  UICollectionViewCompositionalLayoutConfiguration = interface(NSObject)
    ['{7BA7EE6B-70B6-40BE-AB76-48D022A148AD}']
    function boundarySupplementaryItems: NSArray; cdecl;
    function contentInsetsReference: UIContentInsetsReference; cdecl;
    function interSectionSpacing: CGFloat; cdecl;
    function scrollDirection: UICollectionViewScrollDirection; cdecl;
    procedure setBoundarySupplementaryItems(boundarySupplementaryItems: NSArray); cdecl;
    procedure setContentInsetsReference(contentInsetsReference: UIContentInsetsReference); cdecl;
    procedure setInterSectionSpacing(interSectionSpacing: CGFloat); cdecl;
    procedure setScrollDirection(scrollDirection: UICollectionViewScrollDirection); cdecl;
  end;
  TUICollectionViewCompositionalLayoutConfiguration = class(TOCGenericImport<UICollectionViewCompositionalLayoutConfigurationClass, UICollectionViewCompositionalLayoutConfiguration>) end;

  UICollectionViewCompositionalLayoutClass = interface(UICollectionViewLayoutClass)
    ['{ADBA1F24-606C-42B1-B5AA-7F9E023EA75C}']
    {class} function layoutWithListConfiguration(configuration: UICollectionLayoutListConfiguration): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UICollectionViewCompositionalLayout = interface(UICollectionViewLayout)
    ['{E7360A6C-AFF1-4AD2-A235-06E3CFC27786}']
    function configuration: UICollectionViewCompositionalLayoutConfiguration; cdecl;
    function initWithSection(section: NSCollectionLayoutSection;
      configuration: UICollectionViewCompositionalLayoutConfiguration): Pointer; overload; cdecl;
    function initWithSection(section: NSCollectionLayoutSection): Pointer; overload; cdecl;
    function initWithSectionProvider(sectionProvider: UICollectionViewCompositionalLayoutSectionProvider;
      configuration: UICollectionViewCompositionalLayoutConfiguration): Pointer; overload; cdecl;
    function initWithSectionProvider(sectionProvider: UICollectionViewCompositionalLayoutSectionProvider): Pointer; overload; cdecl;
    procedure setConfiguration(configuration: UICollectionViewCompositionalLayoutConfiguration); cdecl;
  end;
  TUICollectionViewCompositionalLayout = class(TOCGenericImport<UICollectionViewCompositionalLayoutClass, UICollectionViewCompositionalLayout>) end;

  UICollectionLayoutSectionOrthogonalScrollingPropertiesClass = interface(NSObjectClass)
    ['{2B7A6C92-FBF4-4028-91E4-AB3F06621223}']
  end;

  UICollectionLayoutSectionOrthogonalScrollingProperties = interface(NSObject)
    ['{437DF0EA-E470-4B7E-A86E-3D465BA4AA8C}']
    function bounce: UICollectionLayoutSectionOrthogonalScrollingBounce; cdecl;
    function decelerationRate: UICollectionLayoutSectionOrthogonalScrollingDecelerationRate; cdecl;
    procedure setBounce(bounce: UICollectionLayoutSectionOrthogonalScrollingBounce); cdecl;
    procedure setDecelerationRate(decelerationRate: UICollectionLayoutSectionOrthogonalScrollingDecelerationRate); cdecl;
  end;
  TUICollectionLayoutSectionOrthogonalScrollingProperties = class(TOCGenericImport<UICollectionLayoutSectionOrthogonalScrollingPropertiesClass, UICollectionLayoutSectionOrthogonalScrollingProperties>) end;

  NSCollectionLayoutSectionClass = interface(NSObjectClass)
    ['{A44C4A8B-578F-4B1E-AD7D-5CFAFC9A9BCA}']
    {class} function new: Pointer; cdecl;
    {class} function sectionWithGroup(group: NSCollectionLayoutGroup): Pointer; cdecl;
    {class} function sectionWithListConfiguration(configuration: UICollectionLayoutListConfiguration; layoutEnvironment: Pointer): Pointer; cdecl;
  end;

  NSCollectionLayoutSection = interface(NSObject)
    ['{33DD8B65-8F35-4890-8493-ED5DDD55EA3D}']
    function boundarySupplementaryItems: NSArray; cdecl;
    function contentInsets: NSDirectionalEdgeInsets; cdecl;
    function contentInsetsReference: UIContentInsetsReference; cdecl;
    function decorationItems: NSArray; cdecl;
    function interGroupSpacing: CGFloat; cdecl;
    function orthogonalScrollingBehavior: UICollectionLayoutSectionOrthogonalScrollingBehavior; cdecl;
    function orthogonalScrollingProperties: UICollectionLayoutSectionOrthogonalScrollingProperties; cdecl;
    procedure setBoundarySupplementaryItems(boundarySupplementaryItems: NSArray); cdecl;
    procedure setContentInsets(contentInsets: NSDirectionalEdgeInsets); cdecl;
    procedure setContentInsetsReference(contentInsetsReference: UIContentInsetsReference); cdecl;
    procedure setDecorationItems(decorationItems: NSArray); cdecl;
    procedure setInterGroupSpacing(interGroupSpacing: CGFloat); cdecl;
    procedure setOrthogonalScrollingBehavior(orthogonalScrollingBehavior: UICollectionLayoutSectionOrthogonalScrollingBehavior); cdecl;
    procedure setSupplementariesFollowContentInsets(supplementariesFollowContentInsets: Boolean); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("supplementaryContentInsetsReference", ios(13.0, 16.0), tvos(13.0, 16.0), watchos(6.0, 9.0), visionos(1.0, 1.0))
    procedure setSupplementaryContentInsetsReference(supplementaryContentInsetsReference: UIContentInsetsReference); cdecl;
    procedure setVisibleItemsInvalidationHandler(visibleItemsInvalidationHandler: NSCollectionLayoutSectionVisibleItemsInvalidationHandler); cdecl;
    function supplementariesFollowContentInsets: Boolean; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("supplementaryContentInsetsReference", ios(13.0, 16.0), tvos(13.0, 16.0), watchos(6.0, 9.0), visionos(1.0, 1.0))
    function supplementaryContentInsetsReference: UIContentInsetsReference; cdecl;
    function visibleItemsInvalidationHandler: NSCollectionLayoutSectionVisibleItemsInvalidationHandler; cdecl;
  end;
  TNSCollectionLayoutSection = class(TOCGenericImport<NSCollectionLayoutSectionClass, NSCollectionLayoutSection>) end;

  NSCollectionLayoutItemClass = interface(NSObjectClass)
    ['{1E880F81-6B1C-4266-99CF-46316A68AB78}']
    {class} function itemWithLayoutSize(layoutSize: NSCollectionLayoutSize; supplementaryItems: NSArray): Pointer; overload; cdecl;
    {class} function itemWithLayoutSize(layoutSize: NSCollectionLayoutSize): Pointer; overload; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  NSCollectionLayoutItem = interface(NSObject)
    ['{585E3867-361D-4B19-852A-2693510E0F81}']
    function contentInsets: NSDirectionalEdgeInsets; cdecl;
    function edgeSpacing: NSCollectionLayoutEdgeSpacing; cdecl;
    function layoutSize: NSCollectionLayoutSize; cdecl;
    procedure setContentInsets(contentInsets: NSDirectionalEdgeInsets); cdecl;
    procedure setEdgeSpacing(edgeSpacing: NSCollectionLayoutEdgeSpacing); cdecl;
    function supplementaryItems: NSArray; cdecl;
  end;
  TNSCollectionLayoutItem = class(TOCGenericImport<NSCollectionLayoutItemClass, NSCollectionLayoutItem>) end;

  NSCollectionLayoutGroupCustomItemClass = interface(NSObjectClass)
    ['{4A723033-4E48-4799-98EE-1CB6B38BCB03}']
    {class} function customItemWithFrame(frame: CGRect; zIndex: NSInteger): Pointer; overload; cdecl;
    {class} function customItemWithFrame(frame: CGRect): Pointer; overload; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  NSCollectionLayoutGroupCustomItem = interface(NSObject)
    ['{7542162D-1181-48AC-B897-11AD8E720704}']
    function frame: CGRect; cdecl;
    function zIndex: NSInteger; cdecl;
  end;
  TNSCollectionLayoutGroupCustomItem = class(TOCGenericImport<NSCollectionLayoutGroupCustomItemClass, NSCollectionLayoutGroupCustomItem>) end;

  NSCollectionLayoutGroupClass = interface(NSCollectionLayoutItemClass)
    ['{1DDC6395-FFE4-4BA3-AFFA-3245C19F8840}']
    {class} function customGroupWithLayoutSize(layoutSize: NSCollectionLayoutSize;
      itemProvider: NSCollectionLayoutGroupCustomItemProvider): Pointer; cdecl;
    {class} function horizontalGroupWithLayoutSize(layoutSize: NSCollectionLayoutSize; subitems: NSArray): Pointer; overload; cdecl;
    {class} function horizontalGroupWithLayoutSize(layoutSize: NSCollectionLayoutSize; repeatingSubitem: NSCollectionLayoutItem;
      count: NSInteger): Pointer; overload; cdecl;
    [MethodName('horizontalGroupWithLayoutSize:subitem:count:')]
    {class} function horizontalGroupWithLayoutSizeSubitem(layoutSize: NSCollectionLayoutSize; subitem: NSCollectionLayoutItem;
      count: NSInteger): Pointer; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("+horizontalGroupWithLayoutSize:repeatingSubitem:count:", ios(13.0, 16.0), tvos(13.0, 16.0), watchos(6.0, 9.0), visionos(1.0, 1.0))
    {class} function new: Pointer; cdecl;
    {class} function verticalGroupWithLayoutSize(layoutSize: NSCollectionLayoutSize; repeatingSubitem: NSCollectionLayoutItem;
      count: NSInteger): Pointer; overload; cdecl;
    {class} function verticalGroupWithLayoutSize(layoutSize: NSCollectionLayoutSize; subitems: NSArray): Pointer; overload; cdecl;
    [MethodName('verticalGroupWithLayoutSize:subitem:count:')]
    {class} function verticalGroupWithLayoutSizeSubitem(layoutSize: NSCollectionLayoutSize; subitem: NSCollectionLayoutItem;
      count: NSInteger): Pointer; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("+verticalGroupWithLayoutSize:repeatingSubitem:count:", ios(13.0, 16.0), tvos(13.0, 16.0), watchos(6.0, 9.0), visionos(1.0, 1.0))
  end;

  NSCollectionLayoutGroup = interface(NSCollectionLayoutItem)
    ['{D923B934-C1EF-4297-ACE6-5DF9197988CD}']
    function interItemSpacing: NSCollectionLayoutSpacing; cdecl;
    procedure setInterItemSpacing(interItemSpacing: NSCollectionLayoutSpacing); cdecl;
    procedure setSupplementaryItems(supplementaryItems: NSArray); cdecl;
    function subitems: NSArray; cdecl;
    function supplementaryItems: NSArray; cdecl;
    function visualDescription: NSString; cdecl;
  end;
  TNSCollectionLayoutGroup = class(TOCGenericImport<NSCollectionLayoutGroupClass, NSCollectionLayoutGroup>) end;

  NSCollectionLayoutDimensionClass = interface(NSObjectClass)
    ['{1A714CE9-3093-4983-8AE1-9F1C25E44E4B}']
    {class} function absoluteDimension(absoluteDimension: CGFloat): Pointer; cdecl;
    {class} function estimatedDimension(estimatedDimension: CGFloat): Pointer; cdecl;
    {class} function fractionalHeightDimension(fractionalHeight: CGFloat): Pointer; cdecl;
    {class} function fractionalWidthDimension(fractionalWidth: CGFloat): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
    {class} function uniformAcrossSiblingsWithEstimate(estimatedDimension: CGFloat): Pointer; cdecl;
  end;

  NSCollectionLayoutDimension = interface(NSObject)
    ['{8E487410-16FA-4637-B4CA-7BB87CBFDED6}']
    function dimension: CGFloat; cdecl;
    function isAbsolute: Boolean; cdecl;
    function isEstimated: Boolean; cdecl;
    function isFractionalHeight: Boolean; cdecl;
    function isFractionalWidth: Boolean; cdecl;
    function isUniformAcrossSiblings: Boolean; cdecl;
  end;
  TNSCollectionLayoutDimension = class(TOCGenericImport<NSCollectionLayoutDimensionClass, NSCollectionLayoutDimension>) end;

  NSCollectionLayoutSizeClass = interface(NSObjectClass)
    ['{8E268CEB-CAEB-4703-A707-2D39E41A1A38}']
    {class} function new: Pointer; cdecl;
    {class} function sizeWithWidthDimension(width: NSCollectionLayoutDimension; heightDimension: NSCollectionLayoutDimension): Pointer; cdecl;
  end;

  NSCollectionLayoutSize = interface(NSObject)
    ['{D67233BA-E1FB-42CF-BE57-8581011D52B0}']
    function heightDimension: NSCollectionLayoutDimension; cdecl;
    function widthDimension: NSCollectionLayoutDimension; cdecl;
  end;
  TNSCollectionLayoutSize = class(TOCGenericImport<NSCollectionLayoutSizeClass, NSCollectionLayoutSize>) end;

  NSCollectionLayoutSpacingClass = interface(NSObjectClass)
    ['{6F5E669E-92E2-47FD-9E09-3F01AE6523AC}']
    {class} function fixedSpacing(fixedSpacing: CGFloat): Pointer; cdecl;
    {class} function flexibleSpacing(flexibleSpacing: CGFloat): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  NSCollectionLayoutSpacing = interface(NSObject)
    ['{9DA0DDDA-4313-49CD-84CE-63C59C506A6E}']
    function isFixedSpacing: Boolean; cdecl;
    function isFlexibleSpacing: Boolean; cdecl;
    function spacing: CGFloat; cdecl;
  end;
  TNSCollectionLayoutSpacing = class(TOCGenericImport<NSCollectionLayoutSpacingClass, NSCollectionLayoutSpacing>) end;

  NSCollectionLayoutEdgeSpacingClass = interface(NSObjectClass)
    ['{087D9D2B-A463-4864-AF0F-C95DBFA8357F}']
    {class} function new: Pointer; cdecl;
    {class} function spacingForLeading(leading: NSCollectionLayoutSpacing; top: NSCollectionLayoutSpacing; trailing: NSCollectionLayoutSpacing;
      bottom: NSCollectionLayoutSpacing): Pointer; cdecl;
  end;

  NSCollectionLayoutEdgeSpacing = interface(NSObject)
    ['{D78D9FDE-C312-4049-A4AD-7E55F4F2A710}']
    function bottom: NSCollectionLayoutSpacing; cdecl;
    function leading: NSCollectionLayoutSpacing; cdecl;
    function top: NSCollectionLayoutSpacing; cdecl;
    function trailing: NSCollectionLayoutSpacing; cdecl;
  end;
  TNSCollectionLayoutEdgeSpacing = class(TOCGenericImport<NSCollectionLayoutEdgeSpacingClass, NSCollectionLayoutEdgeSpacing>) end;

  NSCollectionLayoutSupplementaryItemClass = interface(NSCollectionLayoutItemClass)
    ['{7C66FE2E-8B3D-4868-A344-3F562BF30BC2}']
    {class} function new: Pointer; cdecl;
    {class} function supplementaryItemWithLayoutSize(layoutSize: NSCollectionLayoutSize; elementKind: NSString;
      containerAnchor: NSCollectionLayoutAnchor; itemAnchor: NSCollectionLayoutAnchor): Pointer; overload; cdecl;
    {class} function supplementaryItemWithLayoutSize(layoutSize: NSCollectionLayoutSize; elementKind: NSString;
      containerAnchor: NSCollectionLayoutAnchor): Pointer; overload; cdecl;
  end;

  NSCollectionLayoutSupplementaryItem = interface(NSCollectionLayoutItem)
    ['{ADCEB7AA-F058-4A25-84A7-16CC8BF696DF}']
    function containerAnchor: NSCollectionLayoutAnchor; cdecl;
    function elementKind: NSString; cdecl;
    function itemAnchor: NSCollectionLayoutAnchor; cdecl;
    procedure setZIndex(zIndex: NSInteger); cdecl;
    function zIndex: NSInteger; cdecl;
  end;
  TNSCollectionLayoutSupplementaryItem = class(TOCGenericImport<NSCollectionLayoutSupplementaryItemClass, NSCollectionLayoutSupplementaryItem>) end;

  NSCollectionLayoutBoundarySupplementaryItemClass = interface(NSCollectionLayoutSupplementaryItemClass)
    ['{14C23429-C3B2-499A-AB4F-72CDFD4A711E}']
    {class} function boundarySupplementaryItemWithLayoutSize(layoutSize: NSCollectionLayoutSize; elementKind: NSString; alignment: NSRectAlignment;
      absoluteOffset: CGPoint): Pointer; overload; cdecl;
    {class} function boundarySupplementaryItemWithLayoutSize(layoutSize: NSCollectionLayoutSize; elementKind: NSString;
      alignment: NSRectAlignment): Pointer; overload; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  NSCollectionLayoutBoundarySupplementaryItem = interface(NSCollectionLayoutSupplementaryItem)
    ['{F05629B9-4856-4F1B-9D00-A3E055B6BF8E}']
    function alignment: NSRectAlignment; cdecl;
    function extendsBoundary: Boolean; cdecl;
    function offset: CGPoint; cdecl;
    function pinToVisibleBounds: Boolean; cdecl;
    procedure setExtendsBoundary(extendsBoundary: Boolean); cdecl;
    procedure setPinToVisibleBounds(pinToVisibleBounds: Boolean); cdecl;
  end;
  TNSCollectionLayoutBoundarySupplementaryItem = class(TOCGenericImport<NSCollectionLayoutBoundarySupplementaryItemClass, NSCollectionLayoutBoundarySupplementaryItem>) end;

  NSCollectionLayoutDecorationItemClass = interface(NSCollectionLayoutItemClass)
    ['{4E21A126-36C7-4921-B38B-76706F3B273F}']
    {class} function backgroundDecorationItemWithElementKind(elementKind: NSString): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  NSCollectionLayoutDecorationItem = interface(NSCollectionLayoutItem)
    ['{C2BC1D01-FC1F-4E6A-9F8F-716568B1BE74}']
    function elementKind: NSString; cdecl;
    procedure setZIndex(zIndex: NSInteger); cdecl;
    function zIndex: NSInteger; cdecl;
  end;
  TNSCollectionLayoutDecorationItem = class(TOCGenericImport<NSCollectionLayoutDecorationItemClass, NSCollectionLayoutDecorationItem>) end;

  NSCollectionLayoutAnchorClass = interface(NSObjectClass)
    ['{E1B93457-F25F-49E1-AADA-83D4D9F4C24E}']
    {class} function layoutAnchorWithEdges(edges: NSDirectionalRectEdge; absoluteOffset: CGPoint): Pointer; overload; cdecl;
    {class} function layoutAnchorWithEdges(edges: NSDirectionalRectEdge): Pointer; overload; cdecl;
    [MethodName('layoutAnchorWithEdges:fractionalOffset:')]
    {class} function layoutAnchorWithEdgesFractionalOffset(edges: NSDirectionalRectEdge; fractionalOffset: CGPoint): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  NSCollectionLayoutAnchor = interface(NSObject)
    ['{EFDCBFB6-5B6C-4989-BA2E-A5D2657484E2}']
    function edges: NSDirectionalRectEdge; cdecl;
    function isAbsoluteOffset: Boolean; cdecl;
    function isFractionalOffset: Boolean; cdecl;
    function offset: CGPoint; cdecl;
  end;
  TNSCollectionLayoutAnchor = class(TOCGenericImport<NSCollectionLayoutAnchorClass, NSCollectionLayoutAnchor>) end;

  NSCollectionLayoutContainer = interface(IObjectiveC)
    ['{449283B8-3437-450E-BF2B-9522E58FC4B2}']
    function contentInsets: NSDirectionalEdgeInsets; cdecl;
    function contentSize: CGSize; cdecl;
    function effectiveContentInsets: NSDirectionalEdgeInsets; cdecl;
    function effectiveContentSize: CGSize; cdecl;
  end;

  NSCollectionLayoutEnvironment = interface(IObjectiveC)
    ['{422209E5-C39C-457B-8595-6E621CD73A39}']
    function container: Pointer; cdecl;
    function traitCollection: UITraitCollection; cdecl;
  end;

  NSCollectionLayoutVisibleItem = interface(IObjectiveC)
    ['{5C7C25D5-4156-424A-86A3-5797370D0FA8}']
    function alpha: CGFloat; cdecl;
    function bounds: CGRect; cdecl;
    function center: CGPoint; cdecl;
    function frame: CGRect; cdecl;
    function indexPath: NSIndexPath; cdecl;
    function isHidden: Boolean; cdecl;
    function name: NSString; cdecl;
    function representedElementCategory: UICollectionElementCategory; cdecl;
    function representedElementKind: NSString; cdecl;
    procedure setAlpha(alpha: CGFloat); cdecl;
    procedure setCenter(center: CGPoint); cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    procedure setTransform(transform: CGAffineTransform); cdecl;
    procedure setTransform3D(transform3D: CATransform3D); cdecl;
    procedure setZIndex(zIndex: NSInteger); cdecl;
    function transform: CGAffineTransform; cdecl;
    function transform3D: CATransform3D; cdecl;
    function zIndex: NSInteger; cdecl;
  end;

  UICellAccessoryClass = interface(NSObjectClass)
    ['{7564293B-890F-4678-8387-AAF64E0EC3F6}']
  end;

  UICellAccessory = interface(NSObject)
    ['{A6A3323D-A287-442E-8ADA-83F7365ABF78}']
    function displayedState: UICellAccessoryDisplayedState; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function isHidden: Boolean; cdecl;
    function reservedLayoutWidth: CGFloat; cdecl;
    procedure setDisplayedState(displayedState: UICellAccessoryDisplayedState); cdecl;
    procedure setHidden(hidden: Boolean); cdecl;
    procedure setReservedLayoutWidth(reservedLayoutWidth: CGFloat); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
  end;
  TUICellAccessory = class(TOCGenericImport<UICellAccessoryClass, UICellAccessory>) end;

  UICellAccessoryDisclosureIndicatorClass = interface(UICellAccessoryClass)
    ['{6EA91DEE-C618-42DC-9E60-67934D5F151C}']
  end;

  UICellAccessoryDisclosureIndicator = interface(UICellAccessory)
    ['{855AF78F-CB37-4595-A9C4-2317517F4679}']
  end;
  TUICellAccessoryDisclosureIndicator = class(TOCGenericImport<UICellAccessoryDisclosureIndicatorClass, UICellAccessoryDisclosureIndicator>) end;

  UICellAccessoryDetailClass = interface(UICellAccessoryClass)
    ['{2247AA17-BF05-488D-B5E9-04F832AE02E5}']
  end;

  UICellAccessoryDetail = interface(UICellAccessory)
    ['{51F0186D-74CE-4CAD-B0F0-9A8A4A16EBF7}']
    function actionHandler: TUICellAccessoryDetailBlockMethod1; cdecl;
    procedure setActionHandler(actionHandler: TUICellAccessoryDetailBlockMethod1); cdecl;
  end;
  TUICellAccessoryDetail = class(TOCGenericImport<UICellAccessoryDetailClass, UICellAccessoryDetail>) end;

  UICellAccessoryCheckmarkClass = interface(UICellAccessoryClass)
    ['{1A1A7A79-BC3F-43BA-9DD7-1D947D3F7B43}']
  end;

  UICellAccessoryCheckmark = interface(UICellAccessory)
    ['{4EC40E6D-A389-4708-8169-0D0689AA5416}']
  end;
  TUICellAccessoryCheckmark = class(TOCGenericImport<UICellAccessoryCheckmarkClass, UICellAccessoryCheckmark>) end;

  UICellAccessoryDeleteClass = interface(UICellAccessoryClass)
    ['{9B8D09ED-D763-4BCF-A076-EC6DC58B4F4E}']
  end;

  UICellAccessoryDelete = interface(UICellAccessory)
    ['{6D9BDE4C-E47E-441A-8036-3911C0645A2E}']
    function actionHandler: TUICellAccessoryDeleteBlockMethod1; cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setActionHandler(actionHandler: TUICellAccessoryDeleteBlockMethod1); cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
  end;
  TUICellAccessoryDelete = class(TOCGenericImport<UICellAccessoryDeleteClass, UICellAccessoryDelete>) end;

  UICellAccessoryInsertClass = interface(UICellAccessoryClass)
    ['{A9A0A215-F2B2-4F20-A9A3-E0712581D363}']
  end;

  UICellAccessoryInsert = interface(UICellAccessory)
    ['{69F9FDFA-80DD-46A9-B01C-1ADEF73A9D51}']
    function actionHandler: TUICellAccessoryInsertBlockMethod1; cdecl;
    function backgroundColor: UIColor; cdecl;
    procedure setActionHandler(actionHandler: TUICellAccessoryInsertBlockMethod1); cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
  end;
  TUICellAccessoryInsert = class(TOCGenericImport<UICellAccessoryInsertClass, UICellAccessoryInsert>) end;

  UICellAccessoryReorderClass = interface(UICellAccessoryClass)
    ['{AA957531-463E-43D5-8A94-E79F12504408}']
  end;

  UICellAccessoryReorder = interface(UICellAccessory)
    ['{C6967C6E-755C-49CE-899B-82AACEB729AE}']
    procedure setShowsVerticalSeparator(showsVerticalSeparator: Boolean); cdecl;
    function showsVerticalSeparator: Boolean; cdecl;
  end;
  TUICellAccessoryReorder = class(TOCGenericImport<UICellAccessoryReorderClass, UICellAccessoryReorder>) end;

  UICellAccessoryMultiselectClass = interface(UICellAccessoryClass)
    ['{9D53317A-75F4-4A2D-B085-46D42557A7FA}']
  end;

  UICellAccessoryMultiselect = interface(UICellAccessory)
    ['{7D653B6D-08DC-488B-96C5-C35427B45C66}']
    function backgroundColor: UIColor; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
  end;
  TUICellAccessoryMultiselect = class(TOCGenericImport<UICellAccessoryMultiselectClass, UICellAccessoryMultiselect>) end;

  UICellAccessoryOutlineDisclosureClass = interface(UICellAccessoryClass)
    ['{63A03FA8-3477-4901-B29E-FF8056E3A61E}']
  end;

  UICellAccessoryOutlineDisclosure = interface(UICellAccessory)
    ['{9B8914BC-38C1-4B85-AA35-EFA8192995B9}']
    function actionHandler: TUICellAccessoryOutlineDisclosureBlockMethod1; cdecl;
    procedure setActionHandler(actionHandler: TUICellAccessoryOutlineDisclosureBlockMethod1); cdecl;
    procedure setStyle(style: UICellAccessoryOutlineDisclosureStyle); cdecl;
    function style: UICellAccessoryOutlineDisclosureStyle; cdecl;
  end;
  TUICellAccessoryOutlineDisclosure = class(TOCGenericImport<UICellAccessoryOutlineDisclosureClass, UICellAccessoryOutlineDisclosure>) end;

  UICellAccessoryPopUpMenuClass = interface(UICellAccessoryClass)
    ['{BC09DF47-58FE-4B3A-BC52-6ABEF380E42C}']
    {class} function new: Pointer; cdecl;
  end;

  UICellAccessoryPopUpMenu = interface(UICellAccessory)
    ['{74F6FBBD-1D09-45CD-B8F5-6086405DEF53}']
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithMenu(menu: UIMenu): Pointer; cdecl;
    function menu: UIMenu; cdecl;
    function selectedElementDidChangeHandler: TUICellAccessoryPopUpMenuBlockMethod1; cdecl;
    procedure setSelectedElementDidChangeHandler(selectedElementDidChangeHandler: TUICellAccessoryPopUpMenuBlockMethod2); cdecl;
  end;
  TUICellAccessoryPopUpMenu = class(TOCGenericImport<UICellAccessoryPopUpMenuClass, UICellAccessoryPopUpMenu>) end;

  UICellAccessoryLabelClass = interface(UICellAccessoryClass)
    ['{DFA35379-47C1-4F79-9A4B-390AF8B9C4A3}']
    {class} function new: Pointer; cdecl;
  end;

  UICellAccessoryLabel = interface(UICellAccessory)
    ['{90A0ED0A-58D6-4256-ADAA-FE209157A67E}']
    function adjustsFontForContentSizeCategory: Boolean; cdecl;
    function font: UIFont; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithText(text: NSString): Pointer; cdecl;
    procedure setAdjustsFontForContentSizeCategory(adjustsFontForContentSizeCategory: Boolean); cdecl;
    procedure setFont(font: UIFont); cdecl;
    function text: NSString; cdecl;
  end;
  TUICellAccessoryLabel = class(TOCGenericImport<UICellAccessoryLabelClass, UICellAccessoryLabel>) end;

  UICellAccessoryCustomViewClass = interface(UICellAccessoryClass)
    ['{FE8FE594-E60C-456F-A83F-9A3B942FBFD4}']
    {class} function new: Pointer; cdecl;
  end;

  UICellAccessoryCustomView = interface(UICellAccessory)
    ['{9D4090F9-2A36-49B8-A28C-206823125B8A}']
    function customView: UIView; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithCustomView(customView: UIView; placement: UICellAccessoryPlacement): Pointer; cdecl;
    function maintainsFixedSize: Boolean; cdecl;
    function placement: UICellAccessoryPlacement; cdecl;
    function position: UICellAccessoryPosition; cdecl;
    procedure setMaintainsFixedSize(maintainsFixedSize: Boolean); cdecl;
    procedure setPosition(position: UICellAccessoryPosition); cdecl;
  end;
  TUICellAccessoryCustomView = class(TOCGenericImport<UICellAccessoryCustomViewClass, UICellAccessoryCustomView>) end;

  UICollectionViewListCellClass = interface(UICollectionViewCellClass)
    ['{6F657E40-7EF8-40BD-9D34-374D2A62E432}']
  end;

  UICollectionViewListCell = interface(UICollectionViewCell)
    ['{534256E1-F8E4-433A-BC50-31CED5047695}']
    function accessories: NSArray; cdecl;
    function defaultContentConfiguration: UIListContentConfiguration; cdecl;
    function indentationLevel: NSInteger; cdecl;
    function indentationWidth: CGFloat; cdecl;
    function indentsAccessories: Boolean; cdecl;
    function separatorLayoutGuide: UILayoutGuide; cdecl;
    procedure setAccessories(accessories: NSArray); cdecl;
    procedure setIndentationLevel(indentationLevel: NSInteger); cdecl;
    procedure setIndentationWidth(indentationWidth: CGFloat); cdecl;
    procedure setIndentsAccessories(indentsAccessories: Boolean); cdecl;
  end;
  TUICollectionViewListCell = class(TOCGenericImport<UICollectionViewListCellClass, UICollectionViewListCell>) end;

  UIGestureRecognizerClass = interface(NSObjectClass)
    ['{1F0265AE-A786-4E3C-8E25-A4CB986E2B69}']
  end;

  UIGestureRecognizer = interface(NSObject)
    ['{AEBAB6C3-DDA1-410C-9CC3-2D07E8010ADA}']
    procedure addTarget(target: Pointer; action: SEL); cdecl;
    function allowedPressTypes: NSArray; cdecl;
    function allowedTouchTypes: NSArray; cdecl;
    function buttonMask: UIEventButtonMask; cdecl;
    function canBePreventedByGestureRecognizer(preventingGestureRecognizer: UIGestureRecognizer): Boolean; cdecl;
    function cancelsTouchesInView: Boolean; cdecl;
    function canPreventGestureRecognizer(preventedGestureRecognizer: UIGestureRecognizer): Boolean; cdecl;
    function delaysTouchesBegan: Boolean; cdecl;
    function delaysTouchesEnded: Boolean; cdecl;
    function delegate: Pointer; cdecl;
    procedure ignorePress(button: UIPress; forEvent: UIPressesEvent); cdecl;
    procedure ignoreTouch(touch: UITouch; forEvent: UIEvent); cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithTarget(target: Pointer; action: SEL): Pointer; cdecl;
    function isEnabled: Boolean; cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
    function locationOfTouch(touchIndex: NSUInteger; inView: UIView): CGPoint; cdecl;
    function modifierFlags: UIKeyModifierFlags; cdecl;
    function name: NSString; cdecl;
    function numberOfTouches: NSUInteger; cdecl;
    procedure pressesBegan(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesCancelled(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesChanged(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure pressesEnded(presses: NSSet; withEvent: UIPressesEvent); cdecl;
    procedure removeTarget(target: Pointer; action: SEL); cdecl;
    procedure requireGestureRecognizerToFail(otherGestureRecognizer: UIGestureRecognizer); cdecl;
    function requiresExclusiveTouchType: Boolean; cdecl;
    procedure reset; cdecl;
    procedure setAllowedPressTypes(allowedPressTypes: NSArray); cdecl;
    procedure setAllowedTouchTypes(allowedTouchTypes: NSArray); cdecl;
    procedure setCancelsTouchesInView(cancelsTouchesInView: Boolean); cdecl;
    procedure setDelaysTouchesBegan(delaysTouchesBegan: Boolean); cdecl;
    procedure setDelaysTouchesEnded(delaysTouchesEnded: Boolean); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    procedure setName(name: NSString); cdecl;
    procedure setRequiresExclusiveTouchType(requiresExclusiveTouchType: Boolean); cdecl;
    procedure setState(state: UIGestureRecognizerState); cdecl;
    function shouldBeRequiredToFailByGestureRecognizer(otherGestureRecognizer: UIGestureRecognizer): Boolean; cdecl;
    function shouldReceiveEvent(event: UIEvent): Boolean; cdecl;
    function shouldRequireFailureOfGestureRecognizer(otherGestureRecognizer: UIGestureRecognizer): Boolean; cdecl;
    function state: UIGestureRecognizerState; cdecl;
    procedure touchesBegan(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesCancelled(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesEnded(touches: NSSet; withEvent: UIEvent); cdecl;
    procedure touchesEstimatedPropertiesUpdated(touches: NSSet); cdecl;
    procedure touchesMoved(touches: NSSet; withEvent: UIEvent); cdecl;
    function view: UIView; cdecl;
  end;
  TUIGestureRecognizer = class(TOCGenericImport<UIGestureRecognizerClass, UIGestureRecognizer>) end;

  UIGestureRecognizerDelegate = interface(IObjectiveC)
    ['{E9D8C42E-ED8A-4CAC-8751-DC51F2D1DCD5}']
    function gestureRecognizer(gestureRecognizer: UIGestureRecognizer; shouldReceiveTouch: UITouch): Boolean; overload; cdecl;
    function gestureRecognizer(gestureRecognizer: UIGestureRecognizer; shouldReceivePress: UIPress): Boolean; overload; cdecl;
    function gestureRecognizer(gestureRecognizer: UIGestureRecognizer; shouldReceiveEvent: UIEvent): Boolean; overload; cdecl;
    function gestureRecognizer(gestureRecognizer: UIGestureRecognizer;
      shouldRecognizeSimultaneouslyWithGestureRecognizer: UIGestureRecognizer): Boolean; overload; cdecl;
    function gestureRecognizerShouldBegin(gestureRecognizer: UIGestureRecognizer): Boolean; cdecl;
    [MethodName('gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:')]
    function gestureRecognizerShouldBeRequiredToFailByGestureRecognizer(gestureRecognizer: UIGestureRecognizer;
      shouldBeRequiredToFailByGestureRecognizer: UIGestureRecognizer): Boolean; cdecl;
    [MethodName('gestureRecognizer:shouldRequireFailureOfGestureRecognizer:')]
    function gestureRecognizerShouldRequireFailureOfGestureRecognizer(gestureRecognizer: UIGestureRecognizer;
      shouldRequireFailureOfGestureRecognizer: UIGestureRecognizer): Boolean; cdecl;
  end;

  UISwipeGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{96B2EB87-4CAD-4FE9-AE71-2359B1463BCB}']
  end;

  UISwipeGestureRecognizer = interface(UIGestureRecognizer)
    ['{4D949A4F-B41C-4656-BE30-1DA1B060ABCA}']
    function direction: UISwipeGestureRecognizerDirection; cdecl;
    function numberOfTouchesRequired: NSUInteger; cdecl;
    procedure setDirection(direction: UISwipeGestureRecognizerDirection); cdecl;
    procedure setNumberOfTouchesRequired(numberOfTouchesRequired: NSUInteger); cdecl;
  end;
  TUISwipeGestureRecognizer = class(TOCGenericImport<UISwipeGestureRecognizerClass, UISwipeGestureRecognizer>) end;

  UIContextualActionClass = interface(NSObjectClass)
    ['{531638C7-528D-4D76-9245-A706C379659C}']
    {class} function contextualActionWithStyle(style: UIContextualActionStyle; title: NSString; handler: UIContextualActionHandler): Pointer; cdecl;
  end;

  UIContextualAction = interface(NSObject)
    ['{19EC27B3-6020-4217-9EB9-E302972AA987}']
    function backgroundColor: UIColor; cdecl;
    function handler: UIContextualActionHandler; cdecl;
    function image: UIImage; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function style: UIContextualActionStyle; cdecl;
    function title: NSString; cdecl;
  end;
  TUIContextualAction = class(TOCGenericImport<UIContextualActionClass, UIContextualAction>) end;

  UISwipeActionsConfigurationClass = interface(NSObjectClass)
    ['{F006555A-DD86-4F66-A710-DFB4D3CA8CAA}']
    {class} function configurationWithActions(actions: NSArray): Pointer; cdecl;
  end;

  UISwipeActionsConfiguration = interface(NSObject)
    ['{BE53668D-782D-4DE2-BCF4-144605885064}']
    function actions: NSArray; cdecl;
    function performsFirstActionWithFullSwipe: Boolean; cdecl;
    procedure setPerformsFirstActionWithFullSwipe(performsFirstActionWithFullSwipe: Boolean); cdecl;
  end;
  TUISwipeActionsConfiguration = class(TOCGenericImport<UISwipeActionsConfigurationClass, UISwipeActionsConfiguration>) end;

  UITableViewCellClass = interface(UIViewClass)
    ['{5BA314B4-12E7-438F-9C5B-840663FA5E64}']
  end;

  UITableViewCell = interface(UIView)
    ['{E3F0A096-C0B4-4E86-9B66-F2662FC3DCE9}']
    function accessoryAction: SEL; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function accessoryType: UITableViewCellAccessoryType; cdecl;
    function accessoryView: UIView; cdecl;
    function automaticallyUpdatesBackgroundConfiguration: Boolean; cdecl;
    function automaticallyUpdatesContentConfiguration: Boolean; cdecl;
    function backgroundConfiguration: UIBackgroundConfiguration; cdecl;
    function backgroundView: UIView; cdecl;
    function configurationState: UICellConfigurationState; cdecl;
    function configurationUpdateHandler: UITableViewCellConfigurationUpdateHandler; cdecl;
    function contentConfiguration: Pointer; cdecl;
    function contentView: UIView; cdecl;
    function defaultBackgroundConfiguration: UIBackgroundConfiguration; cdecl;
    function defaultContentConfiguration: UIListContentConfiguration; cdecl;
    function detailTextLabel: UILabel; cdecl; // API_DEPRECATED("Use UIListContentConfiguration instead, this property will be deprecated in a future release.", ios(3.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    procedure didTransitionToState(state: UITableViewCellStateMask); cdecl;
    procedure dragStateDidChange(dragState: UITableViewCellDragState); cdecl;
    function editAction: SEL; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function editingAccessoryType: UITableViewCellAccessoryType; cdecl;
    function editingAccessoryView: UIView; cdecl;
    function editingStyle: UITableViewCellEditingStyle; cdecl;
    function focusStyle: UITableViewCellFocusStyle; cdecl;
    function font: UIFont; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function hidesAccessoryWhenEditing: Boolean; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function image: UIImage; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function imageView: UIImageView; cdecl; // API_DEPRECATED("Use UIListContentConfiguration instead, this property will be deprecated in a future release.", ios(3.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    function indentationLevel: NSInteger; cdecl;
    function indentationWidth: CGFloat; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect; reuseIdentifier: NSString): Pointer; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function initWithStyle(style: UITableViewCellStyle; reuseIdentifier: NSString): Pointer; cdecl;
    function isEditing: Boolean; cdecl;
    function isHighlighted: Boolean; cdecl;
    function isSelected: Boolean; cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function multipleSelectionBackgroundView: UIView; cdecl;
    procedure prepareForReuse; cdecl;
    function reuseIdentifier: NSString; cdecl;
    function selectedBackgroundView: UIView; cdecl;
    function selectedImage: UIImage; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function selectedTextColor: UIColor; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function selectionStyle: UITableViewCellSelectionStyle; cdecl;
    function separatorInset: UIEdgeInsets; cdecl;
    procedure setAccessoryAction(accessoryAction: SEL); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setAccessoryType(accessoryType: UITableViewCellAccessoryType); cdecl;
    procedure setAccessoryView(accessoryView: UIView); cdecl;
    procedure setAutomaticallyUpdatesBackgroundConfiguration(automaticallyUpdatesBackgroundConfiguration: Boolean); cdecl;
    procedure setAutomaticallyUpdatesContentConfiguration(automaticallyUpdatesContentConfiguration: Boolean); cdecl;
    procedure setBackgroundConfiguration(backgroundConfiguration: UIBackgroundConfiguration); cdecl;
    procedure setBackgroundView(backgroundView: UIView); cdecl;
    procedure setConfigurationUpdateHandler(configurationUpdateHandler: UITableViewCellConfigurationUpdateHandler); cdecl;
    procedure setContentConfiguration(contentConfiguration: Pointer); cdecl;
    procedure setEditAction(editAction: SEL); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setEditing(editing: Boolean); overload; cdecl;
    procedure setEditing(editing: Boolean; animated: Boolean); overload; cdecl;
    procedure setEditingAccessoryType(editingAccessoryType: UITableViewCellAccessoryType); cdecl;
    procedure setEditingAccessoryView(editingAccessoryView: UIView); cdecl;
    procedure setFocusStyle(focusStyle: UITableViewCellFocusStyle); cdecl;
    procedure setFont(font: UIFont); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setHidesAccessoryWhenEditing(hidesAccessoryWhenEditing: Boolean); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setHighlighted(highlighted: Boolean; animated: Boolean); overload; cdecl;
    procedure setHighlighted(highlighted: Boolean); overload; cdecl;
    procedure setImage(image: UIImage); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setIndentationLevel(indentationLevel: NSInteger); cdecl;
    procedure setIndentationWidth(indentationWidth: CGFloat); cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setMultipleSelectionBackgroundView(multipleSelectionBackgroundView: UIView); cdecl;
    procedure setNeedsUpdateConfiguration; cdecl;
    procedure setSelected(selected: Boolean; animated: Boolean); overload; cdecl;
    procedure setSelected(selected: Boolean); overload; cdecl;
    procedure setSelectedBackgroundView(selectedBackgroundView: UIView); cdecl;
    procedure setSelectedImage(selectedImage: UIImage); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setSelectedTextColor(selectedTextColor: UIColor); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setSelectionStyle(selectionStyle: UITableViewCellSelectionStyle); cdecl;
    procedure setSeparatorInset(separatorInset: UIEdgeInsets); cdecl;
    procedure setShouldIndentWhileEditing(shouldIndentWhileEditing: Boolean); cdecl;
    procedure setShowsReorderControl(showsReorderControl: Boolean); cdecl;
    procedure setTarget(target: Pointer); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setText(text: NSString); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setTextAlignment(textAlignment: NSTextAlignment); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setTextColor(textColor: UIColor); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setUserInteractionEnabledWhileDragging(userInteractionEnabledWhileDragging: Boolean); cdecl;
    function shouldIndentWhileEditing: Boolean; cdecl;
    function showingDeleteConfirmation: Boolean; cdecl;
    function showsReorderControl: Boolean; cdecl;
    function target: Pointer; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function text: NSString; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function textAlignment: NSTextAlignment; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function textColor: UIColor; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function textLabel: UILabel; cdecl; // API_DEPRECATED("Use UIListContentConfiguration instead, this property will be deprecated in a future release.", ios(3.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    procedure updateConfigurationUsingState(state: UICellConfigurationState); cdecl;
    function userInteractionEnabledWhileDragging: Boolean; cdecl;
    procedure willTransitionToState(state: UITableViewCellStateMask); cdecl;
  end;
  TUITableViewCell = class(TOCGenericImport<UITableViewCellClass, UITableViewCell>) end;

  UITableViewRowActionClass = interface(NSObjectClass)
    ['{9474DA60-AFC5-4D64-821A-9E565EDB213C}']
    {class} function rowActionWithStyle(style: UITableViewRowActionStyle; title: NSString;
      handler: TUITableViewRowActionBlockMethod1): Pointer; cdecl;
  end;

  UITableViewRowAction = interface(NSObject)
    ['{D92045CC-AB46-422C-A26F-994A41E887C2}']
    function backgroundColor: UIColor; cdecl;
    function backgroundEffect: UIVisualEffect; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    procedure setBackgroundEffect(backgroundEffect: UIVisualEffect); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function style: UITableViewRowActionStyle; cdecl;
    function title: NSString; cdecl;
  end;
  TUITableViewRowAction = class(TOCGenericImport<UITableViewRowActionClass, UITableViewRowAction>) end;

  UITableViewFocusUpdateContextClass = interface(UIFocusUpdateContextClass)
    ['{1F79809A-EA68-41B3-9110-0ECCFF07F65A}']
  end;

  UITableViewFocusUpdateContext = interface(UIFocusUpdateContext)
    ['{587788E8-5B75-43E9-A372-1A34640EEE48}']
    function nextFocusedIndexPath: NSIndexPath; cdecl;
    function previouslyFocusedIndexPath: NSIndexPath; cdecl;
  end;
  TUITableViewFocusUpdateContext = class(TOCGenericImport<UITableViewFocusUpdateContextClass, UITableViewFocusUpdateContext>) end;

  UITableViewDelegate = interface(IObjectiveC)
    ['{4FED7E80-01D7-40C7-8A4E-DCA8B4256FE4}']
    function indexPathForPreferredFocusedViewInTableView(tableView: UITableView): NSIndexPath; cdecl;
    function tableView(tableView: UITableView; canPerformAction: SEL; forRowAtIndexPath: NSIndexPath; withSender: Pointer): Boolean; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("tableView:contextMenuConfigurationForRowAtIndexPath:point:", ios(5.0, 13.0))
    function tableView(tableView: UITableView; shouldUpdateFocusInContext: UITableViewFocusUpdateContext): Boolean; overload; cdecl;
    procedure tableView(tableView: UITableView; didUpdateFocusInContext: UITableViewFocusUpdateContext;
      withAnimationCoordinator: UIFocusAnimationCoordinator); overload; cdecl;
    function tableView(tableView: UITableView; shouldSpringLoadRowAtIndexPath: NSIndexPath; withContext: Pointer): Boolean; overload; cdecl;
    function tableView(tableView: UITableView; contextMenuConfigurationForRowAtIndexPath: NSIndexPath;
      point: CGPoint): UIContextMenuConfiguration; overload; cdecl;
    function tableView(tableView: UITableView; targetIndexPathForMoveFromRowAtIndexPath: NSIndexPath;
      toProposedIndexPath: NSIndexPath): NSIndexPath; overload; cdecl;
    function tableView(tableView: UITableView;
      previewForHighlightingContextMenuWithConfiguration: UIContextMenuConfiguration): UITargetedPreview; overload; cdecl;
    procedure tableView(tableView: UITableView; willPerformPreviewActionForMenuWithConfiguration: UIContextMenuConfiguration;
      animator: Pointer); overload; cdecl;
    procedure tableView(tableView: UITableView; willDisplayHeaderView: UIView; forSection: NSInteger); overload; cdecl;
    procedure tableView(tableView: UITableView; willDisplayCell: UITableViewCell; forRowAtIndexPath: NSIndexPath); overload; cdecl;
    function tableView(tableView: UITableView; heightForRowAtIndexPath: NSIndexPath): CGFloat; overload; cdecl;
    function tableView(tableView: UITableView; heightForHeaderInSection: NSInteger): CGFloat; overload; cdecl;
    [MethodName('tableView:accessoryButtonTappedForRowWithIndexPath:')]
    procedure tableViewAccessoryButtonTappedForRowWithIndexPath(tableView: UITableView; accessoryButtonTappedForRowWithIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:accessoryTypeForRowWithIndexPath:')]
    function tableViewAccessoryTypeForRowWithIndexPath(tableView: UITableView;
      accessoryTypeForRowWithIndexPath: NSIndexPath): UITableViewCellAccessoryType; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    [MethodName('tableView:canFocusRowAtIndexPath:')]
    function tableViewCanFocusRowAtIndexPath(tableView: UITableView; canFocusRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:canPerformPrimaryActionForRowAtIndexPath:')]
    function tableViewCanPerformPrimaryActionForRowAtIndexPath(tableView: UITableView;
      canPerformPrimaryActionForRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:didBeginMultipleSelectionInteractionAtIndexPath:')]
    procedure tableViewDidBeginMultipleSelectionInteractionAtIndexPath(tableView: UITableView;
      didBeginMultipleSelectionInteractionAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:didDeselectRowAtIndexPath:')]
    procedure tableViewDidDeselectRowAtIndexPath(tableView: UITableView; didDeselectRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:didEndDisplayingCell:forRowAtIndexPath:')]
    procedure tableViewDidEndDisplayingCell(tableView: UITableView; didEndDisplayingCell: UITableViewCell; forRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:didEndDisplayingFooterView:forSection:')]
    procedure tableViewDidEndDisplayingFooterView(tableView: UITableView; didEndDisplayingFooterView: UIView; forSection: NSInteger); cdecl;
    [MethodName('tableView:didEndDisplayingHeaderView:forSection:')]
    procedure tableViewDidEndDisplayingHeaderView(tableView: UITableView; didEndDisplayingHeaderView: UIView; forSection: NSInteger); cdecl;
    [MethodName('tableView:didEndEditingRowAtIndexPath:')]
    procedure tableViewDidEndEditingRowAtIndexPath(tableView: UITableView; didEndEditingRowAtIndexPath: NSIndexPath); cdecl;
    procedure tableViewDidEndMultipleSelectionInteraction(tableView: UITableView); cdecl;
    [MethodName('tableView:didHighlightRowAtIndexPath:')]
    procedure tableViewDidHighlightRowAtIndexPath(tableView: UITableView; didHighlightRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:didSelectRowAtIndexPath:')]
    procedure tableViewDidSelectRowAtIndexPath(tableView: UITableView; didSelectRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:didUnhighlightRowAtIndexPath:')]
    procedure tableViewDidUnhighlightRowAtIndexPath(tableView: UITableView; didUnhighlightRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:editActionsForRowAtIndexPath:')]
    function tableViewEditActionsForRowAtIndexPath(tableView: UITableView; editActionsForRowAtIndexPath: NSIndexPath): NSArray; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:", ios(8.0, 13.0))
    [MethodName('tableView:editingStyleForRowAtIndexPath:')]
    function tableViewEditingStyleForRowAtIndexPath(tableView: UITableView;
      editingStyleForRowAtIndexPath: NSIndexPath): UITableViewCellEditingStyle; cdecl;
    [MethodName('tableView:estimatedHeightForFooterInSection:')]
    function tableViewEstimatedHeightForFooterInSection(tableView: UITableView; estimatedHeightForFooterInSection: NSInteger): CGFloat; cdecl;
    [MethodName('tableView:estimatedHeightForHeaderInSection:')]
    function tableViewEstimatedHeightForHeaderInSection(tableView: UITableView; estimatedHeightForHeaderInSection: NSInteger): CGFloat; cdecl;
    [MethodName('tableView:estimatedHeightForRowAtIndexPath:')]
    function tableViewEstimatedHeightForRowAtIndexPath(tableView: UITableView; estimatedHeightForRowAtIndexPath: NSIndexPath): CGFloat; cdecl;
    [MethodName('tableView:heightForFooterInSection:')]
    function tableViewHeightForFooterInSection(tableView: UITableView; heightForFooterInSection: NSInteger): CGFloat; cdecl;
    [MethodName('tableView:indentationLevelForRowAtIndexPath:')]
    function tableViewIndentationLevelForRowAtIndexPath(tableView: UITableView; indentationLevelForRowAtIndexPath: NSIndexPath): NSInteger; cdecl;
    [MethodName('tableView:leadingSwipeActionsConfigurationForRowAtIndexPath:')]
    function tableViewLeadingSwipeActionsConfigurationForRowAtIndexPath(tableView: UITableView;
      leadingSwipeActionsConfigurationForRowAtIndexPath: NSIndexPath): UISwipeActionsConfiguration; cdecl;
    [MethodName('tableView:performAction:forRowAtIndexPath:withSender:')]
    procedure tableViewPerformAction(tableView: UITableView; performAction: SEL; forRowAtIndexPath: NSIndexPath; withSender: Pointer); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("tableView:contextMenuConfigurationForRowAtIndexPath:", ios(5.0, 13.0))
    [MethodName('tableView:performPrimaryActionForRowAtIndexPath:')]
    procedure tableViewPerformPrimaryActionForRowAtIndexPath(tableView: UITableView; performPrimaryActionForRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:previewForDismissingContextMenuWithConfiguration:')]
    function tableViewPreviewForDismissingContextMenuWithConfiguration(tableView: UITableView;
      previewForDismissingContextMenuWithConfiguration: UIContextMenuConfiguration): UITargetedPreview; cdecl;
    [MethodName('tableView:selectionFollowsFocusForRowAtIndexPath:')]
    function tableViewSelectionFollowsFocusForRowAtIndexPath(tableView: UITableView;
      selectionFollowsFocusForRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:shouldBeginMultipleSelectionInteractionAtIndexPath:')]
    function tableViewShouldBeginMultipleSelectionInteractionAtIndexPath(tableView: UITableView;
      shouldBeginMultipleSelectionInteractionAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:shouldHighlightRowAtIndexPath:')]
    function tableViewShouldHighlightRowAtIndexPath(tableView: UITableView; shouldHighlightRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:shouldIndentWhileEditingRowAtIndexPath:')]
    function tableViewShouldIndentWhileEditingRowAtIndexPath(tableView: UITableView;
      shouldIndentWhileEditingRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:shouldShowMenuForRowAtIndexPath:')]
    function tableViewShouldShowMenuForRowAtIndexPath(tableView: UITableView; shouldShowMenuForRowAtIndexPath: NSIndexPath): Boolean; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("tableView:contextMenuConfigurationForRowAtIndexPath:point:", ios(5.0, 13.0))
    [MethodName('tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:')]
    function tableViewTitleForDeleteConfirmationButtonForRowAtIndexPath(tableView: UITableView;
      titleForDeleteConfirmationButtonForRowAtIndexPath: NSIndexPath): NSString; cdecl;
    [MethodName('tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:')]
    function tableViewTrailingSwipeActionsConfigurationForRowAtIndexPath(tableView: UITableView;
      trailingSwipeActionsConfigurationForRowAtIndexPath: NSIndexPath): UISwipeActionsConfiguration; cdecl;
    [MethodName('tableView:viewForFooterInSection:')]
    function tableViewViewForFooterInSection(tableView: UITableView; viewForFooterInSection: NSInteger): UIView; cdecl;
    [MethodName('tableView:viewForHeaderInSection:')]
    function tableViewViewForHeaderInSection(tableView: UITableView; viewForHeaderInSection: NSInteger): UIView; cdecl;
    [MethodName('tableView:willBeginEditingRowAtIndexPath:')]
    procedure tableViewWillBeginEditingRowAtIndexPath(tableView: UITableView; willBeginEditingRowAtIndexPath: NSIndexPath); cdecl;
    [MethodName('tableView:willDeselectRowAtIndexPath:')]
    function tableViewWillDeselectRowAtIndexPath(tableView: UITableView; willDeselectRowAtIndexPath: NSIndexPath): NSIndexPath; cdecl;
    [MethodName('tableView:willDisplayContextMenuWithConfiguration:animator:')]
    procedure tableViewWillDisplayContextMenuWithConfiguration(tableView: UITableView;
      willDisplayContextMenuWithConfiguration: UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName('tableView:willDisplayFooterView:forSection:')]
    procedure tableViewWillDisplayFooterView(tableView: UITableView; willDisplayFooterView: UIView; forSection: NSInteger); cdecl;
    [MethodName('tableView:willEndContextMenuInteractionWithConfiguration:animator:')]
    procedure tableViewWillEndContextMenuInteractionWithConfiguration(tableView: UITableView;
      willEndContextMenuInteractionWithConfiguration: UIContextMenuConfiguration; animator: Pointer); cdecl;
    [MethodName('tableView:willSelectRowAtIndexPath:')]
    function tableViewWillSelectRowAtIndexPath(tableView: UITableView; willSelectRowAtIndexPath: NSIndexPath): NSIndexPath; cdecl;
  end;

  UITableViewClass = interface(UIScrollViewClass)
    ['{F118A688-BCE3-4B38-881C-282E7912187D}']
  end;

  UITableView = interface(UIScrollView)
    ['{628573C7-B676-4A41-A770-D257F41BF012}']
    function allowsFocus: Boolean; cdecl;
    function allowsFocusDuringEditing: Boolean; cdecl;
    function allowsMultipleSelection: Boolean; cdecl;
    function allowsMultipleSelectionDuringEditing: Boolean; cdecl;
    function allowsSelection: Boolean; cdecl;
    function allowsSelectionDuringEditing: Boolean; cdecl;
    function backgroundView: UIView; cdecl;
    procedure beginUpdates; cdecl;
    function cellForRowAtIndexPath(indexPath: NSIndexPath): UITableViewCell; cdecl;
    function cellLayoutMarginsFollowReadableWidth: Boolean; cdecl;
    function contextMenuInteraction: UIContextMenuInteraction; cdecl;
    function dataSource: Pointer; cdecl;
    function delegate: Pointer; cdecl;
    procedure deleteRowsAtIndexPaths(indexPaths: NSArray; withRowAnimation: UITableViewRowAnimation); cdecl;
    procedure deleteSections(sections: NSIndexSet; withRowAnimation: UITableViewRowAnimation); cdecl;
    function dequeueReusableCellWithIdentifier(identifier: NSString): UITableViewCell; overload; cdecl;
    function dequeueReusableCellWithIdentifier(identifier: NSString; forIndexPath: NSIndexPath): UITableViewCell; overload; cdecl;
    function dequeueReusableHeaderFooterViewWithIdentifier(identifier: NSString): UITableViewHeaderFooterView; cdecl;
    procedure deselectRowAtIndexPath(indexPath: NSIndexPath; animated: Boolean); cdecl;
    function dragDelegate: Pointer; cdecl;
    function dragInteractionEnabled: Boolean; cdecl;
    function dropDelegate: Pointer; cdecl;
    procedure endUpdates; cdecl;
    function estimatedRowHeight: CGFloat; cdecl;
    function estimatedSectionFooterHeight: CGFloat; cdecl;
    function estimatedSectionHeaderHeight: CGFloat; cdecl;
    function fillerRowHeight: CGFloat; cdecl;
    function footerViewForSection(section: NSInteger): UITableViewHeaderFooterView; cdecl;
    function hasActiveDrag: Boolean; cdecl;
    function hasActiveDrop: Boolean; cdecl;
    function hasUncommittedUpdates: Boolean; cdecl;
    function headerViewForSection(section: NSInteger): UITableViewHeaderFooterView; cdecl;
    function indexPathForCell(cell: UITableViewCell): NSIndexPath; cdecl;
    function indexPathForRowAtPoint(point: CGPoint): NSIndexPath; cdecl;
    function indexPathForSelectedRow: NSIndexPath; cdecl;
    function indexPathsForRowsInRect(rect: CGRect): NSArray; cdecl;
    function indexPathsForSelectedRows: NSArray; cdecl;
    function indexPathsForVisibleRows: NSArray; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect; style: UITableViewStyle): Pointer; cdecl;
    procedure insertRowsAtIndexPaths(indexPaths: NSArray; withRowAnimation: UITableViewRowAnimation); cdecl;
    procedure insertSections(sections: NSIndexSet; withRowAnimation: UITableViewRowAnimation); cdecl;
    function insetsContentViewsToSafeArea: Boolean; cdecl;
    function isEditing: Boolean; cdecl;
    function isPrefetchingEnabled: Boolean; cdecl;
    procedure moveRowAtIndexPath(indexPath: NSIndexPath; toIndexPath: NSIndexPath); cdecl;
    procedure moveSection(section: NSInteger; toSection: NSInteger); cdecl;
    function numberOfRowsInSection(section: NSInteger): NSInteger; cdecl;
    function numberOfSections: NSInteger; cdecl;
    procedure performBatchUpdates(updates: TUITableViewBlockMethod1; completion: TUITableViewBlockMethod2); cdecl;
    function prefetchDataSource: Pointer; cdecl;
    procedure reconfigureRowsAtIndexPaths(indexPaths: NSArray); cdecl;
    function rectForFooterInSection(section: NSInteger): CGRect; cdecl;
    function rectForHeaderInSection(section: NSInteger): CGRect; cdecl;
    function rectForRowAtIndexPath(indexPath: NSIndexPath): CGRect; cdecl;
    function rectForSection(section: NSInteger): CGRect; cdecl;
    procedure registerClass(cellClass: Pointer; forCellReuseIdentifier: NSString); cdecl;
    [MethodName('registerClass:forHeaderFooterViewReuseIdentifier:')]
    procedure registerClassForHeaderFooterViewReuseIdentifier(aClass: Pointer; forHeaderFooterViewReuseIdentifier: NSString); cdecl;
    procedure registerNib(nib: UINib; forCellReuseIdentifier: NSString); cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    [MethodName('registerNib:forHeaderFooterViewReuseIdentifier:')]
    procedure registerNibForHeaderFooterViewReuseIdentifier(nib: UINib; forHeaderFooterViewReuseIdentifier: NSString); cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
    procedure reloadData; cdecl;
    procedure reloadRowsAtIndexPaths(indexPaths: NSArray; withRowAnimation: UITableViewRowAnimation); cdecl;
    procedure reloadSectionIndexTitles; cdecl;
    procedure reloadSections(sections: NSIndexSet; withRowAnimation: UITableViewRowAnimation); cdecl;
    function remembersLastFocusedIndexPath: Boolean; cdecl;
    function rowHeight: CGFloat; cdecl;
    procedure scrollToNearestSelectedRowAtScrollPosition(scrollPosition: UITableViewScrollPosition; animated: Boolean); cdecl;
    procedure scrollToRowAtIndexPath(indexPath: NSIndexPath; atScrollPosition: UITableViewScrollPosition; animated: Boolean); cdecl;
    function sectionFooterHeight: CGFloat; cdecl;
    function sectionHeaderHeight: CGFloat; cdecl;
    function sectionHeaderTopPadding: CGFloat; cdecl;
    function sectionIndexBackgroundColor: UIColor; cdecl;
    function sectionIndexColor: UIColor; cdecl;
    function sectionIndexMinimumDisplayRowCount: NSInteger; cdecl;
    function sectionIndexTrackingBackgroundColor: UIColor; cdecl;
    function selectionFollowsFocus: Boolean; cdecl;
    procedure selectRowAtIndexPath(indexPath: NSIndexPath; animated: Boolean; scrollPosition: UITableViewScrollPosition); cdecl;
    function selfSizingInvalidation: UITableViewSelfSizingInvalidation; cdecl;
    function separatorColor: UIColor; cdecl;
    function separatorEffect: UIVisualEffect; cdecl;
    function separatorInset: UIEdgeInsets; cdecl;
    function separatorInsetReference: UITableViewSeparatorInsetReference; cdecl;
    function separatorStyle: UITableViewCellSeparatorStyle; cdecl;
    procedure setAllowsFocus(allowsFocus: Boolean); cdecl;
    procedure setAllowsFocusDuringEditing(allowsFocusDuringEditing: Boolean); cdecl;
    procedure setAllowsMultipleSelection(allowsMultipleSelection: Boolean); cdecl;
    procedure setAllowsMultipleSelectionDuringEditing(allowsMultipleSelectionDuringEditing: Boolean); cdecl;
    procedure setAllowsSelection(allowsSelection: Boolean); cdecl;
    procedure setAllowsSelectionDuringEditing(allowsSelectionDuringEditing: Boolean); cdecl;
    procedure setBackgroundView(backgroundView: UIView); cdecl;
    procedure setCellLayoutMarginsFollowReadableWidth(cellLayoutMarginsFollowReadableWidth: Boolean); cdecl;
    procedure setDataSource(dataSource: Pointer); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDragDelegate(dragDelegate: Pointer); cdecl;
    procedure setDragInteractionEnabled(dragInteractionEnabled: Boolean); cdecl;
    procedure setDropDelegate(dropDelegate: Pointer); cdecl;
    procedure setEditing(editing: Boolean; animated: Boolean); overload; cdecl;
    procedure setEditing(editing: Boolean); overload; cdecl;
    procedure setEstimatedRowHeight(estimatedRowHeight: CGFloat); cdecl;
    procedure setEstimatedSectionFooterHeight(estimatedSectionFooterHeight: CGFloat); cdecl;
    procedure setEstimatedSectionHeaderHeight(estimatedSectionHeaderHeight: CGFloat); cdecl;
    procedure setFillerRowHeight(fillerRowHeight: CGFloat); cdecl;
    procedure setInsetsContentViewsToSafeArea(insetsContentViewsToSafeArea: Boolean); cdecl;
    procedure setPrefetchDataSource(prefetchDataSource: Pointer); cdecl;
    procedure setPrefetchingEnabled(prefetchingEnabled: Boolean); cdecl;
    procedure setRemembersLastFocusedIndexPath(remembersLastFocusedIndexPath: Boolean); cdecl;
    procedure setRowHeight(rowHeight: CGFloat); cdecl;
    procedure setSectionFooterHeight(sectionFooterHeight: CGFloat); cdecl;
    procedure setSectionHeaderHeight(sectionHeaderHeight: CGFloat); cdecl;
    procedure setSectionHeaderTopPadding(sectionHeaderTopPadding: CGFloat); cdecl;
    procedure setSectionIndexBackgroundColor(sectionIndexBackgroundColor: UIColor); cdecl;
    procedure setSectionIndexColor(sectionIndexColor: UIColor); cdecl;
    procedure setSectionIndexMinimumDisplayRowCount(sectionIndexMinimumDisplayRowCount: NSInteger); cdecl;
    procedure setSectionIndexTrackingBackgroundColor(sectionIndexTrackingBackgroundColor: UIColor); cdecl;
    procedure setSelectionFollowsFocus(selectionFollowsFocus: Boolean); cdecl;
    procedure setSelfSizingInvalidation(selfSizingInvalidation: UITableViewSelfSizingInvalidation); cdecl;
    procedure setSeparatorColor(separatorColor: UIColor); cdecl;
    procedure setSeparatorEffect(separatorEffect: UIVisualEffect); cdecl;
    procedure setSeparatorInset(separatorInset: UIEdgeInsets); cdecl;
    procedure setSeparatorInsetReference(separatorInsetReference: UITableViewSeparatorInsetReference); cdecl;
    procedure setSeparatorStyle(separatorStyle: UITableViewCellSeparatorStyle); cdecl;
    procedure setTableFooterView(tableFooterView: UIView); cdecl;
    procedure setTableHeaderView(tableHeaderView: UIView); cdecl;
    function style: UITableViewStyle; cdecl;
    function tableFooterView: UIView; cdecl;
    function tableHeaderView: UIView; cdecl;
    function visibleCells: NSArray; cdecl;
  end;
  TUITableView = class(TOCGenericImport<UITableViewClass, UITableView>) end;

  UITableViewDataSource = interface(IObjectiveC)
    ['{022E9680-5259-4277-BBE3-6C666B549400}']
    function numberOfSectionsInTableView(tableView: UITableView): NSInteger; cdecl;
    function sectionIndexTitlesForTableView(tableView: UITableView): NSArray; cdecl;
    procedure tableView(tableView: UITableView; commitEditingStyle: UITableViewCellEditingStyle; forRowAtIndexPath: NSIndexPath); overload; cdecl;
    function tableView(tableView: UITableView; sectionForSectionIndexTitle: NSString; atIndex: NSInteger): NSInteger; overload; cdecl;
    function tableView(tableView: UITableView; numberOfRowsInSection: NSInteger): NSInteger; overload; cdecl;
    function tableView(tableView: UITableView; cellForRowAtIndexPath: NSIndexPath): UITableViewCell; overload; cdecl;
    procedure tableView(tableView: UITableView; moveRowAtIndexPath: NSIndexPath; toIndexPath: NSIndexPath); overload; cdecl;
    [MethodName('tableView:canEditRowAtIndexPath:')]
    function tableViewCanEditRowAtIndexPath(tableView: UITableView; canEditRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:canMoveRowAtIndexPath:')]
    function tableViewCanMoveRowAtIndexPath(tableView: UITableView; canMoveRowAtIndexPath: NSIndexPath): Boolean; cdecl;
    [MethodName('tableView:titleForFooterInSection:')]
    function tableViewTitleForFooterInSection(tableView: UITableView; titleForFooterInSection: NSInteger): NSString; cdecl;
    [MethodName('tableView:titleForHeaderInSection:')]
    function tableViewTitleForHeaderInSection(tableView: UITableView; titleForHeaderInSection: NSInteger): NSString; cdecl;
  end;

  UITableViewDataSourcePrefetching = interface(IObjectiveC)
    ['{66D46C49-10BE-4605-A4EE-8AFEA078F10E}']
    procedure tableView(tableView: UITableView; prefetchRowsAtIndexPaths: NSArray); cdecl;
    [MethodName('tableView:cancelPrefetchingForRowsAtIndexPaths:')]
    procedure tableViewCancelPrefetchingForRowsAtIndexPaths(tableView: UITableView; cancelPrefetchingForRowsAtIndexPaths: NSArray); cdecl;
  end;

  UITableViewDragDelegate = interface(IObjectiveC)
    ['{0D8C9763-7173-4311-A02F-F133CA4CA3A4}']
    procedure tableView(tableView: UITableView; dragSessionWillBegin: Pointer); overload; cdecl;
    function tableView(tableView: UITableView; dragPreviewParametersForRowAtIndexPath: NSIndexPath): UIDragPreviewParameters; overload; cdecl;
    function tableView(tableView: UITableView; itemsForBeginningDragSession: Pointer; atIndexPath: NSIndexPath): NSArray; overload; cdecl;
    function tableView(tableView: UITableView; itemsForAddingToDragSession: Pointer; atIndexPath: NSIndexPath;
      point: CGPoint): NSArray; overload; cdecl;
    [MethodName('tableView:dragSessionAllowsMoveOperation:')]
    function tableViewDragSessionAllowsMoveOperation(tableView: UITableView; dragSessionAllowsMoveOperation: Pointer): Boolean; cdecl;
    [MethodName('tableView:dragSessionDidEnd:')]
    procedure tableViewDragSessionDidEnd(tableView: UITableView; dragSessionDidEnd: Pointer); cdecl;
    [MethodName('tableView:dragSessionIsRestrictedToDraggingApplication:')]
    function tableViewDragSessionIsRestrictedToDraggingApplication(tableView: UITableView;
      dragSessionIsRestrictedToDraggingApplication: Pointer): Boolean; cdecl;
  end;

  UITableViewDropDelegate = interface(IObjectiveC)
    ['{8DB34E5E-16DD-4DA9-90B3-F7A4D1F1425B}']
    function tableView(tableView: UITableView; dropPreviewParametersForRowAtIndexPath: NSIndexPath): UIDragPreviewParameters; overload; cdecl;
    function tableView(tableView: UITableView; dropSessionDidUpdate: Pointer;
      withDestinationIndexPath: NSIndexPath): UITableViewDropProposal; overload; cdecl;
    procedure tableView(tableView: UITableView; performDropWithCoordinator: Pointer); overload; cdecl;
    [MethodName('tableView:canHandleDropSession:')]
    function tableViewCanHandleDropSession(tableView: UITableView; canHandleDropSession: Pointer): Boolean; cdecl;
    [MethodName('tableView:dropSessionDidEnd:')]
    procedure tableViewDropSessionDidEnd(tableView: UITableView; dropSessionDidEnd: Pointer); cdecl;
    [MethodName('tableView:dropSessionDidEnter:')]
    procedure tableViewDropSessionDidEnter(tableView: UITableView; dropSessionDidEnter: Pointer); cdecl;
    [MethodName('tableView:dropSessionDidExit:')]
    procedure tableViewDropSessionDidExit(tableView: UITableView; dropSessionDidExit: Pointer); cdecl;
  end;

  UITableViewDropProposalClass = interface(UIDropProposalClass)
    ['{0F9C04CC-EB81-46B6-A434-199B7D4F0422}']
  end;

  UITableViewDropProposal = interface(UIDropProposal)
    ['{4728940B-B862-4E39-852F-C1A0001ECD52}']
    function initWithDropOperation(operation: UIDropOperation; intent: UITableViewDropIntent): Pointer; cdecl;
    function intent: UITableViewDropIntent; cdecl;
  end;
  TUITableViewDropProposal = class(TOCGenericImport<UITableViewDropProposalClass, UITableViewDropProposal>) end;

  UITableViewDropCoordinator = interface(IObjectiveC)
    ['{B064DC01-B442-4EBB-888C-07DFDEA9AC00}']
    function destinationIndexPath: NSIndexPath; cdecl;
    function dropItem(dragItem: UIDragItem; toTarget: UIDragPreviewTarget): Pointer; overload; cdecl;
    function dropItem(dragItem: UIDragItem; intoRowAtIndexPath: NSIndexPath; rect: CGRect): Pointer; overload; cdecl;
    function dropItem(dragItem: UIDragItem; toPlaceholder: UITableViewDropPlaceholder): Pointer; overload; cdecl;
    function dropItem(dragItem: UIDragItem; toRowAtIndexPath: NSIndexPath): Pointer; overload; cdecl;
    function items: NSArray; cdecl;
    function proposal: UITableViewDropProposal; cdecl;
    function session: Pointer; cdecl;
  end;

  UITableViewPlaceholderClass = interface(NSObjectClass)
    ['{6FF920A3-7669-45E7-B80A-B4A75DBCA55E}']
    {class} function new: Pointer; cdecl;
  end;

  UITableViewPlaceholder = interface(NSObject)
    ['{8ECF1D4C-2181-4194-B26E-6491353698E0}']
    function cellUpdateHandler: TUITableViewPlaceholderBlockMethod1; cdecl;
    function initWithInsertionIndexPath(insertionIndexPath: NSIndexPath; reuseIdentifier: NSString; rowHeight: CGFloat): Pointer; cdecl;
    procedure setCellUpdateHandler(cellUpdateHandler: TUITableViewPlaceholderBlockMethod2); cdecl;
  end;
  TUITableViewPlaceholder = class(TOCGenericImport<UITableViewPlaceholderClass, UITableViewPlaceholder>) end;

  UITableViewDropPlaceholderClass = interface(UITableViewPlaceholderClass)
    ['{247EC839-097F-408B-931C-6743C265C4FA}']
  end;

  UITableViewDropPlaceholder = interface(UITableViewPlaceholder)
    ['{48E79DA6-6729-4C48-92AF-AA58FC6601B1}']
    function previewParametersProvider: TUITableViewDropPlaceholderBlockMethod1; cdecl;
    procedure setPreviewParametersProvider(previewParametersProvider: TUITableViewDropPlaceholderBlockMethod2); cdecl;
  end;
  TUITableViewDropPlaceholder = class(TOCGenericImport<UITableViewDropPlaceholderClass, UITableViewDropPlaceholder>) end;

  UITableViewDropItem = interface(IObjectiveC)
    ['{F3A5A0CB-B622-4A71-A53A-150B3F95F275}']
    function dragItem: UIDragItem; cdecl;
    function previewSize: CGSize; cdecl;
    function sourceIndexPath: NSIndexPath; cdecl;
  end;

  UITableViewDropPlaceholderContext = interface(IObjectiveC)
    ['{69D4E07B-5DE8-49E2-A39C-F017724BB0B9}']
    function commitInsertionWithDataSourceUpdates(dataSourceUpdates: Pointer): Boolean; cdecl;
    function deletePlaceholder: Boolean; cdecl;
    function dragItem: UIDragItem; cdecl;
  end;

  NSDiffableDataSourceSectionSnapshotClass = interface(NSObjectClass)
    ['{A00072CA-19FD-4BB5-A939-15BE9FB51717}']
  end;

  NSDiffableDataSourceSectionSnapshot = interface(NSObject)
    ['{A285E090-782F-414B-8145-954AC6E163B3}']
    procedure appendItems(items: NSArray; intoParentItem: Pointer); overload; cdecl;
    procedure appendItems(items: NSArray); overload; cdecl;
    procedure collapseItems(items: NSArray); cdecl;
    function containsItem(item: Pointer): Boolean; cdecl;
    procedure deleteAllItems; cdecl;
    procedure deleteItems(items: NSArray); cdecl;
    function expandedItems: NSArray; cdecl;
    procedure expandItems(items: NSArray); cdecl;
    function indexOfItem(item: Pointer): NSInteger; cdecl;
    procedure insertItems(items: NSArray; beforeItem: Pointer); cdecl;
    [MethodName('insertItems:afterItem:')]
    procedure insertItemsAfterItem(items: NSArray; afterItem: Pointer); cdecl;
    procedure insertSnapshot(snapshot: NSDiffableDataSourceSectionSnapshot; beforeItem: Pointer); cdecl;
    [MethodName('insertSnapshot:afterItem:')]
    function insertSnapshotAfterItem(snapshot: NSDiffableDataSourceSectionSnapshot; afterItem: Pointer): Pointer; cdecl;
    function isExpanded(item: Pointer): Boolean; cdecl;
    function isVisible(item: Pointer): Boolean; cdecl;
    function items: NSArray; cdecl;
    function levelOfItem(item: Pointer): NSInteger; cdecl;
    function parentOfChildItem(childItem: Pointer): Pointer; cdecl;
    procedure replaceChildrenOfParentItem(parentItem: Pointer; withSnapshot: NSDiffableDataSourceSectionSnapshot); cdecl;
    function rootItems: NSArray; cdecl;
    function snapshotOfParentItem(parentItem: Pointer; includingParentItem: Boolean): NSDiffableDataSourceSectionSnapshot; overload; cdecl;
    function snapshotOfParentItem(parentItem: Pointer): NSDiffableDataSourceSectionSnapshot; overload; cdecl;
    function visibleItems: NSArray; cdecl;
    function visualDescription: NSString; cdecl;
  end;
  TNSDiffableDataSourceSectionSnapshot = class(TOCGenericImport<NSDiffableDataSourceSectionSnapshotClass, NSDiffableDataSourceSectionSnapshot>) end;

  NSDiffableDataSourceSnapshotClass = interface(NSObjectClass)
    ['{497C8188-EE2D-4CF9-9A64-545AA5132FF8}']
  end;

  NSDiffableDataSourceSnapshot = interface(NSObject)
    ['{618720D7-84B4-42DD-886F-F83FA795A52F}']
    procedure appendItemsWithIdentifiers(identifiers: NSArray; intoSectionWithIdentifier: Pointer); overload; cdecl;
    procedure appendItemsWithIdentifiers(identifiers: NSArray); overload; cdecl;
    procedure appendSectionsWithIdentifiers(sectionIdentifiers: NSArray); cdecl;
    procedure deleteAllItems; cdecl;
    procedure deleteItemsWithIdentifiers(identifiers: NSArray); cdecl;
    procedure deleteSectionsWithIdentifiers(sectionIdentifiers: NSArray); cdecl;
    function indexOfItemIdentifier(itemIdentifier: Pointer): NSInteger; cdecl;
    function indexOfSectionIdentifier(sectionIdentifier: Pointer): NSInteger; cdecl;
    procedure insertItemsWithIdentifiers(identifiers: NSArray; beforeItemWithIdentifier: Pointer); cdecl;
    [MethodName('insertItemsWithIdentifiers:afterItemWithIdentifier:')]
    procedure insertItemsWithIdentifiersAfterItemWithIdentifier(identifiers: NSArray; afterItemWithIdentifier: Pointer); cdecl;
    procedure insertSectionsWithIdentifiers(sectionIdentifiers: NSArray; beforeSectionWithIdentifier: Pointer); cdecl;
    [MethodName('insertSectionsWithIdentifiers:afterSectionWithIdentifier:')]
    procedure insertSectionsWithIdentifiersAfterSectionWithIdentifier(sectionIdentifiers: NSArray;
      afterSectionWithIdentifier: Pointer); cdecl;
    function itemIdentifiers: NSArray; cdecl;
    function itemIdentifiersInSectionWithIdentifier(sectionIdentifier: Pointer): NSArray; cdecl;
    procedure moveItemWithIdentifier(fromIdentifier: Pointer; beforeItemWithIdentifier: Pointer); cdecl;
    [MethodName('moveItemWithIdentifier:afterItemWithIdentifier:')]
    procedure moveItemWithIdentifierAfterItemWithIdentifier(fromIdentifier: Pointer; afterItemWithIdentifier: Pointer); cdecl;
    procedure moveSectionWithIdentifier(fromSectionIdentifier: Pointer; beforeSectionWithIdentifier: Pointer); cdecl;
    [MethodName('moveSectionWithIdentifier:afterSectionWithIdentifier:')]
    procedure moveSectionWithIdentifierAfterSectionWithIdentifier(fromSectionIdentifier: Pointer;
      afterSectionWithIdentifier: Pointer); cdecl;
    function numberOfItems: NSInteger; cdecl;
    function numberOfItemsInSection(sectionIdentifier: Pointer): NSInteger; cdecl;
    function numberOfSections: NSInteger; cdecl;
    function reconfiguredItemIdentifiers: NSArray; cdecl;
    procedure reconfigureItemsWithIdentifiers(identifiers: NSArray); cdecl;
    function reloadedItemIdentifiers: NSArray; cdecl;
    function reloadedSectionIdentifiers: NSArray; cdecl;
    procedure reloadItemsWithIdentifiers(identifiers: NSArray); cdecl;
    procedure reloadSectionsWithIdentifiers(sectionIdentifiers: NSArray); cdecl;
    function sectionIdentifierForSectionContainingItemIdentifier(itemIdentifier: Pointer): Pointer; cdecl;
    function sectionIdentifiers: NSArray; cdecl;
  end;
  TNSDiffableDataSourceSnapshot = class(TOCGenericImport<NSDiffableDataSourceSnapshotClass, NSDiffableDataSourceSnapshot>) end;

  NSDiffableDataSourceSectionTransactionClass = interface(NSObjectClass)
    ['{0BC19FA1-89FE-4BAC-8697-7FD4F2200B03}']
  end;

  NSDiffableDataSourceSectionTransaction = interface(NSObject)
    ['{AE9736CB-3EDC-44F9-BCC4-00CBD8686EEC}']
    function difference: NSOrderedCollectionDifference; cdecl;
    function finalSnapshot: NSDiffableDataSourceSectionSnapshot; cdecl;
    function initialSnapshot: NSDiffableDataSourceSectionSnapshot; cdecl;
    function sectionIdentifier: Pointer; cdecl;
  end;
  TNSDiffableDataSourceSectionTransaction = class(TOCGenericImport<NSDiffableDataSourceSectionTransactionClass, NSDiffableDataSourceSectionTransaction>) end;

  NSDiffableDataSourceTransactionClass = interface(NSObjectClass)
    ['{D6A6BF2A-8921-480B-903D-D5D341A25D55}']
  end;

  NSDiffableDataSourceTransaction = interface(NSObject)
    ['{78D5AE26-A199-4DFF-A1D9-C1AB805B0FA4}']
    function difference: NSOrderedCollectionDifference; cdecl;
    function finalSnapshot: NSDiffableDataSourceSnapshot; cdecl;
    function initialSnapshot: NSDiffableDataSourceSnapshot; cdecl;
    function sectionTransactions: NSArray; cdecl;
  end;
  TNSDiffableDataSourceTransaction = class(TOCGenericImport<NSDiffableDataSourceTransactionClass, NSDiffableDataSourceTransaction>) end;

  UICollectionViewDiffableDataSourceReorderingHandlersClass = interface(NSObjectClass)
    ['{E9C43546-7C27-44BA-99E2-CFCA262CE0C4}']
  end;

  UICollectionViewDiffableDataSourceReorderingHandlers = interface(NSObject)
    ['{2BED3CEE-01DD-4B68-8C34-ECB5CBEA785F}']
    function canReorderItemHandler: TUICollectionViewDiffableDataSourceReorderingHandlersBlockMethod1; cdecl;
    function didReorderHandler: TUICollectionViewDiffableDataSourceReorderingHandlersBlockMethod3; cdecl;
    procedure setCanReorderItemHandler(canReorderItemHandler: TUICollectionViewDiffableDataSourceReorderingHandlersBlockMethod2); cdecl;
    procedure setDidReorderHandler(didReorderHandler: TUICollectionViewDiffableDataSourceReorderingHandlersBlockMethod2); cdecl;
    procedure setWillReorderHandler(willReorderHandler: TUICollectionViewDiffableDataSourceReorderingHandlersBlockMethod2); cdecl;
    function willReorderHandler: TUICollectionViewDiffableDataSourceReorderingHandlersBlockMethod3; cdecl;
  end;
  TUICollectionViewDiffableDataSourceReorderingHandlers = class(TOCGenericImport<UICollectionViewDiffableDataSourceReorderingHandlersClass, UICollectionViewDiffableDataSourceReorderingHandlers>) end;

  UICollectionViewDiffableDataSourceSectionSnapshotHandlersClass = interface(NSObjectClass)
    ['{AE21AA9B-8B75-4DA2-8454-6A5C29E3A504}']
  end;

  UICollectionViewDiffableDataSourceSectionSnapshotHandlers = interface(NSObject)
    ['{C6BD4A24-CCBF-45BA-8E08-64A67473B9A2}']
    procedure setShouldCollapseItemHandler(shouldCollapseItemHandler: TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod2); cdecl;
    procedure setShouldExpandItemHandler(shouldExpandItemHandler: TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod2); cdecl;
    procedure setSnapshotForExpandingParentItemHandler(snapshotForExpandingParentItemHandler: TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod2); cdecl;
    procedure setWillCollapseItemHandler(willCollapseItemHandler: TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod2); cdecl;
    procedure setWillExpandItemHandler(willExpandItemHandler: TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod2); cdecl;
    function shouldCollapseItemHandler: TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod1; cdecl;
    function shouldExpandItemHandler: TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod1; cdecl;
    function snapshotForExpandingParentItemHandler: TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod6; cdecl;
    function willCollapseItemHandler: TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod3; cdecl;
    function willExpandItemHandler: TUICollectionViewDiffableDataSourceSectionSnapshotHandlersBlockMethod3; cdecl;
  end;
  TUICollectionViewDiffableDataSourceSectionSnapshotHandlers = class(TOCGenericImport<UICollectionViewDiffableDataSourceSectionSnapshotHandlersClass, UICollectionViewDiffableDataSourceSectionSnapshotHandlers>) end;

  UICollectionViewDiffableDataSourceClass = interface(NSObjectClass)
    ['{B22375CC-E697-4C90-9E11-F96B9945BB02}']
    {class} function new: Pointer; cdecl;
  end;

  UICollectionViewDiffableDataSource = interface(NSObject)
    ['{311277EA-C602-4FDF-BE31-B82EDB53F6A0}']
    procedure applySnapshot(snapshot: NSDiffableDataSourceSnapshot; animatingDifferences: Boolean;
      completion: TUICollectionViewDiffableDataSourceBlockMethod1); overload; cdecl;
    procedure applySnapshot(snapshot: NSDiffableDataSourceSnapshot; animatingDifferences: Boolean); overload; cdecl;
    procedure applySnapshot(snapshot: NSDiffableDataSourceSectionSnapshot; toSection: Pointer; animatingDifferences: Boolean;
      completion: TUICollectionViewDiffableDataSourceBlockMethod1); overload; cdecl;
    procedure applySnapshot(snapshot: NSDiffableDataSourceSectionSnapshot; toSection: Pointer;
      animatingDifferences: Boolean); overload; cdecl;
    procedure applySnapshotUsingReloadData(snapshot: NSDiffableDataSourceSnapshot;
      completion: TUICollectionViewDiffableDataSourceBlockMethod1); overload; cdecl;
    procedure applySnapshotUsingReloadData(snapshot: NSDiffableDataSourceSnapshot); overload; cdecl;
    function indexForSectionIdentifier(identifier: Pointer): NSInteger; cdecl;
    function indexPathForItemIdentifier(identifier: Pointer): NSIndexPath; cdecl;
    function initWithCollectionView(collectionView: UICollectionView; cellProvider: UICollectionViewDiffableDataSourceCellProvider): Pointer; cdecl;
    function itemIdentifierForIndexPath(indexPath: NSIndexPath): Pointer; cdecl;
    function reorderingHandlers: UICollectionViewDiffableDataSourceReorderingHandlers; cdecl;
    function sectionIdentifierForIndex(index: NSInteger): Pointer; cdecl;
    function sectionSnapshotHandlers: UICollectionViewDiffableDataSourceSectionSnapshotHandlers; cdecl;
    procedure setReorderingHandlers(reorderingHandlers: UICollectionViewDiffableDataSourceReorderingHandlers); cdecl;
    procedure setSectionSnapshotHandlers(sectionSnapshotHandlers: UICollectionViewDiffableDataSourceSectionSnapshotHandlers); cdecl;
    procedure setSupplementaryViewProvider(supplementaryViewProvider: UICollectionViewDiffableDataSourceSupplementaryViewProvider); cdecl;
    function snapshot: NSDiffableDataSourceSnapshot; cdecl;
    function snapshotForSection(section: Pointer): NSDiffableDataSourceSectionSnapshot; cdecl;
    function supplementaryViewProvider: UICollectionViewDiffableDataSourceSupplementaryViewProvider; cdecl;
  end;
  TUICollectionViewDiffableDataSource = class(TOCGenericImport<UICollectionViewDiffableDataSourceClass, UICollectionViewDiffableDataSource>) end;

  UITableViewDiffableDataSourceClass = interface(NSObjectClass)
    ['{37857649-CB39-4F46-A646-7DAF08E985CD}']
    {class} function new: Pointer; cdecl;
  end;

  UITableViewDiffableDataSource = interface(NSObject)
    ['{20BD118F-9751-4BAB-B07A-D54614DCB7F5}']
    procedure applySnapshot(snapshot: NSDiffableDataSourceSnapshot; animatingDifferences: Boolean;
      completion: TUITableViewDiffableDataSourceBlockMethod1); overload; cdecl;
    procedure applySnapshot(snapshot: NSDiffableDataSourceSnapshot; animatingDifferences: Boolean); overload; cdecl;
    procedure applySnapshotUsingReloadData(snapshot: NSDiffableDataSourceSnapshot); overload; cdecl;
    procedure applySnapshotUsingReloadData(snapshot: NSDiffableDataSourceSnapshot;
      completion: TUITableViewDiffableDataSourceBlockMethod1); overload; cdecl;
    function defaultRowAnimation: UITableViewRowAnimation; cdecl;
    function indexForSectionIdentifier(identifier: Pointer): NSInteger; cdecl;
    function indexPathForItemIdentifier(identifier: Pointer): NSIndexPath; cdecl;
    function initWithTableView(tableView: UITableView; cellProvider: UITableViewDiffableDataSourceCellProvider): Pointer; cdecl;
    function itemIdentifierForIndexPath(indexPath: NSIndexPath): Pointer; cdecl;
    function sectionIdentifierForIndex(index: NSInteger): Pointer; cdecl;
    procedure setDefaultRowAnimation(defaultRowAnimation: UITableViewRowAnimation); cdecl;
    function snapshot: NSDiffableDataSourceSnapshot; cdecl;
  end;
  TUITableViewDiffableDataSource = class(TOCGenericImport<UITableViewDiffableDataSourceClass, UITableViewDiffableDataSource>) end;

  UICollectionViewCellRegistrationClass = interface(NSObjectClass)
    ['{9828E704-4114-4F4D-BF00-FC0912CEF033}']
    {class} function registrationWithCellClass(cellClass: Pointer;
      configurationHandler: UICollectionViewCellRegistrationConfigurationHandler): Pointer; cdecl;
    {class} function registrationWithCellNib(cellNib: UINib;
      configurationHandler: UICollectionViewCellRegistrationConfigurationHandler): Pointer; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
  end;

  UICollectionViewCellRegistration = interface(NSObject)
    ['{F12C2309-9E13-4FB4-861B-84F58939F15A}']
    function cellClass: Pointer; cdecl;
    function cellNib: UINib; cdecl;
    function configurationHandler: UICollectionViewCellRegistrationConfigurationHandler; cdecl;
  end;
  TUICollectionViewCellRegistration = class(TOCGenericImport<UICollectionViewCellRegistrationClass, UICollectionViewCellRegistration>) end;

  UICollectionViewSupplementaryRegistrationClass = interface(NSObjectClass)
    ['{FF61B5D3-CB0D-4BA9-BD54-C4C0D5D702CC}']
    {class} function registrationWithSupplementaryClass(supplementaryClass: Pointer; elementKind: NSString;
      configurationHandler: UICollectionViewSupplementaryRegistrationConfigurationHandler): Pointer; cdecl;
    {class} function registrationWithSupplementaryNib(supplementaryNib: UINib; elementKind: NSString;
      configurationHandler: UICollectionViewSupplementaryRegistrationConfigurationHandler): Pointer; cdecl; // API_DEPRECATED("Loading Interface Builder products will not be supported in a future version of visionOS.", visionos(1.0, 1.0))
  end;

  UICollectionViewSupplementaryRegistration = interface(NSObject)
    ['{0AFDF31F-6519-4345-95EE-403158F2C4BE}']
    function configurationHandler: UICollectionViewSupplementaryRegistrationConfigurationHandler; cdecl;
    function elementKind: NSString; cdecl;
    function supplementaryClass: Pointer; cdecl;
    function supplementaryNib: UINib; cdecl;
  end;
  TUICollectionViewSupplementaryRegistration = class(TOCGenericImport<UICollectionViewSupplementaryRegistrationClass, UICollectionViewSupplementaryRegistration>) end;

  UICollectionLayoutListConfigurationClass = interface(NSObjectClass)
    ['{1D0DEA89-0000-4985-BD1B-AFA652C8D5D6}']
    {class} function new: Pointer; cdecl;
  end;

  UICollectionLayoutListConfiguration = interface(NSObject)
    ['{871427A6-97E5-4E31-AF7E-8085C0B7B014}']
    function appearance: UICollectionLayoutListAppearance; cdecl;
    function backgroundColor: UIColor; cdecl;
    function footerMode: UICollectionLayoutListFooterMode; cdecl;
    function headerMode: UICollectionLayoutListHeaderMode; cdecl;
    function headerTopPadding: CGFloat; cdecl;
    function initWithAppearance(appearance: UICollectionLayoutListAppearance): Pointer; cdecl;
    function itemSeparatorHandler: UICollectionLayoutListItemSeparatorHandler; cdecl;
    function leadingSwipeActionsConfigurationProvider: UICollectionLayoutListSwipeActionsConfigurationProvider; cdecl;
    function separatorConfiguration: UIListSeparatorConfiguration; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    procedure setFooterMode(footerMode: UICollectionLayoutListFooterMode); cdecl;
    procedure setHeaderMode(headerMode: UICollectionLayoutListHeaderMode); cdecl;
    procedure setHeaderTopPadding(headerTopPadding: CGFloat); cdecl;
    procedure setItemSeparatorHandler(itemSeparatorHandler: UICollectionLayoutListItemSeparatorHandler); cdecl;
    procedure setLeadingSwipeActionsConfigurationProvider(leadingSwipeActionsConfigurationProvider: UICollectionLayoutListSwipeActionsConfigurationProvider); cdecl;
    procedure setSeparatorConfiguration(separatorConfiguration: UIListSeparatorConfiguration); cdecl;
    procedure setShowsSeparators(showsSeparators: Boolean); cdecl;
    procedure setTrailingSwipeActionsConfigurationProvider(trailingSwipeActionsConfigurationProvider: UICollectionLayoutListSwipeActionsConfigurationProvider); cdecl;
    function showsSeparators: Boolean; cdecl;
    function trailingSwipeActionsConfigurationProvider: UICollectionLayoutListSwipeActionsConfigurationProvider; cdecl;
  end;
  TUICollectionLayoutListConfiguration = class(TOCGenericImport<UICollectionLayoutListConfigurationClass, UICollectionLayoutListConfiguration>) end;

  UIListSeparatorConfigurationClass = interface(NSObjectClass)
    ['{FBC6B8C6-8AB6-4AB2-9CE4-9C149B042E5E}']
    {class} function new: Pointer; cdecl;
  end;

  UIListSeparatorConfiguration = interface(NSObject)
    ['{519506F7-F659-429B-A47F-F99002BB000B}']
    function bottomSeparatorInsets: NSDirectionalEdgeInsets; cdecl;
    function bottomSeparatorVisibility: UIListSeparatorVisibility; cdecl;
    function color: UIColor; cdecl;
    function initWithListAppearance(listAppearance: UICollectionLayoutListAppearance): Pointer; cdecl;
    function multipleSelectionColor: UIColor; cdecl;
    procedure setBottomSeparatorInsets(bottomSeparatorInsets: NSDirectionalEdgeInsets); cdecl;
    procedure setBottomSeparatorVisibility(bottomSeparatorVisibility: UIListSeparatorVisibility); cdecl;
    procedure setColor(color: UIColor); cdecl;
    procedure setMultipleSelectionColor(multipleSelectionColor: UIColor); cdecl;
    procedure setTopSeparatorInsets(topSeparatorInsets: NSDirectionalEdgeInsets); cdecl;
    procedure setTopSeparatorVisibility(topSeparatorVisibility: UIListSeparatorVisibility); cdecl;
    procedure setVisualEffect(visualEffect: UIVisualEffect); cdecl;
    function topSeparatorInsets: NSDirectionalEdgeInsets; cdecl;
    function topSeparatorVisibility: UIListSeparatorVisibility; cdecl;
    function visualEffect: UIVisualEffect; cdecl;
  end;
  TUIListSeparatorConfiguration = class(TOCGenericImport<UIListSeparatorConfigurationClass, UIListSeparatorConfiguration>) end;

  UIConfigurationState = interface(IObjectiveC)
    ['{EB7B2544-9A6F-41E7-92FD-26C258471FCC}']
    function customStateForKey(key: UIConfigurationStateCustomKey): Pointer; cdecl;
    function initWithTraitCollection(traitCollection: UITraitCollection): Pointer; cdecl;
    function objectForKeyedSubscript(key: UIConfigurationStateCustomKey): Pointer; cdecl;
    procedure setCustomState(customState: Pointer; forKey: UIConfigurationStateCustomKey); cdecl;
    procedure setObject(obj: Pointer; forKeyedSubscript: UIConfigurationStateCustomKey); cdecl;
    procedure setTraitCollection(traitCollection: UITraitCollection); cdecl;
    function traitCollection: UITraitCollection; cdecl;
  end;

  UIViewConfigurationStateClass = interface(NSObjectClass)
    ['{37FB47A0-DD62-4954-A149-908B2993AC3B}']
    {class} function new: Pointer; cdecl;
  end;

  UIViewConfigurationState = interface(NSObject)
    ['{DC033871-F230-4FD5-A8FF-50B6DC63DB88}']
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithTraitCollection(traitCollection: UITraitCollection): Pointer; cdecl;
    function isDisabled: Boolean; cdecl;
    function isFocused: Boolean; cdecl;
    function isHighlighted: Boolean; cdecl;
    function isPinned: Boolean; cdecl;
    function isSelected: Boolean; cdecl;
    procedure setDisabled(disabled: Boolean); cdecl;
    procedure setFocused(focused: Boolean); cdecl;
    procedure setHighlighted(highlighted: Boolean); cdecl;
    procedure setPinned(pinned: Boolean); cdecl;
    procedure setSelected(selected: Boolean); cdecl;
    procedure setTraitCollection(traitCollection: UITraitCollection); cdecl;
    function traitCollection: UITraitCollection; cdecl;
  end;
  TUIViewConfigurationState = class(TOCGenericImport<UIViewConfigurationStateClass, UIViewConfigurationState>) end;

  UICellConfigurationStateClass = interface(UIViewConfigurationStateClass)
    ['{18A8402D-BBED-4465-9037-D84997C68E27}']
  end;

  UICellConfigurationState = interface(UIViewConfigurationState)
    ['{A22890EA-FCDD-468A-8CE3-6E2C145C38A9}']
    function cellDragState: UICellConfigurationDragState; cdecl;
    function cellDropState: UICellConfigurationDropState; cdecl;
    function isEditing: Boolean; cdecl;
    function isExpanded: Boolean; cdecl;
    function isReordering: Boolean; cdecl;
    function isSwiped: Boolean; cdecl;
    procedure setCellDragState(cellDragState: UICellConfigurationDragState); cdecl;
    procedure setCellDropState(cellDropState: UICellConfigurationDropState); cdecl;
    procedure setEditing(editing: Boolean); cdecl;
    procedure setExpanded(expanded: Boolean); cdecl;
    procedure setReordering(reordering: Boolean); cdecl;
    procedure setSwiped(swiped: Boolean); cdecl;
  end;
  TUICellConfigurationState = class(TOCGenericImport<UICellConfigurationStateClass, UICellConfigurationState>) end;

  UIContentConfiguration = interface(IObjectiveC)
    ['{D9592A13-89DA-4789-A61E-793FCC770649}']
    function makeContentView: UIView; cdecl;
    function updatedConfigurationForState(state: Pointer): Pointer; cdecl;
  end;

  UIContentView = interface(IObjectiveC)
    ['{8A20CE7E-67A3-49A1-BF8C-44FE0D69EAB4}']
    function configuration: Pointer; cdecl;
    procedure setConfiguration(configuration: Pointer); cdecl;
    function supportsConfiguration(configuration: Pointer): Boolean; cdecl;
  end;

  UIListContentImagePropertiesClass = interface(NSObjectClass)
    ['{6D9BB89C-6030-4FB9-82DB-EDDA5DDD5E5D}']
  end;

  UIListContentImageProperties = interface(NSObject)
    ['{CBA1E3F6-8002-47D3-8464-A1F60C8802C4}']
    function accessibilityIgnoresInvertColors: Boolean; cdecl;
    function cornerRadius: CGFloat; cdecl;
    function maximumSize: CGSize; cdecl;
    function preferredSymbolConfiguration: UIImageSymbolConfiguration; cdecl;
    function reservedLayoutSize: CGSize; cdecl;
    function resolvedTintColorForTintColor(tintColor: UIColor): UIColor; cdecl;
    procedure setAccessibilityIgnoresInvertColors(accessibilityIgnoresInvertColors: Boolean); cdecl;
    procedure setCornerRadius(cornerRadius: CGFloat); cdecl;
    procedure setMaximumSize(maximumSize: CGSize); cdecl;
    procedure setPreferredSymbolConfiguration(preferredSymbolConfiguration: UIImageSymbolConfiguration); cdecl;
    procedure setReservedLayoutSize(reservedLayoutSize: CGSize); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    procedure setTintColorTransformer(tintColorTransformer: UIConfigurationColorTransformer); cdecl;
    function tintColor: UIColor; cdecl;
    function tintColorTransformer: UIConfigurationColorTransformer; cdecl;
  end;
  TUIListContentImageProperties = class(TOCGenericImport<UIListContentImagePropertiesClass, UIListContentImageProperties>) end;

  UIListContentTextPropertiesClass = interface(NSObjectClass)
    ['{E50D8B89-612A-4D81-9EF8-A5303F2786C4}']
  end;

  UIListContentTextProperties = interface(NSObject)
    ['{CF4D2154-BF12-46D3-89D8-D9DEE720E5B2}']
    function adjustsFontForContentSizeCategory: Boolean; cdecl;
    function adjustsFontSizeToFitWidth: Boolean; cdecl;
    function alignment: UIListContentTextAlignment; cdecl;
    function allowsDefaultTighteningForTruncation: Boolean; cdecl;
    function color: UIColor; cdecl;
    function colorTransformer: UIConfigurationColorTransformer; cdecl;
    function font: UIFont; cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    function minimumScaleFactor: CGFloat; cdecl;
    function numberOfLines: NSInteger; cdecl;
    function resolvedColor: UIColor; cdecl;
    procedure setAdjustsFontForContentSizeCategory(adjustsFontForContentSizeCategory: Boolean); cdecl;
    procedure setAdjustsFontSizeToFitWidth(adjustsFontSizeToFitWidth: Boolean); cdecl;
    procedure setAlignment(alignment: UIListContentTextAlignment); cdecl;
    procedure setAllowsDefaultTighteningForTruncation(allowsDefaultTighteningForTruncation: Boolean); cdecl;
    procedure setColor(color: UIColor); cdecl;
    procedure setColorTransformer(colorTransformer: UIConfigurationColorTransformer); cdecl;
    procedure setFont(font: UIFont); cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    procedure setMinimumScaleFactor(minimumScaleFactor: CGFloat); cdecl;
    procedure setNumberOfLines(numberOfLines: NSInteger); cdecl;
    procedure setShowsExpansionTextWhenTruncated(showsExpansionTextWhenTruncated: Boolean); cdecl;
    procedure setTransform(transform: UIListContentTextTransform); cdecl;
    function showsExpansionTextWhenTruncated: Boolean; cdecl;
    function transform: UIListContentTextTransform; cdecl;
  end;
  TUIListContentTextProperties = class(TOCGenericImport<UIListContentTextPropertiesClass, UIListContentTextProperties>) end;

  UIListContentConfigurationClass = interface(NSObjectClass)
    ['{3724366D-5F13-4E9C-9758-C38F5B3D869C}']
    {class} function accompaniedSidebarCellConfiguration: Pointer; cdecl;
    {class} function accompaniedSidebarSubtitleCellConfiguration: Pointer; cdecl;
    {class} function cellConfiguration: Pointer; cdecl;
    {class} function extraProminentInsetGroupedHeaderConfiguration: Pointer; cdecl;
    {class} function groupedFooterConfiguration: Pointer; cdecl;
    {class} function groupedHeaderConfiguration: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
    {class} function plainFooterConfiguration: Pointer; cdecl;
    {class} function plainHeaderConfiguration: Pointer; cdecl;
    {class} function prominentInsetGroupedHeaderConfiguration: Pointer; cdecl;
    {class} function sidebarCellConfiguration: Pointer; cdecl;
    {class} function sidebarHeaderConfiguration: Pointer; cdecl;
    {class} function sidebarSubtitleCellConfiguration: Pointer; cdecl;
    {class} function subtitleCellConfiguration: Pointer; cdecl;
    {class} function valueCellConfiguration: Pointer; cdecl;
  end;

  UIListContentConfiguration = interface(NSObject)
    ['{0B3C8823-0E6C-4FF7-B131-032040115FD2}']
    function attributedText: NSAttributedString; cdecl;
    function axesPreservingSuperviewLayoutMargins: UIAxis; cdecl;
    function directionalLayoutMargins: NSDirectionalEdgeInsets; cdecl;
    function image: UIImage; cdecl;
    function imageProperties: UIListContentImageProperties; cdecl;
    function imageToTextPadding: CGFloat; cdecl;
    function prefersSideBySideTextAndSecondaryText: Boolean; cdecl;
    function secondaryAttributedText: NSAttributedString; cdecl;
    function secondaryText: NSString; cdecl;
    function secondaryTextProperties: UIListContentTextProperties; cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    procedure setAxesPreservingSuperviewLayoutMargins(axesPreservingSuperviewLayoutMargins: UIAxis); cdecl;
    procedure setDirectionalLayoutMargins(directionalLayoutMargins: NSDirectionalEdgeInsets); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setImageToTextPadding(imageToTextPadding: CGFloat); cdecl;
    procedure setPrefersSideBySideTextAndSecondaryText(prefersSideBySideTextAndSecondaryText: Boolean); cdecl;
    procedure setSecondaryAttributedText(secondaryAttributedText: NSAttributedString); cdecl;
    procedure setSecondaryText(secondaryText: NSString); cdecl;
    procedure setText(text: NSString); cdecl;
    procedure setTextToSecondaryTextHorizontalPadding(textToSecondaryTextHorizontalPadding: CGFloat); cdecl;
    procedure setTextToSecondaryTextVerticalPadding(textToSecondaryTextVerticalPadding: CGFloat); cdecl;
    function text: NSString; cdecl;
    function textProperties: UIListContentTextProperties; cdecl;
    function textToSecondaryTextHorizontalPadding: CGFloat; cdecl;
    function textToSecondaryTextVerticalPadding: CGFloat; cdecl;
  end;
  TUIListContentConfiguration = class(TOCGenericImport<UIListContentConfigurationClass, UIListContentConfiguration>) end;

  UIListContentViewClass = interface(UIViewClass)
    ['{78AFBD9C-5265-435D-9D2B-2AE15567F6EC}']
    {class} function new: Pointer; cdecl;
  end;

  UIListContentView = interface(UIView)
    ['{64EDE94A-B180-462D-904A-54761EA9E098}']
    function configuration: UIListContentConfiguration; cdecl;
    function imageLayoutGuide: UILayoutGuide; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithConfiguration(configuration: UIListContentConfiguration): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    function secondaryTextLayoutGuide: UILayoutGuide; cdecl;
    procedure setConfiguration(configuration: UIListContentConfiguration); cdecl;
    function textLayoutGuide: UILayoutGuide; cdecl;
  end;
  TUIListContentView = class(TOCGenericImport<UIListContentViewClass, UIListContentView>) end;

  UIKeyClass = interface(NSObjectClass)
    ['{603B7372-D0FF-4943-AD05-2C5BC7661A5B}']
  end;

  UIKey = interface(NSObject)
    ['{C5D63BAE-6C97-43B3-877A-F3A4B55C5A94}']
    function characters: NSString; cdecl;
    function charactersIgnoringModifiers: NSString; cdecl;
    function keyCode: UIKeyboardHIDUsage; cdecl;
    function modifierFlags: UIKeyModifierFlags; cdecl;
  end;
  TUIKey = class(TOCGenericImport<UIKeyClass, UIKey>) end;

  UIDatePickerClass = interface(UIControlClass)
    ['{02D3A42A-1165-426C-BF1F-2C35E1820D4D}']
  end;

  UIDatePicker = interface(UIControl)
    ['{CACDE60B-A2A9-4D67-A0C1-1CDF0D2626BD}']
    function calendar: NSCalendar; cdecl;
    function countDownDuration: NSTimeInterval; cdecl;
    function date: NSDate; cdecl;
    function datePickerMode: UIDatePickerMode; cdecl;
    function datePickerStyle: UIDatePickerStyle; cdecl;
    function locale: NSLocale; cdecl;
    function maximumDate: NSDate; cdecl;
    function minimumDate: NSDate; cdecl;
    function minuteInterval: NSInteger; cdecl;
    function preferredDatePickerStyle: UIDatePickerStyle; cdecl;
    function roundsToMinuteInterval: Boolean; cdecl;
    procedure setCalendar(calendar: NSCalendar); cdecl;
    procedure setCountDownDuration(countDownDuration: NSTimeInterval); cdecl;
    procedure setDate(date: NSDate; animated: Boolean); overload; cdecl;
    procedure setDate(date: NSDate); overload; cdecl;
    procedure setDatePickerMode(datePickerMode: UIDatePickerMode); cdecl;
    procedure setLocale(locale: NSLocale); cdecl;
    procedure setMaximumDate(maximumDate: NSDate); cdecl;
    procedure setMinimumDate(minimumDate: NSDate); cdecl;
    procedure setMinuteInterval(minuteInterval: NSInteger); cdecl;
    procedure setPreferredDatePickerStyle(preferredDatePickerStyle: UIDatePickerStyle); cdecl;
    procedure setRoundsToMinuteInterval(roundsToMinuteInterval: Boolean); cdecl;
    procedure setTimeZone(timeZone: NSTimeZone); cdecl;
    function timeZone: NSTimeZone; cdecl;
  end;
  TUIDatePicker = class(TOCGenericImport<UIDatePickerClass, UIDatePicker>) end;

  UINavigationItemRenameDelegate = interface(IObjectiveC)
    ['{56F57E40-E8A0-4FDA-9370-CAA4749DE6E3}']
    procedure navigationItem(navigationItem: UINavigationItem; didEndRenamingWithTitle: NSString); overload; cdecl;
    function navigationItem(navigationItem: UINavigationItem; willBeginRenamingWithSuggestedTitle: NSString;
      selectedRange: PNSRange): NSString; overload; cdecl;
    function navigationItemShouldBeginRenaming(navigationItem: UINavigationItem): Boolean; cdecl;
    [MethodName('navigationItem:shouldEndRenamingWithTitle:')]
    function navigationItemShouldEndRenamingWithTitle(navigationItem: UINavigationItem; shouldEndRenamingWithTitle: NSString): Boolean; cdecl;
  end;

  UINavigationItemClass = interface(NSObjectClass)
    ['{C6385D9F-7B23-466A-9319-9BCCD4DB23B2}']
  end;

  UINavigationItem = interface(NSObject)
    ['{7787800F-7D2B-4B90-B34A-B520EEBEA87F}']
    function additionalOverflowItems: UIDeferredMenuElement; cdecl;
    function backAction: UIAction; cdecl;
    function backBarButtonItem: UIBarButtonItem; cdecl;
    function backButtonDisplayMode: UINavigationItemBackButtonDisplayMode; cdecl;
    function backButtonTitle: NSString; cdecl;
    function centerItemGroups: NSArray; cdecl;
    function compactAppearance: UINavigationBarAppearance; cdecl;
    function compactScrollEdgeAppearance: UINavigationBarAppearance; cdecl;
    function customizationIdentifier: NSString; cdecl;
    function documentProperties: UIDocumentProperties; cdecl;
    function hidesBackButton: Boolean; cdecl;
    function hidesSearchBarWhenScrolling: Boolean; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithTitle(title: NSString): Pointer; cdecl;
    function largeTitleDisplayMode: UINavigationItemLargeTitleDisplayMode; cdecl;
    function leadingItemGroups: NSArray; cdecl;
    function leftBarButtonItem: UIBarButtonItem; cdecl;
    function leftBarButtonItems: NSArray; cdecl;
    function leftItemsSupplementBackButton: Boolean; cdecl;
    function overflowPresentationSource: Pointer; cdecl;
    function pinnedTrailingGroup: UIBarButtonItemGroup; cdecl;
    function preferredSearchBarPlacement: UINavigationItemSearchBarPlacement; cdecl;
    function prompt: NSString; cdecl;
    function renameDelegate: Pointer; cdecl;
    function rightBarButtonItem: UIBarButtonItem; cdecl;
    function rightBarButtonItems: NSArray; cdecl;
    function scrollEdgeAppearance: UINavigationBarAppearance; cdecl;
    function searchBarPlacement: UINavigationItemSearchBarPlacement; cdecl;
    function searchController: UISearchController; cdecl;
    procedure setAdditionalOverflowItems(additionalOverflowItems: UIDeferredMenuElement); cdecl;
    procedure setBackAction(backAction: UIAction); cdecl;
    procedure setBackBarButtonItem(backBarButtonItem: UIBarButtonItem); cdecl;
    procedure setBackButtonDisplayMode(backButtonDisplayMode: UINavigationItemBackButtonDisplayMode); cdecl;
    procedure setBackButtonTitle(backButtonTitle: NSString); cdecl;
    procedure setCenterItemGroups(centerItemGroups: NSArray); cdecl;
    procedure setCompactAppearance(compactAppearance: UINavigationBarAppearance); cdecl;
    procedure setCompactScrollEdgeAppearance(compactScrollEdgeAppearance: UINavigationBarAppearance); cdecl;
    procedure setCustomizationIdentifier(customizationIdentifier: NSString); cdecl;
    procedure setDocumentProperties(documentProperties: UIDocumentProperties); cdecl;
    procedure setHidesBackButton(hidesBackButton: Boolean); overload; cdecl;
    procedure setHidesBackButton(hidesBackButton: Boolean; animated: Boolean); overload; cdecl;
    procedure setHidesSearchBarWhenScrolling(hidesSearchBarWhenScrolling: Boolean); cdecl;
    procedure setLargeTitleDisplayMode(largeTitleDisplayMode: UINavigationItemLargeTitleDisplayMode); cdecl;
    procedure setLeadingItemGroups(leadingItemGroups: NSArray); cdecl;
    procedure setLeftBarButtonItem(leftBarButtonItem: UIBarButtonItem); overload; cdecl;
    procedure setLeftBarButtonItem(item: UIBarButtonItem; animated: Boolean); overload; cdecl;
    procedure setLeftBarButtonItems(leftBarButtonItems: NSArray); overload; cdecl;
    procedure setLeftBarButtonItems(items: NSArray; animated: Boolean); overload; cdecl;
    procedure setLeftItemsSupplementBackButton(leftItemsSupplementBackButton: Boolean); cdecl;
    procedure setPinnedTrailingGroup(pinnedTrailingGroup: UIBarButtonItemGroup); cdecl;
    procedure setPreferredSearchBarPlacement(preferredSearchBarPlacement: UINavigationItemSearchBarPlacement); cdecl;
    procedure setPrompt(prompt: NSString); cdecl;
    procedure setRenameDelegate(renameDelegate: Pointer); cdecl;
    procedure setRightBarButtonItem(item: UIBarButtonItem; animated: Boolean); overload; cdecl;
    procedure setRightBarButtonItem(rightBarButtonItem: UIBarButtonItem); overload; cdecl;
    procedure setRightBarButtonItems(items: NSArray; animated: Boolean); overload; cdecl;
    procedure setRightBarButtonItems(rightBarButtonItems: NSArray); overload; cdecl;
    procedure setScrollEdgeAppearance(scrollEdgeAppearance: UINavigationBarAppearance); cdecl;
    procedure setSearchController(searchController: UISearchController); cdecl;
    procedure setStandardAppearance(standardAppearance: UINavigationBarAppearance); cdecl;
    procedure setStyle(style: UINavigationItemStyle); cdecl;
    procedure setTitle(title: NSString); cdecl;
    procedure setTitleMenuProvider(titleMenuProvider: TUINavigationItemBlockMethod2); cdecl;
    procedure setTitleView(titleView: UIView); cdecl;
    procedure setTrailingItemGroups(trailingItemGroups: NSArray); cdecl;
    function standardAppearance: UINavigationBarAppearance; cdecl;
    function style: UINavigationItemStyle; cdecl;
    function title: NSString; cdecl;
    function titleMenuProvider: TUINavigationItemBlockMethod1; cdecl;
    function titleView: UIView; cdecl;
    function trailingItemGroups: NSArray; cdecl;
  end;
  TUINavigationItem = class(TOCGenericImport<UINavigationItemClass, UINavigationItem>) end;

  UIDocumentClass = interface(NSObjectClass)
    ['{493507DC-3AA4-4300-B65C-CB92C0A7C9F8}']
  end;

  UIDocument = interface(NSObject)
    ['{B5373469-23FD-48CF-A273-B0785B85BF61}']
    procedure autosaveWithCompletionHandler(completionHandler: TUIDocumentBlockMethod1); cdecl;
    function changeCountTokenForSaveOperation(saveOperation: UIDocumentSaveOperation): Pointer; cdecl;
    procedure closeWithCompletionHandler(completionHandler: TUIDocumentBlockMethod1); cdecl;
    function contentsForType(typeName: NSString; error: PPointer): Pointer; cdecl;
    procedure disableEditing; cdecl;
    function documentState: UIDocumentState; cdecl;
    procedure enableEditing; cdecl;
    function fileAttributesToWriteToURL(url: NSURL; forSaveOperation: UIDocumentSaveOperation; error: PPointer): NSDictionary; cdecl;
    function fileModificationDate: NSDate; cdecl;
    function fileNameExtensionForType(typeName: NSString; saveOperation: UIDocumentSaveOperation): NSString; cdecl;
    function fileType: NSString; cdecl;
    function fileURL: NSURL; cdecl;
    procedure finishedHandlingError(error: NSError; recovered: Boolean); cdecl;
    procedure handleError(error: NSError; userInteractionPermitted: Boolean); cdecl;
    function hasUnsavedChanges: Boolean; cdecl;
    function initWithFileURL(url: NSURL): Pointer; cdecl;
    function loadFromContents(contents: Pointer; ofType: NSString; error: PPointer): Boolean; cdecl;
    function localizedName: NSString; cdecl;
    procedure openWithCompletionHandler(completionHandler: TUIDocumentBlockMethod1); cdecl;
    procedure performAsynchronousFileAccessUsingBlock(block: TUIDocumentBlockMethod2); cdecl;
    function progress: NSProgress; cdecl;
    function readFromURL(url: NSURL; error: PPointer): Boolean; cdecl;
    procedure restoreUserActivityState(userActivity: NSUserActivity); cdecl;
    procedure revertToContentsOfURL(url: NSURL; completionHandler: TUIDocumentBlockMethod1); cdecl;
    procedure saveToURL(url: NSURL; forSaveOperation: UIDocumentSaveOperation; completionHandler: TUIDocumentBlockMethod1); cdecl;
    function savingFileType: NSString; cdecl;
    procedure setFileModificationDate(fileModificationDate: NSDate); cdecl;
    procedure setUndoManager(undoManager: NSUndoManager); cdecl;
    procedure setUserActivity(userActivity: NSUserActivity); cdecl;
    function undoManager: NSUndoManager; cdecl;
    procedure updateChangeCount(change: UIDocumentChangeKind); cdecl;
    procedure updateChangeCountWithToken(changeCountToken: Pointer; forSaveOperation: UIDocumentSaveOperation); cdecl;
    procedure updateUserActivityState(userActivity: NSUserActivity); cdecl;
    function userActivity: NSUserActivity; cdecl;
    procedure userInteractionNoLongerPermittedForError(error: NSError); cdecl;
    function writeContents(contents: Pointer; toURL: NSURL; forSaveOperation: UIDocumentSaveOperation; originalContentsURL: NSURL;
      error: PPointer): Boolean; overload; cdecl;
    function writeContents(contents: Pointer; andAttributes: NSDictionary; safelyToURL: NSURL; forSaveOperation: UIDocumentSaveOperation;
      error: PPointer): Boolean; overload; cdecl;
  end;
  TUIDocument = class(TOCGenericImport<UIDocumentClass, UIDocument>) end;

  UIDocumentViewControllerClass = interface(UIViewControllerClass)
    ['{CED2793A-71B5-4F7A-BBC4-859E8F7BF1B6}']
  end;

  UIDocumentViewController = interface(UIViewController)
    ['{B4C7B049-47CB-47A6-9D6E-050D28A4BD8A}']
    function document: UIDocument; cdecl;
    procedure documentDidOpen; cdecl;
    function initWithDocument(document: UIDocument): Pointer; cdecl;
    procedure navigationItemDidUpdate; cdecl;
    procedure openDocumentWithCompletionHandler(completionHandler: TUIDocumentViewControllerBlockMethod1); cdecl;
    procedure setDocument(document: UIDocument); cdecl;
    function undoRedoItemGroup: UIBarButtonItemGroup; cdecl;
  end;
  TUIDocumentViewController = class(TOCGenericImport<UIDocumentViewControllerClass, UIDocumentViewController>) end;

  UIDocumentPickerDelegate = interface(IObjectiveC)
    ['{40A20547-2327-40B6-93A3-C0D7F310DB22}']
    procedure documentPicker(controller: UIDocumentPickerViewController; didPickDocumentsAtURLs: NSArray); overload; cdecl;
    procedure documentPicker(controller: UIDocumentPickerViewController; didPickDocumentAtURL: NSURL); overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("documentPicker:didPickDocumentsAtURLs:", ios(8.0, 11.0))
    procedure documentPickerWasCancelled(controller: UIDocumentPickerViewController); cdecl;
  end;

  UIDocumentPickerViewControllerClass = interface(UIViewControllerClass)
    ['{2CA2A30E-64DB-48B1-9DE6-814FCC348763}']
  end;

  UIDocumentPickerViewController = interface(UIViewController)
    ['{235B2DE6-6D4F-496A-A52B-DF352333E6EF}']
    function allowsMultipleSelection: Boolean; cdecl;
    function delegate: Pointer; cdecl;
    function directoryURL: NSURL; cdecl;
    function documentPickerMode: UIDocumentPickerMode; cdecl; // API_DEPRECATED("Use appropriate initializers instead",ios(8.0,14.0), visionos(1.0, 1.0))
    function initForExportingURLs(urls: NSArray; asCopy: Boolean): Pointer; overload; cdecl;
    function initForExportingURLs(urls: NSArray): Pointer; overload; cdecl;
    function initForOpeningContentTypes(contentTypes: NSArray): Pointer; overload; cdecl;
    function initForOpeningContentTypes(contentTypes: NSArray; asCopy: Boolean): Pointer; overload; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithDocumentTypes(allowedUTIs: NSArray; inMode: UIDocumentPickerMode): Pointer; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("use initForOpeningContentTypes:asCopy: or initForOpeningContentTypes: instead", ios(8.0, 14.0), visionos(1.0, 1.0))
    function initWithURL(url: NSURL; inMode: UIDocumentPickerMode): Pointer; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("use initForExportingURLs:asCopy: or initForExportingURLs: instead", ios(8.0, 14.0), visionos(1.0, 1.0))
    function initWithURLs(urls: NSArray; inMode: UIDocumentPickerMode): Pointer; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("use initForExportingURLs:asCopy: or initForExportingURLs: instead", ios(11.0, 14.0), visionos(1.0, 1.0))
    procedure setAllowsMultipleSelection(allowsMultipleSelection: Boolean); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDirectoryURL(directoryURL: NSURL); cdecl;
    procedure setShouldShowFileExtensions(shouldShowFileExtensions: Boolean); cdecl;
    function shouldShowFileExtensions: Boolean; cdecl;
  end;
  TUIDocumentPickerViewController = class(TOCGenericImport<UIDocumentPickerViewControllerClass, UIDocumentPickerViewController>) end;

  UIDocumentMenuDelegate = interface(IObjectiveC)
    ['{E46AA879-93A5-461A-90B5-40328172F78B}']
    procedure documentMenu(documentMenu: UIDocumentMenuViewController; didPickDocumentPicker: UIDocumentPickerViewController); cdecl;
    procedure documentMenuWasCancelled(documentMenu: UIDocumentMenuViewController); cdecl;
  end;

  UIDocumentMenuViewControllerClass = interface(UIViewControllerClass)
    ['{B3AAF17A-BAE5-405F-B5D9-741E0356BC14}']
  end;

  UIDocumentMenuViewController = interface(UIViewController)
    ['{A7220BAA-0A2A-413E-8C7D-60CE1668923B}']
    procedure addOptionWithTitle(title: NSString; image: UIImage; order: UIDocumentMenuOrder;
      handler: TUIDocumentMenuViewControllerBlockMethod1); cdecl;
    function delegate: Pointer; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithDocumentTypes(allowedUTIs: NSArray; inMode: UIDocumentPickerMode): Pointer; cdecl;
    function initWithURL(url: NSURL; inMode: UIDocumentPickerMode): Pointer; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
  end;
  TUIDocumentMenuViewController = class(TOCGenericImport<UIDocumentMenuViewControllerClass, UIDocumentMenuViewController>) end;

  UIDocumentPickerExtensionViewControllerClass = interface(UIViewControllerClass)
    ['{2531B815-A9AF-4B7B-B83A-05DE1CB509A4}']
  end;

  UIDocumentPickerExtensionViewController = interface(UIViewController)
    ['{F5DDA820-3CB7-45F2-82C6-59B19D20CFA1}']
    procedure dismissGrantingAccessToURL(url: NSURL); cdecl;
    function documentPickerMode: UIDocumentPickerMode; cdecl;
    function documentStorageURL: NSURL; cdecl;
    function originalURL: NSURL; cdecl;
    procedure prepareForPresentationInMode(mode: UIDocumentPickerMode); cdecl;
    function providerIdentifier: NSString; cdecl;
    function validTypes: NSArray; cdecl;
  end;
  TUIDocumentPickerExtensionViewController = class(TOCGenericImport<UIDocumentPickerExtensionViewControllerClass, UIDocumentPickerExtensionViewController>) end;

  UICloudSharingControllerDelegate = interface(IObjectiveC)
    ['{5EE7C0EE-8C65-4892-962F-F956AB42A1D4}']
    procedure cloudSharingController(csc: UICloudSharingController; failedToSaveShareWithError: NSError); cdecl;
    procedure cloudSharingControllerDidSaveShare(csc: UICloudSharingController); cdecl;
    procedure cloudSharingControllerDidStopSharing(csc: UICloudSharingController); cdecl;
    function itemThumbnailDataForCloudSharingController(csc: UICloudSharingController): NSData; cdecl;
    function itemTitleForCloudSharingController(csc: UICloudSharingController): NSString; cdecl;
    function itemTypeForCloudSharingController(csc: UICloudSharingController): NSString; cdecl;
  end;

  UICloudSharingControllerClass = interface(UIViewControllerClass)
    ['{A3931A7A-A4B9-4A22-A58F-A2BB91F1D9CF}']
  end;

  UICloudSharingController = interface(UIViewController)
    ['{B39D1CDC-793B-4CC1-B457-74935E2BCCE1}']
    function activityItemSource: Pointer; cdecl;
    function availablePermissions: UICloudSharingPermissionOptions; cdecl;
    function delegate: Pointer; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    function initWithPreparationHandler(preparationHandler: TUICloudSharingControllerBlockMethod2): Pointer; cdecl; // API_DEPRECATED("Use -[UIActivityViewController initWithActivityItemsConfiguration:] and pass it a UIActivityItemsConfigurationReading-conforming object with an NSItemProvider and registered preparation handler", ios(10.0, 17.0))
    function initWithShare(share: CKShare; container: CKContainer): Pointer; cdecl;
    procedure setAvailablePermissions(availablePermissions: UICloudSharingPermissionOptions); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function share: CKShare; cdecl;
  end;
  TUICloudSharingController = class(TOCGenericImport<UICloudSharingControllerClass, UICloudSharingController>) end;

  UIVisualEffectClass = interface(NSObjectClass)
    ['{E1B958F5-D22C-49B0-8A72-61DB2E223E2E}']
  end;

  UIVisualEffect = interface(NSObject)
    ['{2159458F-6631-47D6-98F9-B9DCD4A62D78}']
  end;
  TUIVisualEffect = class(TOCGenericImport<UIVisualEffectClass, UIVisualEffect>) end;

  UIBlurEffectClass = interface(UIVisualEffectClass)
    ['{FA9BFD71-3387-4DA5-AB3B-7FA56B61D019}']
    {class} function effectWithStyle(style: UIBlurEffectStyle): UIBlurEffect; cdecl;
  end;

  UIBlurEffect = interface(UIVisualEffect)
    ['{FFF03102-0E5F-4372-BDB5-0EDE70E34370}']
  end;
  TUIBlurEffect = class(TOCGenericImport<UIBlurEffectClass, UIBlurEffect>) end;

  UIGlassEffectClass = interface(UIVisualEffectClass)
    ['{D276AE3A-CE16-4ED1-BB08-63447FD0184D}']
  end;

  UIGlassEffect = interface(UIVisualEffect)
    ['{A7799A28-13B0-4CD9-9711-C1154316F258}']
    function isInteractive: Boolean; cdecl;
    procedure setInteractive(interactive: Boolean); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
  end;
  TUIGlassEffect = class(TOCGenericImport<UIGlassEffectClass, UIGlassEffect>) end;

  UIGlassContainerEffectClass = interface(UIVisualEffectClass)
    ['{1D001C01-C5F4-4FCA-A652-4D135234C9DF}']
  end;

  UIGlassContainerEffect = interface(UIVisualEffect)
    ['{E225FB6C-B2E7-4B54-BD26-BEB2592ADA1F}']
    procedure setSpacing(spacing: CGFloat); cdecl;
    function spacing: CGFloat; cdecl;
  end;
  TUIGlassContainerEffect = class(TOCGenericImport<UIGlassContainerEffectClass, UIGlassContainerEffect>) end;

  UIVibrancyEffectClass = interface(UIVisualEffectClass)
    ['{9DC0972A-33AF-47CD-B221-76F19B182C05}']
    {class} function effectForBlurEffect(blurEffect: UIBlurEffect): UIVibrancyEffect; overload; cdecl;
    {class} function effectForBlurEffect(blurEffect: UIBlurEffect; style: UIVibrancyEffectStyle): UIVibrancyEffect; overload; cdecl;
  end;

  UIVibrancyEffect = interface(UIVisualEffect)
    ['{F364984C-4BAB-4C6E-A6D2-22F49EEC6B5D}']
  end;
  TUIVibrancyEffect = class(TOCGenericImport<UIVibrancyEffectClass, UIVibrancyEffect>) end;

  UIVisualEffectViewClass = interface(UIViewClass)
    ['{9311237A-6F40-4AF5-94C3-24CD062BC78F}']
  end;

  UIVisualEffectView = interface(UIView)
    ['{FBBD8AB8-B8DF-4817-8788-170CB87D856B}']
    function contentView: UIView; cdecl;
    function effect: UIVisualEffect; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithEffect(effect: UIVisualEffect): Pointer; cdecl;
    procedure setEffect(effect: UIVisualEffect); cdecl;
  end;
  TUIVisualEffectView = class(TOCGenericImport<UIVisualEffectViewClass, UIVisualEffectView>) end;

  UIFontPickerViewControllerConfigurationClass = interface(NSObjectClass)
    ['{5BDC8A91-D0A0-4FB9-A50D-0789DA01036F}']
    {class} function filterPredicateForFilteredLanguages(filteredLanguages: NSArray): NSPredicate; cdecl;
  end;

  UIFontPickerViewControllerConfiguration = interface(NSObject)
    ['{14A35128-54FF-4C6B-8DE7-9D24D3F6B9F9}']
    function displayUsingSystemFont: Boolean; cdecl;
    function filteredLanguagesPredicate: NSPredicate; cdecl;
    function filteredTraits: UIFontDescriptorSymbolicTraits; cdecl;
    function includeFaces: Boolean; cdecl;
    procedure setDisplayUsingSystemFont(displayUsingSystemFont: Boolean); cdecl;
    procedure setFilteredLanguagesPredicate(filteredLanguagesPredicate: NSPredicate); cdecl;
    procedure setFilteredTraits(filteredTraits: UIFontDescriptorSymbolicTraits); cdecl;
    procedure setIncludeFaces(includeFaces: Boolean); cdecl;
  end;
  TUIFontPickerViewControllerConfiguration = class(TOCGenericImport<UIFontPickerViewControllerConfigurationClass, UIFontPickerViewControllerConfiguration>) end;

  UIFontPickerViewControllerDelegate = interface(IObjectiveC)
    ['{BC165E5F-7326-4516-8C49-8FEBBACC7BD6}']
    procedure fontPickerViewControllerDidCancel(viewController: UIFontPickerViewController); cdecl;
    procedure fontPickerViewControllerDidPickFont(viewController: UIFontPickerViewController); cdecl;
  end;

  UIFontPickerViewControllerClass = interface(UIViewControllerClass)
    ['{FC8CB90A-73B0-4BDE-ABAE-C27604BACE48}']
  end;

  UIFontPickerViewController = interface(UIViewController)
    ['{CFD5B94F-8EA3-49ED-BCD1-6F178FA9CE48}']
    function configuration: UIFontPickerViewControllerConfiguration; cdecl;
    function delegate: Pointer; cdecl;
    function initWithConfiguration(configuration: UIFontPickerViewControllerConfiguration): Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    function selectedFontDescriptor: UIFontDescriptor; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setSelectedFontDescriptor(selectedFontDescriptor: UIFontDescriptor); cdecl;
  end;
  TUIFontPickerViewController = class(TOCGenericImport<UIFontPickerViewControllerClass, UIFontPickerViewController>) end;

  UIGraphicsRendererFormatClass = interface(NSObjectClass)
    ['{8C5B8576-6C91-4335-8D10-ED02E1264012}']
    {class} function defaultFormat: Pointer; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("preferredFormat", tvos(10.0, 11.0))
    {class} function preferredFormat: Pointer; cdecl;
  end;

  UIGraphicsRendererFormat = interface(NSObject)
    ['{1EC25468-80B4-495B-915F-83A9A4023B93}']
    function bounds: CGRect; cdecl;
  end;
  TUIGraphicsRendererFormat = class(TOCGenericImport<UIGraphicsRendererFormatClass, UIGraphicsRendererFormat>) end;

  UIGraphicsRendererContextClass = interface(NSObjectClass)
    ['{AD267FB2-60CC-4502-99F1-97604C731FEB}']
  end;

  UIGraphicsRendererContext = interface(NSObject)
    ['{328505DE-8F70-401F-A707-A418F3B7839D}']
    function CGContext: CGContextRef; cdecl;
    procedure clipToRect(rect: CGRect); cdecl;
    procedure fillRect(rect: CGRect; blendMode: CGBlendMode); overload; cdecl;
    procedure fillRect(rect: CGRect); overload; cdecl;
    function format: UIGraphicsRendererFormat; cdecl;
    procedure strokeRect(rect: CGRect; blendMode: CGBlendMode); overload; cdecl;
    procedure strokeRect(rect: CGRect); overload; cdecl;
  end;
  TUIGraphicsRendererContext = class(TOCGenericImport<UIGraphicsRendererContextClass, UIGraphicsRendererContext>) end;

  UIGraphicsRendererClass = interface(NSObjectClass)
    ['{1E7565EC-01DD-417B-9A6B-69A0C74DA776}']
    {class} function contextWithFormat(format: UIGraphicsRendererFormat): CGContextRef; cdecl;
    {class} procedure prepareCGContext(context: CGContextRef; withRendererContext: UIGraphicsRendererContext); cdecl;
    {class} function rendererContextClass: Pointer; cdecl;
  end;

  UIGraphicsRenderer = interface(NSObject)
    ['{CD0A7E98-A267-46DA-9159-1C39E14E311E}']
    function allowsImageOutput: Boolean; cdecl;
    function format: UIGraphicsRendererFormat; cdecl;
    function initWithBounds(bounds: CGRect): Pointer; overload; cdecl;
    function initWithBounds(bounds: CGRect; format: UIGraphicsRendererFormat): Pointer; overload; cdecl;
    function runDrawingActions(drawingActions: UIGraphicsDrawingActions; completionActions: UIGraphicsDrawingActions;
      error: PPointer): Boolean; cdecl;
  end;
  TUIGraphicsRenderer = class(TOCGenericImport<UIGraphicsRendererClass, UIGraphicsRenderer>) end;

  UIGraphicsImageRendererFormatClass = interface(UIGraphicsRendererFormatClass)
    ['{149D5D64-1EF3-473A-9ED2-F9D0F5666793}']
    {class} function formatForTraitCollection(traitCollection: UITraitCollection): Pointer; cdecl;
  end;

  UIGraphicsImageRendererFormat = interface(UIGraphicsRendererFormat)
    ['{B0D2987F-E3F3-4334-9C08-C1C4F851D129}']
    function opaque: Boolean; cdecl;
    function preferredRange: UIGraphicsImageRendererFormatRange; cdecl;
    function prefersExtendedRange: Boolean; cdecl; // API_DEPRECATED("Use the preferredRange property instead", ios(10.0, 12.0))
    function scale: CGFloat; cdecl;
    procedure setOpaque(opaque: Boolean); cdecl;
    procedure setPreferredRange(preferredRange: UIGraphicsImageRendererFormatRange); cdecl;
    procedure setPrefersExtendedRange(prefersExtendedRange: Boolean); cdecl; // API_DEPRECATED("Use the preferredRange property instead", ios(10.0, 12.0))
    procedure setScale(scale: CGFloat); cdecl;
    function supportsHighDynamicRange: Boolean; cdecl;
  end;
  TUIGraphicsImageRendererFormat = class(TOCGenericImport<UIGraphicsImageRendererFormatClass, UIGraphicsImageRendererFormat>) end;

  UIGraphicsImageRendererContextClass = interface(UIGraphicsRendererContextClass)
    ['{D5E6354A-87E2-4C79-9DD9-61398CAD63A0}']
  end;

  UIGraphicsImageRendererContext = interface(UIGraphicsRendererContext)
    ['{820423EE-D126-4F53-874A-C9DD76184D67}']
    function currentImage: UIImage; cdecl;
  end;
  TUIGraphicsImageRendererContext = class(TOCGenericImport<UIGraphicsImageRendererContextClass, UIGraphicsImageRendererContext>) end;

  UIGraphicsImageRendererClass = interface(UIGraphicsRendererClass)
    ['{592B8A31-4714-49A6-99AA-925AF9B53A7B}']
  end;

  UIGraphicsImageRenderer = interface(UIGraphicsRenderer)
    ['{0E694034-459C-4104-8EF2-B66455DCB913}']
    function imageWithActions(actions: UIGraphicsImageDrawingActions): UIImage; cdecl;
    function initWithBounds(bounds: CGRect; format: UIGraphicsImageRendererFormat): Pointer; cdecl;
    function initWithSize(size: CGSize): Pointer; overload; cdecl;
    function initWithSize(size: CGSize; format: UIGraphicsImageRendererFormat): Pointer; overload; cdecl;
    function JPEGDataWithCompressionQuality(compressionQuality: CGFloat; actions: UIGraphicsImageDrawingActions): NSData; cdecl;
    function PNGDataWithActions(actions: UIGraphicsImageDrawingActions): NSData; cdecl;
  end;
  TUIGraphicsImageRenderer = class(TOCGenericImport<UIGraphicsImageRendererClass, UIGraphicsImageRenderer>) end;

  UIGraphicsPDFRendererFormatClass = interface(UIGraphicsRendererFormatClass)
    ['{7133D2CC-4E23-49E5-B18F-EE3750E57712}']
  end;

  UIGraphicsPDFRendererFormat = interface(UIGraphicsRendererFormat)
    ['{BAE842FF-5D6E-4785-9660-CECC4C37947D}']
    function documentInfo: NSDictionary; cdecl;
    procedure setDocumentInfo(documentInfo: NSDictionary); cdecl;
  end;
  TUIGraphicsPDFRendererFormat = class(TOCGenericImport<UIGraphicsPDFRendererFormatClass, UIGraphicsPDFRendererFormat>) end;

  UIGraphicsPDFRendererContextClass = interface(UIGraphicsRendererContextClass)
    ['{FF2AFF28-9FAD-4560-A848-ECA27DA71577}']
  end;

  UIGraphicsPDFRendererContext = interface(UIGraphicsRendererContext)
    ['{4E2F003C-9269-4DC8-B0A6-1C6E56543699}']
    procedure addDestinationWithName(name: NSString; atPoint: CGPoint); cdecl;
    procedure beginPage; cdecl;
    procedure beginPageWithBounds(bounds: CGRect; pageInfo: NSDictionary); cdecl;
    function pdfContextBounds: CGRect; cdecl;
    procedure setDestinationWithName(name: NSString; forRect: CGRect); cdecl;
    procedure setURL(url: NSURL; forRect: CGRect); cdecl;
  end;
  TUIGraphicsPDFRendererContext = class(TOCGenericImport<UIGraphicsPDFRendererContextClass, UIGraphicsPDFRendererContext>) end;

  UIGraphicsPDFRendererClass = interface(UIGraphicsRendererClass)
    ['{EF972D63-42D6-4301-8778-942760FF636F}']
  end;

  UIGraphicsPDFRenderer = interface(UIGraphicsRenderer)
    ['{FADFB060-DA23-426C-8852-ABCA6A191B4C}']
    function initWithBounds(bounds: CGRect; format: UIGraphicsPDFRendererFormat): Pointer; cdecl;
    function PDFDataWithActions(actions: UIGraphicsPDFDrawingActions): NSData; cdecl;
    function writePDFToURL(url: NSURL; withActions: UIGraphicsPDFDrawingActions; error: PPointer): Boolean; cdecl;
  end;
  TUIGraphicsPDFRenderer = class(TOCGenericImport<UIGraphicsPDFRendererClass, UIGraphicsPDFRenderer>) end;

  UIImageAssetClass = interface(NSObjectClass)
    ['{046B60A8-B98B-400E-8190-47F0790F940D}']
  end;

  UIImageAsset = interface(NSObject)
    ['{71CAE548-D359-49F2-B4EA-95BFC0863AE0}']
    function imageWithConfiguration(configuration: UIImageConfiguration): UIImage; cdecl;
    function imageWithTraitCollection(traitCollection: UITraitCollection): UIImage; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    procedure registerImage(image: UIImage; withTraitCollection: UITraitCollection); overload; cdecl;
    procedure registerImage(image: UIImage; withConfiguration: UIImageConfiguration); overload; cdecl;
    procedure unregisterImageWithConfiguration(configuration: UIImageConfiguration); cdecl;
    procedure unregisterImageWithTraitCollection(traitCollection: UITraitCollection); cdecl;
  end;
  TUIImageAsset = class(TOCGenericImport<UIImageAssetClass, UIImageAsset>) end;

  UIPanGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{96BB363B-A2A0-438F-937F-032988DCBBE1}']
  end;

  UIPanGestureRecognizer = interface(UIGestureRecognizer)
    ['{64BE1AC0-3F15-486D-B45C-1BD7F94FFABB}']
    function allowedScrollTypesMask: UIScrollTypeMask; cdecl;
    function maximumNumberOfTouches: NSUInteger; cdecl;
    function minimumNumberOfTouches: NSUInteger; cdecl;
    procedure setAllowedScrollTypesMask(allowedScrollTypesMask: UIScrollTypeMask); cdecl;
    procedure setMaximumNumberOfTouches(maximumNumberOfTouches: NSUInteger); cdecl;
    procedure setMinimumNumberOfTouches(minimumNumberOfTouches: NSUInteger); cdecl;
    procedure setTranslation(translation: CGPoint; inView: UIView); cdecl;
    function translationInView(view: UIView): CGPoint; cdecl;
    function velocityInView(view: UIView): CGPoint; cdecl;
  end;
  TUIPanGestureRecognizer = class(TOCGenericImport<UIPanGestureRecognizerClass, UIPanGestureRecognizer>) end;

  UITapGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{1E833D8B-7776-4265-AFED-62E338A133FC}']
  end;

  UITapGestureRecognizer = interface(UIGestureRecognizer)
    ['{3980236E-CF2C-406C-8D05-DF482CA1D875}']
    function buttonMaskRequired: UIEventButtonMask; cdecl;
    function numberOfTapsRequired: NSUInteger; cdecl;
    function numberOfTouchesRequired: NSUInteger; cdecl;
    procedure setButtonMaskRequired(buttonMaskRequired: UIEventButtonMask); cdecl;
    procedure setNumberOfTapsRequired(numberOfTapsRequired: NSUInteger); cdecl;
    procedure setNumberOfTouchesRequired(numberOfTouchesRequired: NSUInteger); cdecl;
  end;
  TUITapGestureRecognizer = class(TOCGenericImport<UITapGestureRecognizerClass, UITapGestureRecognizer>) end;

  UINavigationControllerClass = interface(UIViewControllerClass)
    ['{E7018520-245A-4201-B170-5974B4D5BF0F}']
  end;

  UINavigationController = interface(UIViewController)
    ['{899F3EEE-AA93-46C9-B9C7-60864783761B}']
    function barHideOnSwipeGestureRecognizer: UIPanGestureRecognizer; cdecl;
    function barHideOnTapGestureRecognizer: UITapGestureRecognizer; cdecl;
    function delegate: Pointer; cdecl;
    function hidesBarsOnSwipe: Boolean; cdecl;
    function hidesBarsOnTap: Boolean; cdecl;
    function hidesBarsWhenKeyboardAppears: Boolean; cdecl;
    function hidesBarsWhenVerticallyCompact: Boolean; cdecl;
    function initWithCoder(aDecoder: NSCoder): Pointer; cdecl;
    function initWithNavigationBarClass(navigationBarClass: Pointer; toolbarClass: Pointer): Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    function initWithRootViewController(rootViewController: UIViewController): Pointer; cdecl;
    function interactivePopGestureRecognizer: UIGestureRecognizer; cdecl;
    function isNavigationBarHidden: Boolean; cdecl;
    function isToolbarHidden: Boolean; cdecl;
    function navigationBar: UINavigationBar; cdecl;
    function popToRootViewControllerAnimated(animated: Boolean): NSArray; cdecl;
    function popToViewController(viewController: UIViewController; animated: Boolean): NSArray; cdecl;
    function popViewControllerAnimated(animated: Boolean): UIViewController; cdecl;
    procedure pushViewController(viewController: UIViewController; animated: Boolean); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setHidesBarsOnSwipe(hidesBarsOnSwipe: Boolean); cdecl;
    procedure setHidesBarsOnTap(hidesBarsOnTap: Boolean); cdecl;
    procedure setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: Boolean); cdecl;
    procedure setHidesBarsWhenVerticallyCompact(hidesBarsWhenVerticallyCompact: Boolean); cdecl;
    procedure setNavigationBarHidden(hidden: Boolean; animated: Boolean); overload; cdecl;
    procedure setNavigationBarHidden(navigationBarHidden: Boolean); overload; cdecl;
    procedure setToolbarHidden(hidden: Boolean; animated: Boolean); overload; cdecl;
    procedure setToolbarHidden(toolbarHidden: Boolean); overload; cdecl;
    procedure setViewControllers(viewControllers: NSArray; animated: Boolean); overload; cdecl;
    procedure setViewControllers(viewControllers: NSArray); overload; cdecl;
    procedure showViewController(vc: UIViewController; sender: Pointer); cdecl;
    function toolbar: UIToolbar; cdecl;
    function topViewController: UIViewController; cdecl;
    function viewControllers: NSArray; cdecl;
    function visibleViewController: UIViewController; cdecl;
  end;
  TUINavigationController = class(TOCGenericImport<UINavigationControllerClass, UINavigationController>) end;

  UINavigationControllerDelegate = interface(IObjectiveC)
    ['{CF2FEF88-0321-46F9-92D4-BB8D96CBDDBC}']
    function navigationController(navigationController: UINavigationController;
      interactionControllerForAnimationController: Pointer): Pointer; overload; cdecl;
    function navigationController(navigationController: UINavigationController; animationControllerForOperation: UINavigationControllerOperation;
      fromViewController: UIViewController; toViewController: UIViewController): Pointer; overload; cdecl;
    procedure navigationController(navigationController: UINavigationController; willShowViewController: UIViewController;
      animated: Boolean); overload; cdecl;
    [MethodName('navigationController:didShowViewController:animated:')]
    procedure navigationControllerDidShowViewController(navigationController: UINavigationController; didShowViewController: UIViewController;
      animated: Boolean); cdecl;
    function navigationControllerPreferredInterfaceOrientationForPresentation(navigationController: UINavigationController): UIInterfaceOrientation; cdecl;
    function navigationControllerSupportedInterfaceOrientations(navigationController: UINavigationController): UIInterfaceOrientationMask; cdecl;
  end;

  UIImagePickerControllerClass = interface(UINavigationControllerClass)
    ['{C269EE27-2021-43DD-92F9-63D89E49218F}']
    {class} function availableCaptureModesForCameraDevice(cameraDevice: UIImagePickerControllerCameraDevice): NSArray; cdecl;
    {class} function availableMediaTypesForSourceType(sourceType: UIImagePickerControllerSourceType): NSArray; cdecl;
    {class} function isCameraDeviceAvailable(cameraDevice: UIImagePickerControllerCameraDevice): Boolean; cdecl;
    {class} function isFlashAvailableForCameraDevice(cameraDevice: UIImagePickerControllerCameraDevice): Boolean; cdecl;
    {class} function isSourceTypeAvailable(sourceType: UIImagePickerControllerSourceType): Boolean; cdecl;
  end;

  UIImagePickerController = interface(UINavigationController)
    ['{027BA064-A959-4A11-BBAC-C966EF0188FD}']
    function allowsEditing: Boolean; cdecl;
    function allowsImageEditing: Boolean; cdecl; // API_DEPRECATED("", ios(2.0, 3.1))
    function cameraCaptureMode: UIImagePickerControllerCameraCaptureMode; cdecl;
    function cameraDevice: UIImagePickerControllerCameraDevice; cdecl;
    function cameraFlashMode: UIImagePickerControllerCameraFlashMode; cdecl;
    function cameraOverlayView: UIView; cdecl;
    function cameraViewTransform: CGAffineTransform; cdecl;
    function delegate: Pointer; cdecl;
    function imageExportPreset: UIImagePickerControllerImageURLExportPreset; cdecl; // API_DEPRECATED("Will be removed in a future release, use PHPicker.", ios(11.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    function mediaTypes: NSArray; cdecl;
    procedure setAllowsEditing(allowsEditing: Boolean); cdecl;
    procedure setAllowsImageEditing(allowsImageEditing: Boolean); cdecl; // API_DEPRECATED("", ios(2.0, 3.1))
    procedure setCameraCaptureMode(cameraCaptureMode: UIImagePickerControllerCameraCaptureMode); cdecl;
    procedure setCameraDevice(cameraDevice: UIImagePickerControllerCameraDevice); cdecl;
    procedure setCameraFlashMode(cameraFlashMode: UIImagePickerControllerCameraFlashMode); cdecl;
    procedure setCameraOverlayView(cameraOverlayView: UIView); cdecl;
    procedure setCameraViewTransform(cameraViewTransform: CGAffineTransform); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setImageExportPreset(imageExportPreset: UIImagePickerControllerImageURLExportPreset); cdecl; // API_DEPRECATED("Will be removed in a future release, use PHPicker.", ios(11.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    procedure setMediaTypes(mediaTypes: NSArray); cdecl;
    procedure setShowsCameraControls(showsCameraControls: Boolean); cdecl;
    procedure setSourceType(sourceType: UIImagePickerControllerSourceType); cdecl;
    procedure setVideoExportPreset(videoExportPreset: NSString); cdecl; // API_DEPRECATED("Will be removed in a future release, use PHPicker.", ios(11.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    procedure setVideoMaximumDuration(videoMaximumDuration: NSTimeInterval); cdecl;
    procedure setVideoQuality(videoQuality: UIImagePickerControllerQualityType); cdecl;
    function showsCameraControls: Boolean; cdecl;
    function sourceType: UIImagePickerControllerSourceType; cdecl;
    function startVideoCapture: Boolean; cdecl;
    procedure stopVideoCapture; cdecl;
    procedure takePicture; cdecl;
    function videoExportPreset: NSString; cdecl; // API_DEPRECATED("Will be removed in a future release, use PHPicker.", ios(11.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    function videoMaximumDuration: NSTimeInterval; cdecl;
    function videoQuality: UIImagePickerControllerQualityType; cdecl;
  end;
  TUIImagePickerController = class(TOCGenericImport<UIImagePickerControllerClass, UIImagePickerController>) end;

  UIImagePickerControllerDelegate = interface(IObjectiveC)
    ['{F4E1256B-BFCF-438A-98A8-8A8333838661}']
    procedure imagePickerController(picker: UIImagePickerController; didFinishPickingMediaWithInfo: NSDictionary); overload; cdecl;
    procedure imagePickerController(picker: UIImagePickerController; didFinishPickingImage: UIImage; editingInfo: NSDictionary); overload; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure imagePickerControllerDidCancel(picker: UIImagePickerController); cdecl;
  end;

  UIInputViewClass = interface(UIViewClass)
    ['{B124CA9E-5C84-4DFC-A119-B4FC6AF4FB1F}']
  end;

  UIInputView = interface(UIView)
    ['{3462A9B3-AB36-44AC-960A-547AF1D95185}']
    function allowsSelfSizing: Boolean; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect; inputViewStyle: UIInputViewStyle): Pointer; cdecl;
    function inputViewStyle: UIInputViewStyle; cdecl;
    procedure setAllowsSelfSizing(allowsSelfSizing: Boolean); cdecl;
  end;
  TUIInputView = class(TOCGenericImport<UIInputViewClass, UIInputView>) end;

  UITextDocumentProxy = interface(IObjectiveC)
    ['{CC668D9F-9066-46E8-9CBB-5BBDF571CB86}']
    procedure adjustTextPositionByCharacterOffset(offset: NSInteger); cdecl;
    function documentContextAfterInput: NSString; cdecl;
    function documentContextBeforeInput: NSString; cdecl;
    function documentIdentifier: NSUUID; cdecl;
    function documentInputMode: UITextInputMode; cdecl;
    function selectedText: NSString; cdecl;
    procedure setMarkedText(markedText: NSString; selectedRange: NSRange); cdecl;
    procedure unmarkText; cdecl;
  end;

  UIInputViewControllerClass = interface(UIViewControllerClass)
    ['{C5A5D2A1-B038-4642-9033-2D891041E43F}']
  end;

  UIInputViewController = interface(UIViewController)
    ['{5E430EB7-F655-4B61-80B4-3F2E8844ACFA}']
    procedure advanceToNextInputMode; cdecl;
    procedure dismissKeyboard; cdecl;
    procedure handleInputModeListFromView(view: UIView; withEvent: UIEvent); cdecl;
    function hasDictationKey: Boolean; cdecl;
    function hasFullAccess: Boolean; cdecl;
    function inputView: UIInputView; cdecl;
    function needsInputModeSwitchKey: Boolean; cdecl;
    function primaryLanguage: NSString; cdecl;
    procedure requestSupplementaryLexiconWithCompletion(completionHandler: TUIInputViewControllerBlockMethod1); cdecl;
    procedure setHasDictationKey(hasDictationKey: Boolean); cdecl;
    procedure setInputView(inputView: UIInputView); cdecl;
    procedure setPrimaryLanguage(primaryLanguage: NSString); cdecl;
    function textDocumentProxy: Pointer; cdecl;
  end;
  TUIInputViewController = class(TOCGenericImport<UIInputViewControllerClass, UIInputViewController>) end;

  UILabelClass = interface(UIViewClass)
    ['{AB88F8A7-0F89-4C00-B96F-08E8D278BE72}']
  end;

  UILabel = interface(UIView)
    ['{207D86FB-2604-40F6-8CA7-EECB8BD3EBA9}']
    function adjustsFontSizeToFitWidth: Boolean; cdecl;
    function adjustsLetterSpacingToFitWidth: Boolean; cdecl; // API_DEPRECATED("", ios(6.0, 7.0))
    function allowsDefaultTighteningForTruncation: Boolean; cdecl;
    function attributedText: NSAttributedString; cdecl;
    function baselineAdjustment: UIBaselineAdjustment; cdecl;
    procedure drawTextInRect(rect: CGRect); cdecl;
    function enablesMarqueeWhenAncestorFocused: Boolean; cdecl;
    function font: UIFont; cdecl;
    function highlightedTextColor: UIColor; cdecl;
    function isEnabled: Boolean; cdecl;
    function isHighlighted: Boolean; cdecl;
    function isUserInteractionEnabled: Boolean; cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    function lineBreakStrategy: NSLineBreakStrategy; cdecl;
    function minimumFontSize: CGFloat; cdecl; // API_DEPRECATED("", ios(2.0, 6.0))
    function minimumScaleFactor: CGFloat; cdecl;
    function numberOfLines: NSInteger; cdecl;
    function preferredMaxLayoutWidth: CGFloat; cdecl;
    function preferredVibrancy: UILabelVibrancy; cdecl;
    procedure setAdjustsFontSizeToFitWidth(adjustsFontSizeToFitWidth: Boolean); cdecl;
    procedure setAdjustsLetterSpacingToFitWidth(adjustsLetterSpacingToFitWidth: Boolean); cdecl; // API_DEPRECATED("", ios(6.0, 7.0))
    procedure setAllowsDefaultTighteningForTruncation(allowsDefaultTighteningForTruncation: Boolean); cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    procedure setBaselineAdjustment(baselineAdjustment: UIBaselineAdjustment); cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    procedure setEnablesMarqueeWhenAncestorFocused(enablesMarqueeWhenAncestorFocused: Boolean); cdecl;
    procedure setFont(font: UIFont); cdecl;
    procedure setHighlighted(highlighted: Boolean); cdecl;
    procedure setHighlightedTextColor(highlightedTextColor: UIColor); cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    procedure setLineBreakStrategy(lineBreakStrategy: NSLineBreakStrategy); cdecl;
    procedure setMinimumFontSize(minimumFontSize: CGFloat); cdecl; // API_DEPRECATED("", ios(2.0, 6.0))
    procedure setMinimumScaleFactor(minimumScaleFactor: CGFloat); cdecl;
    procedure setNumberOfLines(numberOfLines: NSInteger); cdecl;
    procedure setPreferredMaxLayoutWidth(preferredMaxLayoutWidth: CGFloat); cdecl;
    procedure setPreferredVibrancy(preferredVibrancy: UILabelVibrancy); cdecl;
    procedure setShadowColor(shadowColor: UIColor); cdecl;
    procedure setShadowOffset(shadowOffset: CGSize); cdecl;
    procedure setShowsExpansionTextWhenTruncated(showsExpansionTextWhenTruncated: Boolean); cdecl;
    procedure setText(text: NSString); cdecl;
    procedure setTextAlignment(textAlignment: NSTextAlignment); cdecl;
    procedure setTextColor(textColor: UIColor); cdecl;
    procedure setUserInteractionEnabled(userInteractionEnabled: Boolean); cdecl;
    function shadowColor: UIColor; cdecl;
    function shadowOffset: CGSize; cdecl;
    function showsExpansionTextWhenTruncated: Boolean; cdecl;
    function text: NSString; cdecl;
    function textAlignment: NSTextAlignment; cdecl;
    function textColor: UIColor; cdecl;
    function textRectForBounds(bounds: CGRect; limitedToNumberOfLines: NSInteger): CGRect; cdecl;
  end;
  TUILabel = class(TOCGenericImport<UILabelClass, UILabel>) end;

  UILexiconEntryClass = interface(NSObjectClass)
    ['{12F08326-A45F-4FB1-8C4A-0A2428E5A55B}']
  end;

  UILexiconEntry = interface(NSObject)
    ['{02A979BB-7955-4AA1-B714-77A3D61B4371}']
    function documentText: NSString; cdecl;
    function userInput: NSString; cdecl;
  end;
  TUILexiconEntry = class(TOCGenericImport<UILexiconEntryClass, UILexiconEntry>) end;

  UILexiconClass = interface(NSObjectClass)
    ['{D88CE731-78DE-4712-8186-751DC43AAAF0}']
  end;

  UILexicon = interface(NSObject)
    ['{BF056956-D0BE-4313-BA82-0ABB858AC7DE}']
    function entries: NSArray; cdecl;
  end;
  TUILexicon = class(TOCGenericImport<UILexiconClass, UILexicon>) end;

  UIApplicationShortcutIconClass = interface(NSObjectClass)
    ['{94AC9203-0272-4D99-A5D3-9AC3A783A700}']
    {class} function iconWithSystemImageName(systemImageName: NSString): Pointer; cdecl;
    {class} function iconWithTemplateImageName(templateImageName: NSString): Pointer; cdecl;
    {class} function iconWithType(&type: UIApplicationShortcutIconType): Pointer; cdecl;
  end;

  UIApplicationShortcutIcon = interface(NSObject)
    ['{397B889A-370B-458F-B417-260A169E1FF3}']
  end;
  TUIApplicationShortcutIcon = class(TOCGenericImport<UIApplicationShortcutIconClass, UIApplicationShortcutIcon>) end;

  UIApplicationShortcutItemClass = interface(NSObjectClass)
    ['{90A6B8B1-9072-408C-AFFB-B9EC263290E9}']
  end;

  UIApplicationShortcutItem = interface(NSObject)
    ['{AEF3D28E-99CC-45D6-8A25-CE21B94483E0}']
    function &type: NSString; cdecl;
    function icon: UIApplicationShortcutIcon; cdecl;
    function initWithType(&type: NSString; localizedTitle: NSString; localizedSubtitle: NSString; icon: UIApplicationShortcutIcon;
      userInfo: NSDictionary): Pointer; overload; cdecl;
    function initWithType(&type: NSString; localizedTitle: NSString): Pointer; overload; cdecl;
    function localizedSubtitle: NSString; cdecl;
    function localizedTitle: NSString; cdecl;
    function targetContentIdentifier: Pointer; cdecl;
    function userInfo: NSDictionary; cdecl;
  end;
  TUIApplicationShortcutItem = class(TOCGenericImport<UIApplicationShortcutItemClass, UIApplicationShortcutItem>) end;

  UIMutableApplicationShortcutItemClass = interface(UIApplicationShortcutItemClass)
    ['{CB558922-C96B-4066-B16B-F75EF1099146}']
  end;

  UIMutableApplicationShortcutItem = interface(UIApplicationShortcutItem)
    ['{59FC5203-8A69-48DD-9D6D-922EA443FE25}']
    function &type: NSString; cdecl;
    function icon: UIApplicationShortcutIcon; cdecl;
    function localizedSubtitle: NSString; cdecl;
    function localizedTitle: NSString; cdecl;
    procedure setIcon(icon: UIApplicationShortcutIcon); cdecl;
    procedure setLocalizedSubtitle(localizedSubtitle: NSString); cdecl;
    procedure setLocalizedTitle(localizedTitle: NSString); cdecl;
    procedure setTargetContentIdentifier(targetContentIdentifier: Pointer); cdecl;
    procedure setType(&type: NSString); cdecl;
    procedure setUserInfo(userInfo: NSDictionary); cdecl;
    function targetContentIdentifier: Pointer; cdecl;
    function userInfo: NSDictionary; cdecl;
  end;
  TUIMutableApplicationShortcutItem = class(TOCGenericImport<UIMutableApplicationShortcutItemClass, UIMutableApplicationShortcutItem>) end;

  UIUserNotificationSettingsClass = interface(NSObjectClass)
    ['{905560DC-0AEB-4F15-8D6D-2819E59097B2}']
    {class} function settingsForTypes(types: UIUserNotificationType; categories: NSSet): Pointer; cdecl;
  end;

  UIUserNotificationSettings = interface(NSObject)
    ['{B84DA76A-A315-4354-849B-3A0930F32715}']
    function categories: NSSet; cdecl;
    function types: UIUserNotificationType; cdecl;
  end;
  TUIUserNotificationSettings = class(TOCGenericImport<UIUserNotificationSettingsClass, UIUserNotificationSettings>) end;

  UIUserNotificationCategoryClass = interface(NSObjectClass)
    ['{442680C9-F40C-41BB-AA61-33AD9F1D9711}']
  end;

  UIUserNotificationCategory = interface(NSObject)
    ['{E179517E-D634-429E-88DC-6907DBB6995B}']
    function actionsForContext(context: UIUserNotificationActionContext): NSArray; cdecl;
    function identifier: NSString; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
  end;
  TUIUserNotificationCategory = class(TOCGenericImport<UIUserNotificationCategoryClass, UIUserNotificationCategory>) end;

  UIMutableUserNotificationCategoryClass = interface(UIUserNotificationCategoryClass)
    ['{43D1713A-F087-4D1B-8289-3ED8F12417DB}']
  end;

  UIMutableUserNotificationCategory = interface(UIUserNotificationCategory)
    ['{AE0DFC4E-487B-4993-B6E9-E8D1A47828AF}']
    function identifier: NSString; cdecl;
    procedure setActions(actions: NSArray; forContext: UIUserNotificationActionContext); cdecl;
    procedure setIdentifier(identifier: NSString); cdecl;
  end;
  TUIMutableUserNotificationCategory = class(TOCGenericImport<UIMutableUserNotificationCategoryClass, UIMutableUserNotificationCategory>) end;

  UIUserNotificationActionClass = interface(NSObjectClass)
    ['{F08FF83E-0DBC-4A73-A439-D51E52095A59}']
  end;

  UIUserNotificationAction = interface(NSObject)
    ['{ADCC42AD-30DF-49D6-B3F4-29BCD78672BD}']
    function activationMode: UIUserNotificationActivationMode; cdecl;
    function behavior: UIUserNotificationActionBehavior; cdecl;
    function identifier: NSString; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function isAuthenticationRequired: Boolean; cdecl;
    function isDestructive: Boolean; cdecl;
    function parameters: NSDictionary; cdecl;
    function title: NSString; cdecl;
  end;
  TUIUserNotificationAction = class(TOCGenericImport<UIUserNotificationActionClass, UIUserNotificationAction>) end;

  UIMutableUserNotificationActionClass = interface(UIUserNotificationActionClass)
    ['{7C055CB1-8B3E-47B7-96B4-E4D02D8C3064}']
  end;

  UIMutableUserNotificationAction = interface(UIUserNotificationAction)
    ['{6C5F3585-5084-4166-989A-1252F18B5935}']
    function activationMode: UIUserNotificationActivationMode; cdecl;
    function behavior: UIUserNotificationActionBehavior; cdecl;
    function identifier: NSString; cdecl;
    function isAuthenticationRequired: Boolean; cdecl;
    function isDestructive: Boolean; cdecl;
    function parameters: NSDictionary; cdecl;
    procedure setActivationMode(activationMode: UIUserNotificationActivationMode); cdecl;
    procedure setAuthenticationRequired(authenticationRequired: Boolean); cdecl;
    procedure setBehavior(behavior: UIUserNotificationActionBehavior); cdecl;
    procedure setDestructive(destructive: Boolean); cdecl;
    procedure setIdentifier(identifier: NSString); cdecl;
    procedure setParameters(parameters: NSDictionary); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
  end;
  TUIMutableUserNotificationAction = class(TOCGenericImport<UIMutableUserNotificationActionClass, UIMutableUserNotificationAction>) end;

  UISceneConnectionOptionsClass = interface(NSObjectClass)
    ['{E34CE314-67BF-4ACB-80DE-8B835302B1D6}']
    {class} function new: Pointer; cdecl;
  end;

  UISceneConnectionOptions = interface(NSObject)
    ['{A007F981-AD90-43A9-B5B0-E280DAFFF7F5}']
    function cloudKitShareMetadata: CKShareMetadata; cdecl;
    function handoffUserActivityType: NSString; cdecl;
    function notificationResponse: UNNotificationResponse; cdecl;
    function shortcutItem: UIApplicationShortcutItem; cdecl;
    function sourceApplication: NSString; cdecl;
    function URLContexts: NSSet; cdecl;
    function userActivities: NSSet; cdecl;
  end;
  TUISceneConnectionOptions = class(TOCGenericImport<UISceneConnectionOptionsClass, UISceneConnectionOptions>) end;

  UISceneOpenURLOptionsClass = interface(NSObjectClass)
    ['{9DB0AE1C-8A66-4BB4-A739-E2E954F67FA1}']
    {class} function new: Pointer; cdecl;
  end;

  UISceneOpenURLOptions = interface(NSObject)
    ['{789F3089-0583-4426-BCE5-B9E5DE188AA0}']
    function annotation: Pointer; cdecl;
    function eventAttribution: UIEventAttribution; cdecl;
    function openInPlace: Boolean; cdecl;
    function sourceApplication: NSString; cdecl;
  end;
  TUISceneOpenURLOptions = class(TOCGenericImport<UISceneOpenURLOptionsClass, UISceneOpenURLOptions>) end;

  UISceneOpenExternalURLOptionsClass = interface(NSObjectClass)
    ['{F700E77D-940F-48D1-A3E3-CCDCCBF4F14A}']
  end;

  UISceneOpenExternalURLOptions = interface(NSObject)
    ['{DBC62966-DE51-4C36-9082-9C81AFA9F6A8}']
    function eventAttribution: UIEventAttribution; cdecl;
    procedure setEventAttribution(eventAttribution: UIEventAttribution); cdecl;
    procedure setUniversalLinksOnly(universalLinksOnly: Boolean); cdecl;
    function universalLinksOnly: Boolean; cdecl;
  end;
  TUISceneOpenExternalURLOptions = class(TOCGenericImport<UISceneOpenExternalURLOptionsClass, UISceneOpenExternalURLOptions>) end;

  UISceneActivationRequestOptionsClass = interface(NSObjectClass)
    ['{40DF5ECA-E927-42A6-B4F5-E0F8B5C7B724}']
  end;

  UISceneActivationRequestOptions = interface(NSObject)
    ['{B56E4AD3-8135-4FCB-8FAC-86390FC6C2FB}']
    function collectionJoinBehavior: UISceneCollectionJoinBehavior; cdecl;
    function requestingScene: UIScene; cdecl;
    procedure setCollectionJoinBehavior(collectionJoinBehavior: UISceneCollectionJoinBehavior); cdecl;
    procedure setRequestingScene(requestingScene: UIScene); cdecl;
  end;
  TUISceneActivationRequestOptions = class(TOCGenericImport<UISceneActivationRequestOptionsClass, UISceneActivationRequestOptions>) end;

  UISceneDestructionRequestOptionsClass = interface(NSObjectClass)
    ['{5610A1CA-2CBC-4685-A3D2-B7CECD85CD78}']
  end;

  UISceneDestructionRequestOptions = interface(NSObject)
    ['{9E27DA94-D20E-49F3-AB21-EEB437B3F833}']
  end;
  TUISceneDestructionRequestOptions = class(TOCGenericImport<UISceneDestructionRequestOptionsClass, UISceneDestructionRequestOptions>) end;

  UIWindowSceneClass = interface(UISceneClass)
    ['{326DE763-7A08-4A6B-A100-71F9B24E97D2}']
  end;

  UIWindowScene = interface(UIScene)
    ['{3B5A4B25-53F9-4C1E-8B4C-983181B3A01B}']
    function activityItemsConfigurationSource: Pointer; cdecl;
    function coordinateSpace: Pointer; cdecl;
    function effectiveGeometry: UIWindowSceneGeometry; cdecl;
    function focusSystem: UIFocusSystem; cdecl;
    function interfaceOrientation: UIInterfaceOrientation; cdecl;
    function isFullScreen: Boolean; cdecl;
    function keyWindow: UIWindow; cdecl;
    procedure requestGeometryUpdateWithPreferences(geometryPreferences: UIWindowSceneGeometryPreferences;
      errorHandler: TUIWindowSceneBlockMethod1); cdecl;
    function screen: UIScreen; cdecl;
    function screenshotService: UIScreenshotService; cdecl;
    procedure setActivityItemsConfigurationSource(activityItemsConfigurationSource: Pointer); cdecl;
    function sizeRestrictions: UISceneSizeRestrictions; cdecl;
    function statusBarManager: UIStatusBarManager; cdecl;
    function traitCollection: UITraitCollection; cdecl;
    function traitOverrides: Pointer; cdecl;
    function windowingBehaviors: UISceneWindowingBehaviors; cdecl;
    function windows: NSArray; cdecl;
  end;
  TUIWindowScene = class(TOCGenericImport<UIWindowSceneClass, UIWindowScene>) end;

  UIWindowSceneDelegate = interface(IObjectiveC)
    ['{3C7F6ECC-0BD1-484C-BA75-2A04705323B6}']
    procedure setWindow(window: UIWindow); cdecl;
    function window: UIWindow; cdecl;
    procedure windowScene(windowScene: UIWindowScene; userDidAcceptCloudKitShareWithMetadata: CKShareMetadata); overload; cdecl;
    procedure windowScene(windowScene: UIWindowScene; performActionForShortcutItem: UIApplicationShortcutItem;
      completionHandler: Pointer); overload; cdecl;
    procedure windowScene(windowScene: UIWindowScene; didUpdateCoordinateSpace: Pointer; interfaceOrientation: UIInterfaceOrientation;
      traitCollection: UITraitCollection); overload; cdecl;
  end;

  UIWindowSceneDestructionRequestOptionsClass = interface(UISceneDestructionRequestOptionsClass)
    ['{10862E6D-3D43-4CB8-B3CE-06837F5D00AD}']
  end;

  UIWindowSceneDestructionRequestOptions = interface(UISceneDestructionRequestOptions)
    ['{28ECD07C-DFC1-4E84-B179-E3D5B23DA642}']
    procedure setWindowDismissalAnimation(windowDismissalAnimation: UIWindowSceneDismissalAnimation); cdecl;
    function windowDismissalAnimation: UIWindowSceneDismissalAnimation; cdecl;
  end;
  TUIWindowSceneDestructionRequestOptions = class(TOCGenericImport<UIWindowSceneDestructionRequestOptionsClass, UIWindowSceneDestructionRequestOptions>) end;

  UISceneSizeRestrictionsClass = interface(NSObjectClass)
    ['{B90D9F6B-D90B-4DF4-B262-A5250046823C}']
    {class} function new: Pointer; cdecl;
  end;

  UISceneSizeRestrictions = interface(NSObject)
    ['{EC1B8ECA-7B4F-41D9-AC41-06690E847052}']
    function allowsFullScreen: Boolean; cdecl;
    function maximumSize: CGSize; cdecl;
    function minimumSize: CGSize; cdecl;
    procedure setAllowsFullScreen(allowsFullScreen: Boolean); cdecl;
    procedure setMaximumSize(maximumSize: CGSize); cdecl;
    procedure setMinimumSize(minimumSize: CGSize); cdecl;
  end;
  TUISceneSizeRestrictions = class(TOCGenericImport<UISceneSizeRestrictionsClass, UISceneSizeRestrictions>) end;

  UIFocusSystemClass = interface(NSObjectClass)
    ['{CE2D857B-25F3-46BC-BA21-B1A279B6B341}']
    {class} function environment(environment: Pointer; containsEnvironment: Pointer): Boolean; cdecl;
    {class} function focusSystemForEnvironment(environment: Pointer): UIFocusSystem; cdecl;
    {class} function new: Pointer; cdecl;
    {class} procedure registerURL(soundFileURL: NSURL; forSoundIdentifier: UIFocusSoundIdentifier); cdecl;
  end;

  UIFocusSystem = interface(NSObject)
    ['{A3F010AC-BC44-4C89-BC52-1C4DA55D15EB}']
    function focusedItem: Pointer; cdecl;
    procedure requestFocusUpdateToEnvironment(environment: Pointer); cdecl;
    procedure updateFocusIfNeeded; cdecl;
  end;
  TUIFocusSystem = class(TOCGenericImport<UIFocusSystemClass, UIFocusSystem>) end;

  UIFocusDebuggerClass = interface(NSObjectClass)
    ['{9AB724AB-7CB6-4E62-9E6E-A8007CD098F3}']
    {class} function checkFocusabilityForItem(item: Pointer): Pointer; cdecl;
    {class} function focusGroupsForEnvironment(environment: Pointer): Pointer; cdecl;
    {class} function help: Pointer; cdecl;
    {class} function preferredFocusEnvironmentsForEnvironment(environment: Pointer): Pointer; cdecl;
    {class} function simulateFocusUpdateRequestFromEnvironment(environment: Pointer): Pointer; cdecl;
    {class} function status: Pointer; cdecl;
  end;

  UIFocusDebugger = interface(NSObject)
    ['{83629559-E7EA-43DB-84CB-28B8A7E936ED}']
  end;
  TUIFocusDebugger = class(TOCGenericImport<UIFocusDebuggerClass, UIFocusDebugger>) end;

  UIFocusDebuggerOutput = interface(IObjectiveC)
    ['{CE04ABB3-CDD0-4CC3-AD72-B96E5C186F22}']
  end;

  UIFocusMovementHintClass = interface(NSObjectClass)
    ['{D0207A7D-CB7E-43D9-BFF1-342EC34B868A}']
    {class} function new: Pointer; cdecl;
  end;

  UIFocusMovementHint = interface(NSObject)
    ['{01BC5D9B-1EB1-4390-9E7D-49540F1116C4}']
    function interactionTransform: CATransform3D; cdecl;
    function movementDirection: CGVector; cdecl;
    function perspectiveTransform: CATransform3D; cdecl;
    function rotation: CGVector; cdecl;
    function translation: CGVector; cdecl;
  end;
  TUIFocusMovementHint = class(TOCGenericImport<UIFocusMovementHintClass, UIFocusMovementHint>) end;

  UIHoverEffect = interface(IObjectiveC)
    ['{507C6F67-3C82-489B-937E-5F63CA04EDCA}']
  end;

  UIHoverHighlightEffectClass = interface(NSObjectClass)
    ['{0CB00905-33CC-4C60-95EC-BA7E35CA8462}']
    {class} function effect: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIHoverHighlightEffect = interface(NSObject)
    ['{65E6744E-3C09-4992-AF02-3F1CB90483B3}']
  end;
  TUIHoverHighlightEffect = class(TOCGenericImport<UIHoverHighlightEffectClass, UIHoverHighlightEffect>) end;

  UIHoverLiftEffectClass = interface(NSObjectClass)
    ['{891306FD-0BBC-43C5-93F0-2A7A9261D5B9}']
    {class} function effect: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIHoverLiftEffect = interface(NSObject)
    ['{E76CD992-1730-4395-A011-55BE1C3ED504}']
  end;
  TUIHoverLiftEffect = class(TOCGenericImport<UIHoverLiftEffectClass, UIHoverLiftEffect>) end;

  UIHoverAutomaticEffectClass = interface(NSObjectClass)
    ['{074D2700-7E10-4A2E-8572-8C83C760A53F}']
    {class} function effect: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIHoverAutomaticEffect = interface(NSObject)
    ['{34FA0FAD-A080-4BB4-92B7-AAE04CEC8E19}']
  end;
  TUIHoverAutomaticEffect = class(TOCGenericImport<UIHoverAutomaticEffectClass, UIHoverAutomaticEffect>) end;

  UIHoverStyleClass = interface(NSObjectClass)
    ['{B1746CB8-5539-4D83-A7DF-CBEE99F04CB6}']
    {class} function automaticStyle: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
    {class} function styleWithEffect(effect: Pointer; shape: UIShape): Pointer; cdecl;
    {class} function styleWithShape(shape: UIShape): Pointer; cdecl;
  end;

  UIHoverStyle = interface(NSObject)
    ['{A7684CE2-BF6D-4A66-AF8D-769EB2B593D7}']
    function effect: Pointer; cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setEffect(effect: Pointer); cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    procedure setShape(shape: UIShape); cdecl;
    function shape: UIShape; cdecl;
  end;
  TUIHoverStyle = class(TOCGenericImport<UIHoverStyleClass, UIHoverStyle>) end;

  UIHoverEffectLayerClass = interface(CALayerClass)
    ['{BF5A1C52-27E1-4F17-B311-966E5F46D2AF}']
  end;

  UIHoverEffectLayer = interface(CALayer)
    ['{63EFDF3B-9429-4D19-BC45-CB0254391253}']
    function containerView: UIView; cdecl;
    function hoverStyle: UIHoverStyle; cdecl;
    function initWithContainerView(containerView: UIView; style: UIHoverStyle): Pointer; cdecl;
    procedure setContainerView(containerView: UIView); cdecl;
    procedure setHoverStyle(hoverStyle: UIHoverStyle); cdecl;
  end;
  TUIHoverEffectLayer = class(TOCGenericImport<UIHoverEffectLayerClass, UIHoverEffectLayer>) end;

  UIShapeProvider = interface(IObjectiveC)
    ['{B9C5732B-137A-4166-A441-DCDF8963EF49}']
    function resolvedShapeInContext(context: UIShapeResolutionContext): UIResolvedShape; cdecl;
  end;

  UIShapeClass = interface(NSObjectClass)
    ['{12B8CC57-DA14-48D4-B85E-1DAE30316227}']
    {class} function capsuleShape: UIShape; cdecl;
    {class} function circleShape: UIShape; cdecl;
    {class} function fixedRectShapeWithRect(rect: CGRect; cornerRadius: CGFloat): Pointer; overload; cdecl;
    {class} function fixedRectShapeWithRect(rect: CGRect; cornerRadius: CGFloat; cornerCurve: UICornerCurve;
      maskedCorners: UIRectCorner): Pointer; overload; cdecl;
    {class} function fixedRectShapeWithRect(rect: CGRect): Pointer; overload; cdecl;
    {class} function new: Pointer; cdecl;
    {class} function rectShape: UIShape; cdecl;
    {class} function rectShapeWithCornerRadius(cornerRadius: CGFloat; cornerCurve: UICornerCurve): Pointer; overload; cdecl;
    {class} function rectShapeWithCornerRadius(cornerRadius: CGFloat): Pointer; overload; cdecl;
    {class} function rectShapeWithCornerRadius(cornerRadius: CGFloat; cornerCurve: UICornerCurve;
      maskedCorners: UIRectCorner): Pointer; overload; cdecl;
    {class} function shapeWithBezierPath(path: UIBezierPath): Pointer; cdecl;
    {class} function shapeWithProvider(provider: Pointer): Pointer; cdecl;
  end;

  UIShape = interface(NSObject)
    ['{2516A307-9F0E-4244-8012-A5B75C9CE8E6}']
    function resolvedShapeInContext(context: UIShapeResolutionContext): UIResolvedShape; cdecl;
    function shapeByApplyingInset(inset: CGFloat): UIShape; cdecl;
    function shapeByApplyingInsets(insets: UIEdgeInsets): UIShape; cdecl;
  end;
  TUIShape = class(TOCGenericImport<UIShapeClass, UIShape>) end;

  UIResolvedShapeClass = interface(NSObjectClass)
    ['{1B7FD9B6-7592-4084-B4C6-4C042861945F}']
    {class} function new: Pointer; cdecl;
  end;

  UIResolvedShape = interface(NSObject)
    ['{58816DC5-F0EB-4528-9DA8-E0D1D50E9784}']
    function boundingRect: CGRect; cdecl;
    function path: UIBezierPath; cdecl;
    function shape: UIShape; cdecl;
    function shapeByApplyingInset(inset: CGFloat): UIResolvedShape; cdecl;
    function shapeByApplyingInsets(insets: UIEdgeInsets): UIResolvedShape; cdecl;
  end;
  TUIResolvedShape = class(TOCGenericImport<UIResolvedShapeClass, UIResolvedShape>) end;

  UIShapeResolutionContextClass = interface(NSObjectClass)
    ['{B444D364-55C2-4829-865F-42C8A3F55FA0}']
    {class} function new: Pointer; cdecl;
  end;

  UIShapeResolutionContext = interface(NSObject)
    ['{4C132B59-4351-44E6-8D1F-B58639D9794F}']
    function contentShape: UIResolvedShape; cdecl;
  end;
  TUIShapeResolutionContext = class(TOCGenericImport<UIShapeResolutionContextClass, UIShapeResolutionContext>) end;

  UIHoverGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{727E6B16-BD89-4E68-8B1B-1334316E6E3B}']
  end;

  UIHoverGestureRecognizer = interface(UIGestureRecognizer)
    ['{20850220-B7BC-4FFB-B173-A5C8414D0869}']
    function altitudeAngle: CGFloat; cdecl;
    function azimuthAngleInView(view: UIView): CGFloat; cdecl;
    function azimuthUnitVectorInView(view: UIView): CGVector; cdecl;
    function rollAngle: CGFloat; cdecl;
    function zOffset: CGFloat; cdecl;
  end;
  TUIHoverGestureRecognizer = class(TOCGenericImport<UIHoverGestureRecognizerClass, UIHoverGestureRecognizer>) end;

  UILocalizedIndexedCollationClass = interface(NSObjectClass)
    ['{165DA2D8-2D60-443F-9B15-8BC50061E025}']
    {class} function currentCollation: Pointer; cdecl;
  end;

  UILocalizedIndexedCollation = interface(NSObject)
    ['{817B5049-5B09-466B-86FE-955656E194E1}']
    function sectionForObject(&object: Pointer; collationStringSelector: SEL): NSInteger; cdecl;
    function sectionForSectionIndexTitleAtIndex(indexTitleIndex: NSInteger): NSInteger; cdecl;
    function sectionIndexTitles: NSArray; cdecl;
    function sectionTitles: NSArray; cdecl;
    function sortedArrayFromArray(&array: NSArray; collationStringSelector: SEL): NSArray; cdecl;
  end;
  TUILocalizedIndexedCollation = class(TOCGenericImport<UILocalizedIndexedCollationClass, UILocalizedIndexedCollation>) end;

  UILongPressGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{05D8C9FD-804E-4E1F-BB5A-4487C3B8EBB4}']
  end;

  UILongPressGestureRecognizer = interface(UIGestureRecognizer)
    ['{BB14AD06-395A-4EA5-991C-CFE93D2AFB8C}']
    function allowableMovement: CGFloat; cdecl;
    function minimumPressDuration: NSTimeInterval; cdecl;
    function numberOfTapsRequired: NSUInteger; cdecl;
    function numberOfTouchesRequired: NSUInteger; cdecl;
    procedure setAllowableMovement(allowableMovement: CGFloat); cdecl;
    procedure setMinimumPressDuration(minimumPressDuration: NSTimeInterval); cdecl;
    procedure setNumberOfTapsRequired(numberOfTapsRequired: NSUInteger); cdecl;
    procedure setNumberOfTouchesRequired(numberOfTouchesRequired: NSUInteger); cdecl;
  end;
  TUILongPressGestureRecognizer = class(TOCGenericImport<UILongPressGestureRecognizerClass, UILongPressGestureRecognizer>) end;

  UIManagedDocumentClass = interface(UIDocumentClass)
    ['{0AD8CA53-3696-4357-B0E7-44EB8DFBDF15}']
    {class} function persistentStoreName: NSString; cdecl;
  end;

  UIManagedDocument = interface(UIDocument)
    ['{2327F682-7620-4D79-A978-98D0B68FA35F}']
    function additionalContentForURL(absoluteURL: NSURL; error: PPointer): Pointer; cdecl;
    function configurePersistentStoreCoordinatorForURL(storeURL: NSURL; ofType: NSString; modelConfiguration: NSString; storeOptions: NSDictionary;
      error: PPointer): Boolean; cdecl;
    function managedObjectContext: NSManagedObjectContext; cdecl;
    function managedObjectModel: NSManagedObjectModel; cdecl;
    function modelConfiguration: NSString; cdecl;
    function persistentStoreOptions: NSDictionary; cdecl;
    function persistentStoreTypeForFileType(fileType: NSString): NSString; cdecl;
    function readAdditionalContentFromURL(absoluteURL: NSURL; error: PPointer): Boolean; cdecl;
    procedure setModelConfiguration(modelConfiguration: NSString); cdecl;
    procedure setPersistentStoreOptions(persistentStoreOptions: NSDictionary); cdecl;
    function writeAdditionalContent(content: Pointer; toURL: NSURL; originalContentsURL: NSURL; error: PPointer): Boolean; cdecl;
  end;
  TUIManagedDocument = class(TOCGenericImport<UIManagedDocumentClass, UIManagedDocument>) end;

  UIMenuControllerClass = interface(NSObjectClass)
    ['{31E70396-6FF8-47A1-9E11-23FD63109C83}']
    {class} function sharedMenuController: UIMenuController; cdecl;
  end;

  UIMenuController = interface(NSObject)
    ['{71014399-DFAA-4F04-960A-61F9C568E6CB}']
    function arrowDirection: UIMenuControllerArrowDirection; cdecl;
    procedure hideMenu; cdecl;
    procedure hideMenuFromView(targetView: UIView); cdecl;
    function isMenuVisible: Boolean; cdecl;
    function menuFrame: CGRect; cdecl;
    function menuItems: NSArray; cdecl;
    procedure setArrowDirection(arrowDirection: UIMenuControllerArrowDirection); cdecl;
    procedure setMenuItems(menuItems: NSArray); cdecl;
    procedure setMenuVisible(menuVisible: Boolean); overload; cdecl; // API_DEPRECATED("Use showMenuFromView:rect: or hideMenuFromView: instead.", ios(3.0, 13.0))
    procedure setMenuVisible(menuVisible: Boolean; animated: Boolean); overload; cdecl; // API_DEPRECATED("Use showMenuFromView:rect: or hideMenuFromView: instead.", ios(3.0, 13.0))
    procedure setTargetRect(targetRect: CGRect; inView: UIView); cdecl; // API_DEPRECATED("Use showMenuFromView:rect: instead.", ios(3.0, 13.0))
    procedure showMenuFromView(targetView: UIView; rect: CGRect); cdecl;
    procedure update; cdecl;
  end;
  TUIMenuController = class(TOCGenericImport<UIMenuControllerClass, UIMenuController>) end;

  UIMenuItemClass = interface(NSObjectClass)
    ['{0D6F2E45-DE6C-4470-B68B-19EE46118501}']
  end;

  UIMenuItem = interface(NSObject)
    ['{944DDB52-123F-435E-B838-31DEE4F7A05F}']
    function action: SEL; cdecl;
    function initWithTitle(title: NSString; action: SEL): Pointer; cdecl;
    procedure setAction(action: SEL); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
  end;
  TUIMenuItem = class(TOCGenericImport<UIMenuItemClass, UIMenuItem>) end;

  UIMotionEffectClass = interface(NSObjectClass)
    ['{7E4DA4DF-166E-439B-98C3-9A7721D47EB1}']
  end;

  UIMotionEffect = interface(NSObject)
    ['{E8684F42-F124-40E8-8E7F-E361706BDBC2}']
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function keyPathsAndRelativeValuesForViewerOffset(viewerOffset: UIOffset): NSDictionary; cdecl;
  end;
  TUIMotionEffect = class(TOCGenericImport<UIMotionEffectClass, UIMotionEffect>) end;

  UIInterpolatingMotionEffectClass = interface(UIMotionEffectClass)
    ['{69936424-776D-41E4-B73F-8F90AC08F4DB}']
  end;

  UIInterpolatingMotionEffect = interface(UIMotionEffect)
    ['{009E5E16-4994-4BEB-AE5E-24FD84059AF8}']
    function &type: UIInterpolatingMotionEffectType; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithKeyPath(keyPath: NSString; &type: UIInterpolatingMotionEffectType): Pointer; cdecl;
    function keyPath: NSString; cdecl;
    function maximumRelativeValue: Pointer; cdecl;
    function minimumRelativeValue: Pointer; cdecl;
    procedure setMaximumRelativeValue(maximumRelativeValue: Pointer); cdecl;
    procedure setMinimumRelativeValue(minimumRelativeValue: Pointer); cdecl;
  end;
  TUIInterpolatingMotionEffect = class(TOCGenericImport<UIInterpolatingMotionEffectClass, UIInterpolatingMotionEffect>) end;

  UIMotionEffectGroupClass = interface(UIMotionEffectClass)
    ['{345EA246-3EFF-41EB-8C14-5FD028E0EE0E}']
  end;

  UIMotionEffectGroup = interface(UIMotionEffect)
    ['{31ACDDA6-F515-4E2A-89B8-FFE964797A1E}']
    function motionEffects: NSArray; cdecl;
    procedure setMotionEffects(motionEffects: NSArray); cdecl;
  end;
  TUIMotionEffectGroup = class(TOCGenericImport<UIMotionEffectGroupClass, UIMotionEffectGroup>) end;

  UISliderClass = interface(UIControlClass)
    ['{C61321DF-5D90-410A-A0B4-0B9A4DAB59C1}']
  end;

  UISlider = interface(UIControl)
    ['{01D2458D-F6B0-4184-8B21-C21612AE70AE}']
    function behavioralStyle: UIBehavioralStyle; cdecl;
    function currentMaximumTrackImage: UIImage; cdecl;
    function currentMinimumTrackImage: UIImage; cdecl;
    function currentThumbImage: UIImage; cdecl;
    function isContinuous: Boolean; cdecl;
    function maximumTrackImageForState(state: UIControlState): UIImage; cdecl;
    function maximumTrackTintColor: UIColor; cdecl;
    function maximumValue: Single; cdecl;
    function maximumValueImage: UIImage; cdecl;
    function maximumValueImageRectForBounds(bounds: CGRect): CGRect; cdecl;
    function minimumTrackImageForState(state: UIControlState): UIImage; cdecl;
    function minimumTrackTintColor: UIColor; cdecl;
    function minimumValue: Single; cdecl;
    function minimumValueImage: UIImage; cdecl;
    function minimumValueImageRectForBounds(bounds: CGRect): CGRect; cdecl;
    function preferredBehavioralStyle: UIBehavioralStyle; cdecl;
    procedure setContinuous(continuous: Boolean); cdecl;
    procedure setMaximumTrackImage(image: UIImage; forState: UIControlState); cdecl;
    procedure setMaximumTrackTintColor(maximumTrackTintColor: UIColor); cdecl;
    procedure setMaximumValue(maximumValue: Single); cdecl;
    procedure setMaximumValueImage(maximumValueImage: UIImage); cdecl;
    procedure setMinimumTrackImage(image: UIImage; forState: UIControlState); cdecl;
    procedure setMinimumTrackTintColor(minimumTrackTintColor: UIColor); cdecl;
    procedure setMinimumValue(minimumValue: Single); cdecl;
    procedure setMinimumValueImage(minimumValueImage: UIImage); cdecl;
    procedure setPreferredBehavioralStyle(preferredBehavioralStyle: UIBehavioralStyle); cdecl;
    procedure setThumbImage(image: UIImage; forState: UIControlState); cdecl;
    procedure setThumbTintColor(thumbTintColor: UIColor); cdecl;
    procedure setValue(value: Single; animated: Boolean); overload; cdecl;
    procedure setValue(value: Single); overload; cdecl;
    function thumbImageForState(state: UIControlState): UIImage; cdecl;
    function thumbRectForBounds(bounds: CGRect; trackRect: CGRect; value: Single): CGRect; cdecl;
    function thumbTintColor: UIColor; cdecl;
    function trackRectForBounds(bounds: CGRect): CGRect; cdecl;
    function value: Single; cdecl;
  end;
  TUISlider = class(TOCGenericImport<UISliderClass, UISlider>) end;

  UINavigationBarClass = interface(UIViewClass)
    ['{8830647E-C61F-44BA-B6E6-2A10A61B5267}']
  end;

  UINavigationBar = interface(UIView)
    ['{39B44C25-1474-4D96-A018-1BEA668E0F22}']
    function backgroundImageForBarMetrics(barMetrics: UIBarMetrics): UIImage; cdecl;
    function backgroundImageForBarPosition(barPosition: UIBarPosition; barMetrics: UIBarMetrics): UIImage; cdecl;
    function backIndicatorImage: UIImage; cdecl;
    function backIndicatorTransitionMaskImage: UIImage; cdecl;
    function backItem: UINavigationItem; cdecl;
    function barStyle: UIBarStyle; cdecl;
    function barTintColor: UIColor; cdecl;
    function behavioralStyle: UIBehavioralStyle; cdecl;
    function compactAppearance: UINavigationBarAppearance; cdecl;
    function compactScrollEdgeAppearance: UINavigationBarAppearance; cdecl;
    function currentNSToolbarSection: UINavigationBarNSToolbarSection; cdecl;
    function delegate: Pointer; cdecl;
    function isTranslucent: Boolean; cdecl;
    function items: NSArray; cdecl;
    function largeTitleTextAttributes: NSDictionary; cdecl;
    function popNavigationItemAnimated(animated: Boolean): UINavigationItem; cdecl;
    function preferredBehavioralStyle: UIBehavioralStyle; cdecl;
    function prefersLargeTitles: Boolean; cdecl;
    procedure pushNavigationItem(item: UINavigationItem; animated: Boolean); cdecl;
    function scrollEdgeAppearance: UINavigationBarAppearance; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage; forBarPosition: UIBarPosition; barMetrics: UIBarMetrics); overload; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage; forBarMetrics: UIBarMetrics); overload; cdecl;
    procedure setBackIndicatorImage(backIndicatorImage: UIImage); cdecl;
    procedure setBackIndicatorTransitionMaskImage(backIndicatorTransitionMaskImage: UIImage); cdecl;
    procedure setBarStyle(barStyle: UIBarStyle); cdecl;
    procedure setBarTintColor(barTintColor: UIColor); cdecl;
    procedure setCompactAppearance(compactAppearance: UINavigationBarAppearance); cdecl;
    procedure setCompactScrollEdgeAppearance(compactScrollEdgeAppearance: UINavigationBarAppearance); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setItems(items: NSArray); overload; cdecl;
    procedure setItems(items: NSArray; animated: Boolean); overload; cdecl;
    procedure setLargeTitleTextAttributes(largeTitleTextAttributes: NSDictionary); cdecl;
    procedure setPreferredBehavioralStyle(preferredBehavioralStyle: UIBehavioralStyle); cdecl;
    procedure setPrefersLargeTitles(prefersLargeTitles: Boolean); cdecl;
    procedure setScrollEdgeAppearance(scrollEdgeAppearance: UINavigationBarAppearance); cdecl;
    procedure setShadowImage(shadowImage: UIImage); cdecl;
    procedure setStandardAppearance(standardAppearance: UINavigationBarAppearance); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    procedure setTitleTextAttributes(titleTextAttributes: NSDictionary); cdecl;
    procedure setTitleVerticalPositionAdjustment(adjustment: CGFloat; forBarMetrics: UIBarMetrics); cdecl;
    procedure setTranslucent(translucent: Boolean); cdecl;
    function shadowImage: UIImage; cdecl;
    function standardAppearance: UINavigationBarAppearance; cdecl;
    function tintColor: UIColor; cdecl;
    function titleTextAttributes: NSDictionary; cdecl;
    function titleVerticalPositionAdjustmentForBarMetrics(barMetrics: UIBarMetrics): CGFloat; cdecl;
    function topItem: UINavigationItem; cdecl;
  end;
  TUINavigationBar = class(TOCGenericImport<UINavigationBarClass, UINavigationBar>) end;

  UINavigationBarDelegate = interface(IObjectiveC)
    ['{238CC62E-0500-4F5E-AFC8-CEEBF57D279B}']
    function navigationBar(navigationBar: UINavigationBar; shouldPushItem: UINavigationItem): Boolean; cdecl;
    [MethodName('navigationBar:didPopItem:')]
    procedure navigationBarDidPopItem(navigationBar: UINavigationBar; didPopItem: UINavigationItem); cdecl;
    [MethodName('navigationBar:didPushItem:')]
    procedure navigationBarDidPushItem(navigationBar: UINavigationBar; didPushItem: UINavigationItem); cdecl;
    function navigationBarNSToolbarSection(navigationBar: UINavigationBar): UINavigationBarNSToolbarSection; cdecl;
    [MethodName('navigationBar:shouldPopItem:')]
    function navigationBarShouldPopItem(navigationBar: UINavigationBar; shouldPopItem: UINavigationItem): Boolean; cdecl;
  end;

  UINibClass = interface(NSObjectClass)
    ['{CFB6C9EC-DB81-4CA7-8721-E9C9A43840E3}']
    {class} function nibWithData(data: NSData; bundle: NSBundle): UINib; cdecl;
    {class} function nibWithNibName(name: NSString; bundle: NSBundle): UINib; cdecl;
  end;

  UINib = interface(NSObject)
    ['{A39FF415-A15B-485B-942A-F4B8375D7FF8}']
    function instantiateWithOwner(ownerOrNil: Pointer; options: NSDictionary): NSArray; cdecl;
  end;
  TUINib = class(TOCGenericImport<UINibClass, UINib>) end;

  UIPageControlProgressDelegate = interface(IObjectiveC)
    ['{655BAECD-DAFB-4E07-B26C-7D9C626FC94E}']
    function pageControlProgress(progress: UIPageControlProgress; initialProgressForPage: NSInteger): Single; cdecl;
    procedure pageControlProgressVisibilityDidChange(progress: UIPageControlProgress); cdecl;
  end;

  UIPageControlProgressClass = interface(NSObjectClass)
    ['{B0D89038-B11A-4589-9292-A5D95F7524E8}']
  end;

  UIPageControlProgress = interface(NSObject)
    ['{1E00B346-6D58-4055-BFE8-897646C27FB3}']
    function currentProgress: Single; cdecl;
    function delegate: Pointer; cdecl;
    function isProgressVisible: Boolean; cdecl;
    procedure setCurrentProgress(currentProgress: Single); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
  end;
  TUIPageControlProgress = class(TOCGenericImport<UIPageControlProgressClass, UIPageControlProgress>) end;

  UIPageControlTimerProgressDelegate = interface(IObjectiveC)
    ['{6CF83B74-5AE3-4029-A0D0-647F0E285EE8}']
    function pageControlTimerProgress(progress: UIPageControlTimerProgress; shouldAdvanceToPage: NSInteger): Boolean; cdecl;
    procedure pageControlTimerProgressDidChange(progress: UIPageControlTimerProgress); cdecl;
  end;

  UIPageControlTimerProgressClass = interface(UIPageControlProgressClass)
    ['{CE670C4B-29FA-4625-BA60-E1184C45EF3F}']
    {class} function new: Pointer; cdecl;
  end;

  UIPageControlTimerProgress = interface(UIPageControlProgress)
    ['{13E42E46-2FFC-4453-8AF1-53F8E9F8101B}']
    function delegate: Pointer; cdecl;
    function durationForPage(page: NSInteger): NSTimeInterval; cdecl;
    function initWithPreferredDuration(preferredDuration: NSTimeInterval): Pointer; cdecl;
    function isRunning: Boolean; cdecl;
    procedure pauseTimer; cdecl;
    function preferredDuration: NSTimeInterval; cdecl;
    function resetsToInitialPageAfterEnd: Boolean; cdecl;
    procedure resumeTimer; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDuration(duration: NSTimeInterval; forPage: NSInteger); cdecl;
    procedure setPreferredDuration(preferredDuration: NSTimeInterval); cdecl;
    procedure setResetsToInitialPageAfterEnd(resetsToInitialPageAfterEnd: Boolean); cdecl;
  end;
  TUIPageControlTimerProgress = class(TOCGenericImport<UIPageControlTimerProgressClass, UIPageControlTimerProgress>) end;

  UIPageControlClass = interface(UIControlClass)
    ['{8512A3BB-C49C-458B-B430-C33865723339}']
  end;

  UIPageControl = interface(UIControl)
    ['{9CF6066A-1ECC-4EB9-86DA-BB32E47F17CA}']
    function allowsContinuousInteraction: Boolean; cdecl;
    function backgroundStyle: UIPageControlBackgroundStyle; cdecl;
    function currentPage: NSInteger; cdecl;
    function currentPageIndicatorImageForPage(page: NSInteger): UIImage; cdecl;
    function currentPageIndicatorTintColor: UIColor; cdecl;
    function defersCurrentPageDisplay: Boolean; cdecl; // API_DEPRECATED("defersCurrentPageDisplay no longer does anything reasonable with the new interaction mode.", ios(2.0, 14.0), visionos(1.0, 1.0))
    function direction: UIPageControlDirection; cdecl;
    function hidesForSinglePage: Boolean; cdecl;
    function indicatorImageForPage(page: NSInteger): UIImage; cdecl;
    function interactionState: UIPageControlInteractionState; cdecl;
    function numberOfPages: NSInteger; cdecl;
    function pageIndicatorTintColor: UIColor; cdecl;
    function preferredCurrentPageIndicatorImage: UIImage; cdecl;
    function preferredIndicatorImage: UIImage; cdecl;
    function progress: UIPageControlProgress; cdecl;
    procedure setAllowsContinuousInteraction(allowsContinuousInteraction: Boolean); cdecl;
    procedure setBackgroundStyle(backgroundStyle: UIPageControlBackgroundStyle); cdecl;
    procedure setCurrentPage(currentPage: NSInteger); cdecl;
    procedure setCurrentPageIndicatorImage(image: UIImage; forPage: NSInteger); cdecl;
    procedure setCurrentPageIndicatorTintColor(currentPageIndicatorTintColor: UIColor); cdecl;
    procedure setDefersCurrentPageDisplay(defersCurrentPageDisplay: Boolean); cdecl; // API_DEPRECATED("defersCurrentPageDisplay no longer does anything reasonable with the new interaction mode.", ios(2.0, 14.0), visionos(1.0, 1.0))
    procedure setDirection(direction: UIPageControlDirection); cdecl;
    procedure setHidesForSinglePage(hidesForSinglePage: Boolean); cdecl;
    procedure setIndicatorImage(image: UIImage; forPage: NSInteger); cdecl;
    procedure setNumberOfPages(numberOfPages: NSInteger); cdecl;
    procedure setPageIndicatorTintColor(pageIndicatorTintColor: UIColor); cdecl;
    procedure setPreferredCurrentPageIndicatorImage(preferredCurrentPageIndicatorImage: UIImage); cdecl;
    procedure setPreferredIndicatorImage(preferredIndicatorImage: UIImage); cdecl;
    procedure setProgress(progress: UIPageControlProgress); cdecl;
    function sizeForNumberOfPages(pageCount: NSInteger): CGSize; cdecl;
    procedure updateCurrentPageDisplay; cdecl; // API_DEPRECATED("updateCurrentPageDisplay no longer does anything reasonable with the new interaction mode.", ios(2.0, 14.0), visionos(1.0, 1.0))
  end;
  TUIPageControl = class(TOCGenericImport<UIPageControlClass, UIPageControl>) end;

  UIPageViewControllerClass = interface(UIViewControllerClass)
    ['{0B1B5C31-3C10-4D58-A59E-E7A63EF4A2A3}']
  end;

  UIPageViewController = interface(UIViewController)
    ['{6288D184-BFD3-4646-AED2-138E7D8DE323}']
    function dataSource: Pointer; cdecl;
    function delegate: Pointer; cdecl;
    function gestureRecognizers: NSArray; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithTransitionStyle(style: UIPageViewControllerTransitionStyle; navigationOrientation: UIPageViewControllerNavigationOrientation;
      options: NSDictionary): Pointer; cdecl;
    function isDoubleSided: Boolean; cdecl;
    function navigationOrientation: UIPageViewControllerNavigationOrientation; cdecl;
    procedure setDataSource(dataSource: Pointer); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDoubleSided(doubleSided: Boolean); cdecl;
    procedure setViewControllers(viewControllers: NSArray; direction: UIPageViewControllerNavigationDirection; animated: Boolean;
      completion: TUIPageViewControllerBlockMethod1); cdecl;
    function spineLocation: UIPageViewControllerSpineLocation; cdecl;
    function transitionStyle: UIPageViewControllerTransitionStyle; cdecl;
    function viewControllers: NSArray; cdecl;
  end;
  TUIPageViewController = class(TOCGenericImport<UIPageViewControllerClass, UIPageViewController>) end;

  UIPageViewControllerDelegate = interface(IObjectiveC)
    ['{FB64EF32-0BE1-4EF1-A8CB-41115772446F}']
    function pageViewController(pageViewController: UIPageViewController;
      spineLocationForInterfaceOrientation: UIInterfaceOrientation): UIPageViewControllerSpineLocation; overload; cdecl;
    procedure pageViewController(pageViewController: UIPageViewController; didFinishAnimating: Boolean; previousViewControllers: NSArray;
      transitionCompleted: Boolean); overload; cdecl;
    procedure pageViewController(pageViewController: UIPageViewController; willTransitionToViewControllers: NSArray); overload; cdecl;
    function pageViewControllerPreferredInterfaceOrientationForPresentation(pageViewController: UIPageViewController): UIInterfaceOrientation; cdecl;
    function pageViewControllerSupportedInterfaceOrientations(pageViewController: UIPageViewController): UIInterfaceOrientationMask; cdecl;
  end;

  UIPageViewControllerDataSource = interface(IObjectiveC)
    ['{A60CA8CC-0BFB-459F-84D3-E22F5DFEDA6F}']
    function pageViewController(pageViewController: UIPageViewController;
      viewControllerBeforeViewController: UIViewController): UIViewController; cdecl;
    [MethodName('pageViewController:viewControllerAfterViewController:')]
    function pageViewControllerViewControllerAfterViewController(pageViewController: UIPageViewController;
      viewControllerAfterViewController: UIViewController): UIViewController; cdecl;
    function presentationCountForPageViewController(pageViewController: UIPageViewController): NSInteger; cdecl;
    function presentationIndexForPageViewController(pageViewController: UIPageViewController): NSInteger; cdecl;
  end;

  UIPasteboardClass = interface(NSObjectClass)
    ['{E0BACD7F-988B-470A-AAAA-4CFC36C514C3}']
    {class} function generalPasteboard: UIPasteboard; cdecl;
    {class} function pasteboardWithName(pasteboardName: UIPasteboardName; create: Boolean): UIPasteboard; cdecl;
    {class} function pasteboardWithUniqueName: UIPasteboard; cdecl;
    {class} procedure removePasteboardWithName(pasteboardName: UIPasteboardName); cdecl;
  end;

  UIPasteboard = interface(NSObject)
    ['{DFF1007B-64D4-412F-AE16-19EF8FEE91B8}']
    function &string: NSString; cdecl;
    procedure addItems(items: NSArray); cdecl;
    function changeCount: NSInteger; cdecl;
    function color: UIColor; cdecl;
    function colors: NSArray; cdecl;
    function containsPasteboardTypes(pasteboardTypes: NSArray; inItemSet: NSIndexSet): Boolean; overload; cdecl;
    function containsPasteboardTypes(pasteboardTypes: NSArray): Boolean; overload; cdecl;
    function dataForPasteboardType(pasteboardType: NSString): NSData; overload; cdecl;
    function dataForPasteboardType(pasteboardType: NSString; inItemSet: NSIndexSet): NSArray; overload; cdecl;
    procedure detectPatternsForPatterns(patterns: NSSet; completionHandler: TUIPasteboardBlockMethod1); overload; cdecl;
    procedure detectPatternsForPatterns(patterns: NSSet; inItemSet: NSIndexSet; completionHandler: TUIPasteboardBlockMethod2); overload; cdecl;
    procedure detectValuesForPatterns(patterns: NSSet; completionHandler: TUIPasteboardBlockMethod3); overload; cdecl;
    procedure detectValuesForPatterns(patterns: NSSet; inItemSet: NSIndexSet; completionHandler: TUIPasteboardBlockMethod2); overload; cdecl;
    function hasColors: Boolean; cdecl;
    function hasImages: Boolean; cdecl;
    function hasStrings: Boolean; cdecl;
    function hasURLs: Boolean; cdecl;
    function image: UIImage; cdecl;
    function images: NSArray; cdecl;
    function isPersistent: Boolean; cdecl;
    function itemProviders: NSArray; cdecl;
    function items: NSArray; cdecl;
    function itemSetWithPasteboardTypes(pasteboardTypes: NSArray): NSIndexSet; cdecl;
    function name: UIPasteboardName; cdecl;
    function numberOfItems: NSInteger; cdecl;
    function pasteboardTypes: NSArray; cdecl;
    function pasteboardTypesForItemSet(itemSet: NSIndexSet): NSArray; cdecl;
    procedure setColor(color: UIColor); cdecl;
    procedure setColors(colors: NSArray); cdecl;
    procedure setData(data: NSData; forPasteboardType: NSString); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setImages(images: NSArray); cdecl;
    procedure setItemProviders(itemProviders: NSArray; localOnly: Boolean; expirationDate: NSDate); overload; cdecl;
    procedure setItemProviders(itemProviders: NSArray); overload; cdecl;
    procedure setItems(items: NSArray; options: NSDictionary); overload; cdecl;
    procedure setItems(items: NSArray); overload; cdecl;
    procedure setObjects(objects: NSArray; localOnly: Boolean; expirationDate: NSDate); overload; cdecl;
    procedure setObjects(objects: NSArray); overload; cdecl;
    procedure setPersistent(persistent: Boolean); cdecl; // API_DEPRECATED("Do not set persistence on pasteboards. This property is set automatically.", ios(3.0, 10.0))
    procedure setString(&string: NSString); cdecl;
    procedure setStrings(strings: NSArray); cdecl;
    procedure setURL(URL: NSURL); cdecl;
    procedure setURLs(URLs: NSArray); cdecl;
    procedure setValue(value: Pointer; forPasteboardType: NSString); cdecl;
    function strings: NSArray; cdecl;
    function URL: NSURL; cdecl;
    function URLs: NSArray; cdecl;
    function valueForPasteboardType(pasteboardType: NSString): Pointer; cdecl;
    function valuesForPasteboardType(pasteboardType: NSString; inItemSet: NSIndexSet): NSArray; cdecl;
  end;
  TUIPasteboard = class(TOCGenericImport<UIPasteboardClass, UIPasteboard>) end;

  UIPasteControlConfigurationClass = interface(NSObjectClass)
    ['{DB981BD2-00DB-4EC2-8A7C-6ADAF71D3AC3}']
  end;

  UIPasteControlConfiguration = interface(NSObject)
    ['{FEB2623A-FEF3-4BFA-B7D1-F9448628CDCE}']
    function baseBackgroundColor: UIColor; cdecl;
    function baseForegroundColor: UIColor; cdecl;
    function cornerRadius: CGFloat; cdecl;
    function cornerStyle: UIButtonConfigurationCornerStyle; cdecl;
    function displayMode: UIPasteControlDisplayMode; cdecl;
    procedure setBaseBackgroundColor(baseBackgroundColor: UIColor); cdecl;
    procedure setBaseForegroundColor(baseForegroundColor: UIColor); cdecl;
    procedure setCornerRadius(cornerRadius: CGFloat); cdecl;
    procedure setCornerStyle(cornerStyle: UIButtonConfigurationCornerStyle); cdecl;
    procedure setDisplayMode(displayMode: UIPasteControlDisplayMode); cdecl;
  end;
  TUIPasteControlConfiguration = class(TOCGenericImport<UIPasteControlConfigurationClass, UIPasteControlConfiguration>) end;

  UIPasteControlClass = interface(UIControlClass)
    ['{EA5411B0-BF48-4964-BF15-EF1B992D7323}']
  end;

  UIPasteControl = interface(UIControl)
    ['{AF8751A0-AD17-43A3-9C9F-E3FE2420D8F0}']
    function configuration: UIPasteControlConfiguration; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithConfiguration(configuration: UIPasteControlConfiguration): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    procedure setTarget(target: Pointer); cdecl;
    function target: Pointer; cdecl;
  end;
  TUIPasteControl = class(TOCGenericImport<UIPasteControlClass, UIPasteControl>) end;

  UIPinchGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{4BE15650-3313-4C19-9100-CAC6CF1B2413}']
  end;

  UIPinchGestureRecognizer = interface(UIGestureRecognizer)
    ['{499A9216-B6FF-4EA8-88A1-3A68965F7FAE}']
    function scale: CGFloat; cdecl;
    procedure setScale(scale: CGFloat); cdecl;
    function velocity: CGFloat; cdecl;
  end;
  TUIPinchGestureRecognizer = class(TOCGenericImport<UIPinchGestureRecognizerClass, UIPinchGestureRecognizer>) end;

  UIPopoverControllerClass = interface(NSObjectClass)
    ['{11FA7566-7938-4FB3-B2E2-B9C5A5CF7D70}']
  end;

  UIPopoverController = interface(NSObject)
    ['{5C37EDE3-8D38-4505-A2DB-E5DDEE919529}']
    function backgroundColor: UIColor; cdecl;
    function contentViewController: UIViewController; cdecl;
    function delegate: Pointer; cdecl;
    procedure dismissPopoverAnimated(animated: Boolean); cdecl;
    function initWithContentViewController(viewController: UIViewController): Pointer; cdecl;
    function isPopoverVisible: Boolean; cdecl;
    function passthroughViews: NSArray; cdecl;
    function popoverArrowDirection: UIPopoverArrowDirection; cdecl;
    function popoverBackgroundViewClass: Pointer; cdecl;
    function popoverContentSize: CGSize; cdecl;
    function popoverLayoutMargins: UIEdgeInsets; cdecl;
    procedure presentPopoverFromBarButtonItem(item: UIBarButtonItem; permittedArrowDirections: UIPopoverArrowDirection; animated: Boolean); cdecl;
    procedure presentPopoverFromRect(rect: CGRect; inView: UIView; permittedArrowDirections: UIPopoverArrowDirection; animated: Boolean); cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    procedure setContentViewController(viewController: UIViewController; animated: Boolean); overload; cdecl;
    procedure setContentViewController(contentViewController: UIViewController); overload; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setPassthroughViews(passthroughViews: NSArray); cdecl;
    procedure setPopoverBackgroundViewClass(popoverBackgroundViewClass: Pointer); cdecl;
    procedure setPopoverContentSize(size: CGSize; animated: Boolean); overload; cdecl;
    procedure setPopoverContentSize(popoverContentSize: CGSize); overload; cdecl;
    procedure setPopoverLayoutMargins(popoverLayoutMargins: UIEdgeInsets); cdecl;
  end;
  TUIPopoverController = class(TOCGenericImport<UIPopoverControllerClass, UIPopoverController>) end;

  UIPopoverControllerDelegate = interface(IObjectiveC)
    ['{C3904BD2-E2EA-4553-9E13-96B34330A829}']
    procedure popoverController(popoverController: UIPopoverController; willRepositionPopoverToRect: PCGRect; inView: PUIView); cdecl; // API_DEPRECATED("", ios(7.0, 9.0))
    procedure popoverControllerDidDismissPopover(popoverController: UIPopoverController); cdecl; // API_DEPRECATED("", ios(3.2, 9.0))
    function popoverControllerShouldDismissPopover(popoverController: UIPopoverController): Boolean; cdecl; // API_DEPRECATED("", ios(3.2, 9.0))
  end;

  UIPopoverBackgroundViewMethods = interface(IObjectiveC)
    ['{328D8F9A-7EF7-47D6-86FD-6663FBE882A0}']
    {class} function arrowBase: CGFloat; cdecl;
    {class} function arrowHeight: CGFloat; cdecl;
    {class} function contentViewInsets: UIEdgeInsets; cdecl;
  end;

  UIPopoverBackgroundViewClass = interface(UIViewClass)
    ['{A0B3353F-89A8-4BD0-AB4D-BB7F2D06F74E}']
    {class} function wantsDefaultContentAppearance: Boolean; cdecl; // API_DEPRECATED("No longer supported", ios(6.0, 13.0))
  end;

  UIPopoverBackgroundView = interface(UIView)
    ['{EE901440-8FE1-481E-98F3-7D03CD215F30}']
    function arrowDirection: UIPopoverArrowDirection; cdecl;
    function arrowOffset: CGFloat; cdecl;
    procedure setArrowDirection(arrowDirection: UIPopoverArrowDirection); cdecl;
    procedure setArrowOffset(arrowOffset: CGFloat); cdecl;
  end;
  TUIPopoverBackgroundView = class(TOCGenericImport<UIPopoverBackgroundViewClass, UIPopoverBackgroundView>) end;

  UIPressClass = interface(NSObjectClass)
    ['{EB315442-5281-4690-94D6-E402F8C0E9A6}']
  end;

  UIPress = interface(NSObject)
    ['{88DA3BF6-F2AB-4D9A-B935-7DD824DBC27C}']
    function &type: UIPressType; cdecl;
    function force: CGFloat; cdecl;
    function gestureRecognizers: NSArray; cdecl;
    function key: UIKey; cdecl;
    function phase: UIPressPhase; cdecl;
    function responder: UIResponder; cdecl;
    function timestamp: NSTimeInterval; cdecl;
    function window: UIWindow; cdecl;
  end;
  TUIPress = class(TOCGenericImport<UIPressClass, UIPress>) end;

  UIPressesEventClass = interface(UIEventClass)
    ['{3AFF553D-1045-4BE7-851F-8B6D144CE9BD}']
  end;

  UIPressesEvent = interface(UIEvent)
    ['{00D06364-1F5C-4333-819C-1A1C0981390E}']
    function allPresses: NSSet; cdecl;
    function pressesForGestureRecognizer(gesture: UIGestureRecognizer): NSSet; cdecl;
  end;
  TUIPressesEvent = class(TOCGenericImport<UIPressesEventClass, UIPressesEvent>) end;

  UIProgressViewClass = interface(UIViewClass)
    ['{4303B03B-55EC-40A9-958D-A0C2C685D91C}']
  end;

  UIProgressView = interface(UIView)
    ['{4BBEC703-DDBF-45D9-B567-D41E46D615B4}']
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    function initWithProgressViewStyle(style: UIProgressViewStyle): Pointer; cdecl;
    function observedProgress: NSProgress; cdecl;
    function progress: Single; cdecl;
    function progressImage: UIImage; cdecl;
    function progressTintColor: UIColor; cdecl;
    function progressViewStyle: UIProgressViewStyle; cdecl;
    procedure setObservedProgress(observedProgress: NSProgress); cdecl;
    procedure setProgress(progress: Single); overload; cdecl;
    procedure setProgress(progress: Single; animated: Boolean); overload; cdecl;
    procedure setProgressImage(progressImage: UIImage); cdecl;
    procedure setProgressTintColor(progressTintColor: UIColor); cdecl;
    procedure setProgressViewStyle(progressViewStyle: UIProgressViewStyle); cdecl;
    procedure setTrackImage(trackImage: UIImage); cdecl;
    procedure setTrackTintColor(trackTintColor: UIColor); cdecl;
    function trackImage: UIImage; cdecl;
    function trackTintColor: UIColor; cdecl;
  end;
  TUIProgressView = class(TOCGenericImport<UIProgressViewClass, UIProgressView>) end;

  UIReferenceLibraryViewControllerClass = interface(UIViewControllerClass)
    ['{7091AF10-9C88-44CF-AF24-BB6681194146}']
    {class} function dictionaryHasDefinitionForTerm(term: NSString): Boolean; cdecl;
  end;

  UIReferenceLibraryViewController = interface(UIViewController)
    ['{53742ED0-602A-403E-B0A3-27D97327A370}']
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    function initWithTerm(term: NSString): Pointer; cdecl;
  end;
  TUIReferenceLibraryViewController = class(TOCGenericImport<UIReferenceLibraryViewControllerClass, UIReferenceLibraryViewController>) end;

  UIRotationGestureRecognizerClass = interface(UIGestureRecognizerClass)
    ['{9AF9DBE4-66CE-4EE0-8D6D-A7D2545D103D}']
  end;

  UIRotationGestureRecognizer = interface(UIGestureRecognizer)
    ['{E9A77996-59CD-4A09-B5FA-A1A6F6D9E9BC}']
    function rotation: CGFloat; cdecl;
    procedure setRotation(rotation: CGFloat); cdecl;
    function velocity: CGFloat; cdecl;
  end;
  TUIRotationGestureRecognizer = class(TOCGenericImport<UIRotationGestureRecognizerClass, UIRotationGestureRecognizer>) end;

  UIScreenClass = interface(NSObjectClass)
    ['{2215CD88-14EE-4F45-A1C4-3508A11543A3}']
    {class} function mainScreen: UIScreen; cdecl; // API_DEPRECATED("Use a UIScreen instance found through context instead: i.e, view.window.windowScene.screen", ios(2.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    {class} function screens: NSArray; cdecl; // API_DEPRECATED("Use UIApplication.shared.openSessions to find open sessions with scenes from other screens", ios(3.2, 16.0), visionos(1.0, 1.0))
  end;

  UIScreen = interface(NSObject)
    ['{AD31C4A2-4492-46FA-A30E-5985756797F2}']
    function applicationFrame: CGRect; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("bounds", ios(2.0, 9.0))
    function availableModes: NSArray; cdecl;
    function bounds: CGRect; cdecl;
    function brightness: CGFloat; cdecl;
    function calibratedLatency: CFTimeInterval; cdecl;
    function coordinateSpace: Pointer; cdecl;
    function currentEDRHeadroom: CGFloat; cdecl;
    function currentMode: UIScreenMode; cdecl;
    function displayLinkWithTarget(target: Pointer; selector: SEL): CADisplayLink; cdecl;
    function fixedCoordinateSpace: Pointer; cdecl;
    function focusedItem: Pointer; cdecl; // API_DEPRECATED("Use -[UIWindowScene focusSystem].focusedItem instead", ios(10.0, 15.0), visionos(1.0, 1.0))
    function focusedView: UIView; cdecl; // API_DEPRECATED("Use -[UIWindowScene focusSystem].focusedItem instead", ios(9.0, 15.0), visionos(1.0, 1.0))
    function isCaptured: Boolean; cdecl; // API_DEPRECATED("Use the sceneCaptureState in UITraitCollection instead.", ios(11.0, API_TO_BE_DEPRECATED))
    function maximumFramesPerSecond: NSInteger; cdecl;
    function mirroredScreen: UIScreen; cdecl;
    function nativeBounds: CGRect; cdecl;
    function nativeScale: CGFloat; cdecl;
    function overscanCompensation: UIScreenOverscanCompensation; cdecl;
    function overscanCompensationInsets: UIEdgeInsets; cdecl;
    function potentialEDRHeadroom: CGFloat; cdecl;
    function preferredMode: UIScreenMode; cdecl;
    function referenceDisplayModeStatus: UIScreenReferenceDisplayModeStatus; cdecl;
    function scale: CGFloat; cdecl;
    procedure setBrightness(brightness: CGFloat); cdecl;
    procedure setCurrentMode(currentMode: UIScreenMode); cdecl;
    procedure setOverscanCompensation(overscanCompensation: UIScreenOverscanCompensation); cdecl;
    procedure setWantsSoftwareDimming(wantsSoftwareDimming: Boolean); cdecl;
    function snapshotViewAfterScreenUpdates(afterUpdates: Boolean): UIView; cdecl;
    function supportsFocus: Boolean; cdecl; // API_DEPRECATED("Use -[UIWindowScene focusSystem] != nil instead", ios(9.0, 15.0), visionos(1.0, 1.0))
    function wantsSoftwareDimming: Boolean; cdecl;
  end;
  TUIScreen = class(TOCGenericImport<UIScreenClass, UIScreen>) end;

  UIScreenEdgePanGestureRecognizerClass = interface(UIPanGestureRecognizerClass)
    ['{32CA16B0-BEA0-43CA-B660-7FDEF5AA0FCA}']
  end;

  UIScreenEdgePanGestureRecognizer = interface(UIPanGestureRecognizer)
    ['{A143A98B-0477-49D4-8641-391405EBBDCF}']
    function edges: UIRectEdge; cdecl;
    procedure setEdges(edges: UIRectEdge); cdecl;
  end;
  TUIScreenEdgePanGestureRecognizer = class(TOCGenericImport<UIScreenEdgePanGestureRecognizerClass, UIScreenEdgePanGestureRecognizer>) end;

  UIScreenModeClass = interface(NSObjectClass)
    ['{656A2D6E-CBAC-417E-A220-9A164DD985C6}']
  end;

  UIScreenMode = interface(NSObject)
    ['{CE30E2A3-0B47-421C-A45D-C8CDE1530C14}']
    function pixelAspectRatio: CGFloat; cdecl;
    function size: CGSize; cdecl;
  end;
  TUIScreenMode = class(TOCGenericImport<UIScreenModeClass, UIScreenMode>) end;

  UILookToDictateCapable = interface(IObjectiveC)
    ['{8604C159-66F7-4889-AF9D-B9F2EB18A96F}']
    function isLookToDictateEnabled: Boolean; cdecl;
    procedure setLookToDictateEnabled(lookToDictateEnabled: Boolean); cdecl;
  end;

  UISearchBarClass = interface(UIViewClass)
    ['{9F0F14BF-F48F-4ACE-A389-F92E79482DA0}']
  end;

  UISearchBar = interface(UIView)
    ['{75ABBD45-2337-4442-82B8-47F7FE007A45}']
    function backgroundImage: UIImage; cdecl;
    function backgroundImageForBarPosition(barPosition: UIBarPosition; barMetrics: UIBarMetrics): UIImage; cdecl;
    function barStyle: UIBarStyle; cdecl;
    function barTintColor: UIColor; cdecl;
    function delegate: Pointer; cdecl;
    function imageForSearchBarIcon(icon: UISearchBarIcon; state: UIControlState): UIImage; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    function inputAccessoryView: UIView; cdecl;
    function inputAssistantItem: UITextInputAssistantItem; cdecl;
    function isEnabled: Boolean; cdecl;
    function isLookToDictateEnabled: Boolean; cdecl;
    function isSearchResultsButtonSelected: Boolean; cdecl;
    function isTranslucent: Boolean; cdecl;
    function placeholder: NSString; cdecl;
    function positionAdjustmentForSearchBarIcon(icon: UISearchBarIcon): UIOffset; cdecl;
    function prompt: NSString; cdecl;
    function scopeBarBackgroundImage: UIImage; cdecl;
    function scopeBarButtonBackgroundImageForState(state: UIControlState): UIImage; cdecl;
    function scopeBarButtonDividerImageForLeftSegmentState(leftState: UIControlState; rightSegmentState: UIControlState): UIImage; cdecl;
    function scopeBarButtonTitleTextAttributesForState(state: UIControlState): NSDictionary; cdecl;
    function scopeButtonTitles: NSArray; cdecl;
    function searchBarStyle: UISearchBarStyle; cdecl;
    function searchFieldBackgroundImageForState(state: UIControlState): UIImage; cdecl;
    function searchFieldBackgroundPositionAdjustment: UIOffset; cdecl;
    function searchTextField: UISearchTextField; cdecl;
    function searchTextPositionAdjustment: UIOffset; cdecl;
    function selectedScopeButtonIndex: NSInteger; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage); overload; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage; forBarPosition: UIBarPosition; barMetrics: UIBarMetrics); overload; cdecl;
    procedure setBarStyle(barStyle: UIBarStyle); cdecl;
    procedure setBarTintColor(barTintColor: UIColor); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    procedure setImage(iconImage: UIImage; forSearchBarIcon: UISearchBarIcon; state: UIControlState); cdecl;
    procedure setInputAccessoryView(inputAccessoryView: UIView); cdecl;
    procedure setLookToDictateEnabled(lookToDictateEnabled: Boolean); cdecl;
    procedure setPlaceholder(placeholder: NSString); cdecl;
    procedure setPositionAdjustment(adjustment: UIOffset; forSearchBarIcon: UISearchBarIcon); cdecl;
    procedure setPrompt(prompt: NSString); cdecl;
    procedure setScopeBarBackgroundImage(scopeBarBackgroundImage: UIImage); cdecl;
    procedure setScopeBarButtonBackgroundImage(backgroundImage: UIImage; forState: UIControlState); cdecl;
    procedure setScopeBarButtonDividerImage(dividerImage: UIImage; forLeftSegmentState: UIControlState; rightSegmentState: UIControlState); cdecl;
    procedure setScopeBarButtonTitleTextAttributes(attributes: NSDictionary; forState: UIControlState); cdecl;
    procedure setScopeButtonTitles(scopeButtonTitles: NSArray); cdecl;
    procedure setSearchBarStyle(searchBarStyle: UISearchBarStyle); cdecl;
    procedure setSearchFieldBackgroundImage(backgroundImage: UIImage; forState: UIControlState); cdecl;
    procedure setSearchFieldBackgroundPositionAdjustment(searchFieldBackgroundPositionAdjustment: UIOffset); cdecl;
    procedure setSearchResultsButtonSelected(searchResultsButtonSelected: Boolean); cdecl;
    procedure setSearchTextPositionAdjustment(searchTextPositionAdjustment: UIOffset); cdecl;
    procedure setSelectedScopeButtonIndex(selectedScopeButtonIndex: NSInteger); cdecl;
    procedure setShowsBookmarkButton(showsBookmarkButton: Boolean); cdecl;
    procedure setShowsCancelButton(showsCancelButton: Boolean; animated: Boolean); overload; cdecl;
    procedure setShowsCancelButton(showsCancelButton: Boolean); overload; cdecl;
    procedure setShowsScopeBar(show: Boolean; animated: Boolean); overload; cdecl;
    procedure setShowsScopeBar(showsScopeBar: Boolean); overload; cdecl;
    procedure setShowsSearchResultsButton(showsSearchResultsButton: Boolean); cdecl;
    procedure setText(text: NSString); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    procedure setTranslucent(translucent: Boolean); cdecl;
    function showsBookmarkButton: Boolean; cdecl;
    function showsCancelButton: Boolean; cdecl;
    function showsScopeBar: Boolean; cdecl;
    function showsSearchResultsButton: Boolean; cdecl;
    function text: NSString; cdecl;
    function tintColor: UIColor; cdecl;
  end;
  TUISearchBar = class(TOCGenericImport<UISearchBarClass, UISearchBar>) end;

  UISearchBarDelegate = interface(IObjectiveC)
    ['{F7B2C484-76F5-44E0-92DD-97BB635A8570}']
    procedure searchBar(searchBar: UISearchBar; textDidChange: NSString); overload; cdecl;
    function searchBar(searchBar: UISearchBar; shouldChangeTextInRange: NSRange; replacementText: NSString): Boolean; overload; cdecl;
    procedure searchBar(searchBar: UISearchBar; selectedScopeButtonIndexDidChange: NSInteger); overload; cdecl;
    procedure searchBarBookmarkButtonClicked(searchBar: UISearchBar); cdecl;
    procedure searchBarCancelButtonClicked(searchBar: UISearchBar); cdecl;
    procedure searchBarResultsListButtonClicked(searchBar: UISearchBar); cdecl;
    procedure searchBarSearchButtonClicked(searchBar: UISearchBar); cdecl;
    function searchBarShouldBeginEditing(searchBar: UISearchBar): Boolean; cdecl;
    function searchBarShouldEndEditing(searchBar: UISearchBar): Boolean; cdecl;
    procedure searchBarTextDidBeginEditing(searchBar: UISearchBar); cdecl;
    procedure searchBarTextDidEndEditing(searchBar: UISearchBar); cdecl;
  end;

  UISearchContainerViewControllerClass = interface(UIViewControllerClass)
    ['{80B8995C-8AB4-4F63-9231-0F9817B3FBE0}']
  end;

  UISearchContainerViewController = interface(UIViewController)
    ['{67DB2356-BF60-4233-A2D7-BBE43EAFCEEE}']
    function initWithSearchController(searchController: UISearchController): Pointer; cdecl;
    function searchController: UISearchController; cdecl;
  end;
  TUISearchContainerViewController = class(TOCGenericImport<UISearchContainerViewControllerClass, UISearchContainerViewController>) end;

  UIViewControllerTransitionCoordinatorContext = interface(IObjectiveC)
    ['{7AB8E614-8BE1-4FB2-8147-FAFB7A771A65}']
    function completionCurve: UIViewAnimationCurve; cdecl;
    function completionVelocity: CGFloat; cdecl;
    function containerView: UIView; cdecl;
    function initiallyInteractive: Boolean; cdecl;
    function isAnimated: Boolean; cdecl;
    function isCancelled: Boolean; cdecl;
    function isInteractive: Boolean; cdecl;
    function isInterruptible: Boolean; cdecl;
    function percentComplete: CGFloat; cdecl;
    function presentationStyle: UIModalPresentationStyle; cdecl;
    function targetTransform: CGAffineTransform; cdecl;
    function transitionDuration: NSTimeInterval; cdecl;
    function viewControllerForKey(key: UITransitionContextViewControllerKey): UIViewController; cdecl;
    function viewForKey(key: UITransitionContextViewKey): UIView; cdecl;
  end;

  UIViewControllerTransitionCoordinator = interface(IObjectiveC)
    ['{76A51755-59FE-4F1C-95F6-C095D7588512}']
    function animateAlongsideTransition(animation: Pointer; completion: Pointer): Boolean; cdecl;
    function animateAlongsideTransitionInView(view: UIView; animation: Pointer; completion: Pointer): Boolean; cdecl;
    procedure notifyWhenInteractionChangesUsingBlock(handler: Pointer); cdecl;
    procedure notifyWhenInteractionEndsUsingBlock(handler: Pointer); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("notifyWhenInteractionChangesUsingBlock", ios(7.0, 10.0))
  end;

  UIAdaptivePresentationControllerDelegate = interface(IObjectiveC)
    ['{135C4FA7-44A8-40B2-806A-108701B91617}']
    function adaptivePresentationStyleForPresentationController(controller: UIPresentationController;
      traitCollection: UITraitCollection): UIModalPresentationStyle; overload; cdecl;
    function adaptivePresentationStyleForPresentationController(controller: UIPresentationController): UIModalPresentationStyle; overload; cdecl;
    procedure presentationController(presentationController: UIPresentationController; willPresentWithAdaptiveStyle: UIModalPresentationStyle;
      transitionCoordinator: Pointer); overload; cdecl;
    function presentationController(controller: UIPresentationController;
      viewControllerForAdaptivePresentationStyle: UIModalPresentationStyle): UIViewController; overload; cdecl;
    procedure presentationController(presentationController: UIPresentationController;
      prepareAdaptivePresentationController: UIPresentationController); overload; cdecl;
    procedure presentationControllerDidAttemptToDismiss(presentationController: UIPresentationController); cdecl;
    procedure presentationControllerDidDismiss(presentationController: UIPresentationController); cdecl;
    function presentationControllerShouldDismiss(presentationController: UIPresentationController): Boolean; cdecl;
    procedure presentationControllerWillDismiss(presentationController: UIPresentationController); cdecl;
  end;

  UIPresentationControllerClass = interface(NSObjectClass)
    ['{1DE8225B-B25A-43A9-87B5-038C6080B5BB}']
  end;

  UIPresentationController = interface(NSObject)
    ['{20ED2346-3F94-454A-85A4-0E65B002D8E7}']
    function adaptivePresentationStyle: UIModalPresentationStyle; cdecl;
    function adaptivePresentationStyleForTraitCollection(traitCollection: UITraitCollection): UIModalPresentationStyle; cdecl;
    function containerView: UIView; cdecl;
    procedure containerViewDidLayoutSubviews; cdecl;
    procedure containerViewWillLayoutSubviews; cdecl;
    function delegate: Pointer; cdecl;
    procedure dismissalTransitionDidEnd(completed: Boolean); cdecl;
    procedure dismissalTransitionWillBegin; cdecl;
    function frameOfPresentedViewInContainerView: CGRect; cdecl;
    function initWithPresentedViewController(presentedViewController: UIViewController; presentingViewController: UIViewController): Pointer; cdecl;
    function overrideTraitCollection: UITraitCollection; cdecl; // API_DEPRECATED("Use the traitOverrides property instead", ios(8.0, 17.0), visionos(1.0, 1.0))
    function presentationStyle: UIModalPresentationStyle; cdecl;
    procedure presentationTransitionDidEnd(completed: Boolean); cdecl;
    procedure presentationTransitionWillBegin; cdecl;
    function presentedView: UIView; cdecl;
    function presentedViewController: UIViewController; cdecl;
    function presentingViewController: UIViewController; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setOverrideTraitCollection(overrideTraitCollection: UITraitCollection); cdecl; // API_DEPRECATED("Use the traitOverrides property instead", ios(8.0, 17.0), visionos(1.0, 1.0))
    function shouldPresentInFullscreen: Boolean; cdecl;
    function shouldRemovePresentersView: Boolean; cdecl;
    function traitOverrides: Pointer; cdecl;
  end;
  TUIPresentationController = class(TOCGenericImport<UIPresentationControllerClass, UIPresentationController>) end;

  UITimingCurveProvider = interface(IObjectiveC)
    ['{588DB70E-27C3-4356-B0B1-61D2CB8584FC}']
    function cubicTimingParameters: UICubicTimingParameters; cdecl;
    function springTimingParameters: UISpringTimingParameters; cdecl;
    function timingCurveType: UITimingCurveType; cdecl;
  end;

  UICubicTimingParametersClass = interface(NSObjectClass)
    ['{3047BFA4-964A-4C67-9D58-6F90262A153F}']
  end;

  UICubicTimingParameters = interface(NSObject)
    ['{E1975FC2-8365-4EE7-A4A9-81B58B68F118}']
    function animationCurve: UIViewAnimationCurve; cdecl;
    function controlPoint1: CGPoint; cdecl;
    function controlPoint2: CGPoint; cdecl;
    function initWithAnimationCurve(curve: UIViewAnimationCurve): Pointer; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithControlPoint1(point1: CGPoint; controlPoint2: CGPoint): Pointer; cdecl;
  end;
  TUICubicTimingParameters = class(TOCGenericImport<UICubicTimingParametersClass, UICubicTimingParameters>) end;

  UISpringTimingParametersClass = interface(NSObjectClass)
    ['{9A2715BA-95D1-4727-87A9-41049BEBFC5A}']
  end;

  UISpringTimingParameters = interface(NSObject)
    ['{C4878387-EA15-4FF4-ADBE-1F9BA3C4DCC7}']
    function initialVelocity: CGVector; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithDampingRatio(ratio: CGFloat): Pointer; overload; cdecl;
    function initWithDampingRatio(ratio: CGFloat; initialVelocity: CGVector): Pointer; overload; cdecl;
    function initWithDuration(duration: NSTimeInterval; bounce: CGFloat): Pointer; overload; cdecl;
    function initWithDuration(duration: NSTimeInterval; bounce: CGFloat; initialVelocity: CGVector): Pointer; overload; cdecl;
    function initWithMass(mass: CGFloat; stiffness: CGFloat; damping: CGFloat; initialVelocity: CGVector): Pointer; cdecl;
  end;
  TUISpringTimingParameters = class(TOCGenericImport<UISpringTimingParametersClass, UISpringTimingParameters>) end;

  UIViewControllerContextTransitioning = interface(IObjectiveC)
    ['{BFA80721-065F-41C3-8A98-4416B9DEAA55}']
    procedure cancelInteractiveTransition; cdecl;
    procedure completeTransition(didComplete: Boolean); cdecl;
    function containerView: UIView; cdecl;
    function finalFrameForViewController(vc: UIViewController): CGRect; cdecl;
    procedure finishInteractiveTransition; cdecl;
    function initialFrameForViewController(vc: UIViewController): CGRect; cdecl;
    function isAnimated: Boolean; cdecl;
    function isInteractive: Boolean; cdecl;
    procedure pauseInteractiveTransition; cdecl;
    function presentationStyle: UIModalPresentationStyle; cdecl;
    function targetTransform: CGAffineTransform; cdecl;
    function transitionWasCancelled: Boolean; cdecl;
    procedure updateInteractiveTransition(percentComplete: CGFloat); cdecl;
    function viewControllerForKey(key: UITransitionContextViewControllerKey): UIViewController; cdecl;
    function viewForKey(key: UITransitionContextViewKey): UIView; cdecl;
  end;

  UIViewControllerAnimatedTransitioning = interface(IObjectiveC)
    ['{A16E5CE6-F905-4241-A79B-CD43846B217F}']
    procedure animateTransition(transitionContext: Pointer); cdecl;
    procedure animationEnded(transitionCompleted: Boolean); cdecl;
    function interruptibleAnimatorForTransition(transitionContext: Pointer): Pointer; cdecl;
    function transitionDuration(transitionContext: Pointer): NSTimeInterval; cdecl;
  end;

  UIViewControllerInteractiveTransitioning = interface(IObjectiveC)
    ['{F0E6BAB6-ABD2-43B4-B385-F93D52E9DB3B}']
    function completionCurve: UIViewAnimationCurve; cdecl;
    function completionSpeed: CGFloat; cdecl;
    procedure startInteractiveTransition(transitionContext: Pointer); cdecl;
    function wantsInteractiveStart: Boolean; cdecl;
  end;

  UIViewControllerTransitioningDelegate = interface(IObjectiveC)
    ['{017EC5E7-FF42-4B3C-95EE-19D8522D6F56}']
    function animationControllerForDismissedController(dismissed: UIViewController): Pointer; cdecl;
    function animationControllerForPresentedController(presented: UIViewController; presentingController: UIViewController;
      sourceController: UIViewController): Pointer; cdecl;
    function interactionControllerForDismissal(animator: Pointer): Pointer; cdecl;
    function interactionControllerForPresentation(animator: Pointer): Pointer; cdecl;
    function presentationControllerForPresentedViewController(presented: UIViewController; presentingViewController: UIViewController;
      sourceViewController: UIViewController): UIPresentationController; cdecl;
  end;

  UIPercentDrivenInteractiveTransitionClass = interface(NSObjectClass)
    ['{E5750B9F-89DC-4DB3-B490-6D4B06A9A13E}']
  end;

  UIPercentDrivenInteractiveTransition = interface(NSObject)
    ['{B7999036-0BB4-469D-B218-433DC5511C21}']
    procedure cancelInteractiveTransition; cdecl;
    function completionCurve: UIViewAnimationCurve; cdecl;
    function completionSpeed: CGFloat; cdecl;
    function duration: CGFloat; cdecl;
    procedure finishInteractiveTransition; cdecl;
    procedure pauseInteractiveTransition; cdecl;
    function percentComplete: CGFloat; cdecl;
    procedure setCompletionCurve(completionCurve: UIViewAnimationCurve); cdecl;
    procedure setCompletionSpeed(completionSpeed: CGFloat); cdecl;
    procedure setTimingCurve(timingCurve: Pointer); cdecl;
    procedure setWantsInteractiveStart(wantsInteractiveStart: Boolean); cdecl;
    function timingCurve: Pointer; cdecl;
    procedure updateInteractiveTransition(percentComplete: CGFloat); cdecl;
    function wantsInteractiveStart: Boolean; cdecl;
  end;
  TUIPercentDrivenInteractiveTransition = class(TOCGenericImport<UIPercentDrivenInteractiveTransitionClass, UIPercentDrivenInteractiveTransition>) end;

  UISearchControllerDelegate = interface(IObjectiveC)
    ['{A879035A-F060-4555-9E0A-8ECE38AFE8AB}']
    procedure didDismissSearchController(searchController: UISearchController); cdecl;
    procedure didPresentSearchController(searchController: UISearchController); cdecl;
    procedure presentSearchController(searchController: UISearchController); cdecl;
    procedure searchController(searchController: UISearchController; willChangeToSearchBarPlacement: UINavigationItemSearchBarPlacement); cdecl;
    [MethodName('searchController:didChangeFromSearchBarPlacement:')]
    procedure searchControllerDidChangeFromSearchBarPlacement(searchController: UISearchController;
      didChangeFromSearchBarPlacement: UINavigationItemSearchBarPlacement); cdecl;
    procedure willDismissSearchController(searchController: UISearchController); cdecl;
    procedure willPresentSearchController(searchController: UISearchController); cdecl;
  end;

  UISearchResultsUpdating = interface(IObjectiveC)
    ['{D0D52AC1-D581-4211-8A29-42FFD560D929}']
    procedure updateSearchResultsForSearchController(searchController: UISearchController); overload; cdecl;
    procedure updateSearchResultsForSearchController(searchController: UISearchController; selectingSearchSuggestion: Pointer); overload; cdecl;
  end;

  UISearchControllerClass = interface(UIViewControllerClass)
    ['{A5842915-53FA-4E92-A717-C2F15A92DF60}']
  end;

  UISearchController = interface(UIViewController)
    ['{388ACFC5-CB1B-41E2-A1BB-B5EDF8323338}']
    function automaticallyShowsCancelButton: Boolean; cdecl;
    function automaticallyShowsScopeBar: Boolean; cdecl; // API_DEPRECATED("Use scopeBarActivation instead", ios(13.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    function automaticallyShowsSearchResultsController: Boolean; cdecl;
    function delegate: Pointer; cdecl;
    function dimsBackgroundDuringPresentation: Boolean; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("obscuresBackgroundDuringPresentation", ios(8.0,12.0))
    function hidesNavigationBarDuringPresentation: Boolean; cdecl;
    function ignoresSearchSuggestionsForSearchBarPlacementStacked: Boolean; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    function initWithSearchResultsController(searchResultsController: UIViewController): Pointer; cdecl;
    function isActive: Boolean; cdecl;
    function obscuresBackgroundDuringPresentation: Boolean; cdecl;
    function scopeBarActivation: UISearchControllerScopeBarActivation; cdecl;
    function searchBar: UISearchBar; cdecl;
    function searchBarPlacement: UINavigationItemSearchBarPlacement; cdecl;
    function searchControllerObservedScrollView: UIScrollView; cdecl; // API_DEPRECATED("Use -[UIViewController setContentScrollView:forEdge:] on the searchResultsController instead.", tvos(13.0,API_TO_BE_DEPRECATED))
    function searchResultsController: UIViewController; cdecl;
    function searchResultsUpdater: Pointer; cdecl;
    function searchSuggestions: NSArray; cdecl;
    procedure setActive(active: Boolean); cdecl;
    procedure setAutomaticallyShowsCancelButton(automaticallyShowsCancelButton: Boolean); cdecl;
    procedure setAutomaticallyShowsScopeBar(automaticallyShowsScopeBar: Boolean); cdecl; // API_DEPRECATED("Use scopeBarActivation instead", ios(13.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    procedure setAutomaticallyShowsSearchResultsController(automaticallyShowsSearchResultsController: Boolean); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDimsBackgroundDuringPresentation(dimsBackgroundDuringPresentation: Boolean); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("obscuresBackgroundDuringPresentation", ios(8.0,12.0))
    procedure setHidesNavigationBarDuringPresentation(hidesNavigationBarDuringPresentation: Boolean); cdecl;
    procedure setIgnoresSearchSuggestionsForSearchBarPlacementStacked(ignoresSearchSuggestionsForSearchBarPlacementStacked: Boolean); cdecl;
    procedure setObscuresBackgroundDuringPresentation(obscuresBackgroundDuringPresentation: Boolean); cdecl;
    procedure setScopeBarActivation(scopeBarActivation: UISearchControllerScopeBarActivation); cdecl;
    procedure setSearchControllerObservedScrollView(searchControllerObservedScrollView: UIScrollView); cdecl; // API_DEPRECATED("Use -[UIViewController setContentScrollView:forEdge:] on the searchResultsController instead.", tvos(13.0,API_TO_BE_DEPRECATED))
    procedure setSearchResultsUpdater(searchResultsUpdater: Pointer); cdecl;
    procedure setSearchSuggestions(searchSuggestions: NSArray); cdecl;
    procedure setShowsSearchResultsController(showsSearchResultsController: Boolean); cdecl;
    function showsSearchResultsController: Boolean; cdecl;
  end;
  TUISearchController = class(TOCGenericImport<UISearchControllerClass, UISearchController>) end;

  UISearchDisplayControllerClass = interface(NSObjectClass)
    ['{398C0886-0924-4361-8C1F-33975F32A662}']
  end;

  UISearchDisplayController = interface(NSObject)
    ['{06854078-AF46-40A4-A5DA-527ADC06460F}']
    function delegate: Pointer; cdecl;
    function displaysSearchBarInNavigationBar: Boolean; cdecl;
    function initWithSearchBar(searchBar: UISearchBar; contentsController: UIViewController): Pointer; cdecl;
    function isActive: Boolean; cdecl;
    function navigationItem: UINavigationItem; cdecl;
    function searchBar: UISearchBar; cdecl;
    function searchContentsController: UIViewController; cdecl;
    function searchResultsDataSource: Pointer; cdecl;
    function searchResultsDelegate: Pointer; cdecl;
    function searchResultsTableView: UITableView; cdecl;
    function searchResultsTitle: NSString; cdecl;
    procedure setActive(visible: Boolean; animated: Boolean); overload; cdecl;
    procedure setActive(active: Boolean); overload; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDisplaysSearchBarInNavigationBar(displaysSearchBarInNavigationBar: Boolean); cdecl;
    procedure setSearchResultsDataSource(searchResultsDataSource: Pointer); cdecl;
    procedure setSearchResultsDelegate(searchResultsDelegate: Pointer); cdecl;
    procedure setSearchResultsTitle(searchResultsTitle: NSString); cdecl;
  end;
  TUISearchDisplayController = class(TOCGenericImport<UISearchDisplayControllerClass, UISearchDisplayController>) end;

  UISearchDisplayDelegate = interface(IObjectiveC)
    ['{98030A44-B904-4BEE-A5B7-CD36A1359E89}']
    procedure searchDisplayController(controller: UISearchDisplayController; didLoadSearchResultsTableView: UITableView); overload; cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    function searchDisplayController(controller: UISearchDisplayController; shouldReloadTableForSearchScope: NSInteger): Boolean; overload; cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    function searchDisplayController(controller: UISearchDisplayController; shouldReloadTableForSearchString: NSString): Boolean; overload; cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    procedure searchDisplayControllerDidBeginSearch(controller: UISearchDisplayController); cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    procedure searchDisplayControllerDidEndSearch(controller: UISearchDisplayController); cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    [MethodName('searchDisplayController:didHideSearchResultsTableView:')]
    procedure searchDisplayControllerDidHideSearchResultsTableView(controller: UISearchDisplayController;
      didHideSearchResultsTableView: UITableView); cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    [MethodName('searchDisplayController:didShowSearchResultsTableView:')]
    procedure searchDisplayControllerDidShowSearchResultsTableView(controller: UISearchDisplayController;
      didShowSearchResultsTableView: UITableView); cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    procedure searchDisplayControllerWillBeginSearch(controller: UISearchDisplayController); cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    procedure searchDisplayControllerWillEndSearch(controller: UISearchDisplayController); cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    [MethodName('searchDisplayController:willHideSearchResultsTableView:')]
    procedure searchDisplayControllerWillHideSearchResultsTableView(controller: UISearchDisplayController;
      willHideSearchResultsTableView: UITableView); cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    [MethodName('searchDisplayController:willShowSearchResultsTableView:')]
    procedure searchDisplayControllerWillShowSearchResultsTableView(controller: UISearchDisplayController;
      willShowSearchResultsTableView: UITableView); cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
    [MethodName('searchDisplayController:willUnloadSearchResultsTableView:')]
    procedure searchDisplayControllerWillUnloadSearchResultsTableView(controller: UISearchDisplayController;
      willUnloadSearchResultsTableView: UITableView); cdecl; // API_DEPRECATED("", ios(3.0, 8.0))
  end;

  UISegmentedControlClass = interface(UIControlClass)
    ['{7FA8A5DA-6A7D-40C8-A7B8-3FDD7E841858}']
  end;

  UISegmentedControl = interface(UIControl)
    ['{7DAFF4A0-915C-44DB-9CCA-673D39103712}']
    function actionForSegmentAtIndex(segment: NSUInteger): UIAction; cdecl;
    function apportionsSegmentWidthsByContent: Boolean; cdecl;
    function backgroundImageForState(state: UIControlState; barMetrics: UIBarMetrics): UIImage; cdecl;
    function contentOffsetForSegmentAtIndex(segment: NSUInteger): CGSize; cdecl;
    function contentPositionAdjustmentForSegmentType(leftCenterRightOrAlone: UISegmentedControlSegment; barMetrics: UIBarMetrics): UIOffset; cdecl;
    function dividerImageForLeftSegmentState(leftState: UIControlState; rightSegmentState: UIControlState; barMetrics: UIBarMetrics): UIImage; cdecl;
    function imageForSegmentAtIndex(segment: NSUInteger): UIImage; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; overload; cdecl;
    function initWithFrame(frame: CGRect; actions: NSArray): Pointer; overload; cdecl;
    function initWithItems(items: NSArray): Pointer; cdecl;
    procedure insertSegmentWithAction(action: UIAction; atIndex: NSUInteger; animated: Boolean); cdecl;
    procedure insertSegmentWithImage(image: UIImage; atIndex: NSUInteger; animated: Boolean); cdecl;
    procedure insertSegmentWithTitle(title: NSString; atIndex: NSUInteger; animated: Boolean); cdecl;
    function isEnabledForSegmentAtIndex(segment: NSUInteger): Boolean; cdecl;
    function isMomentary: Boolean; cdecl;
    function numberOfSegments: NSUInteger; cdecl;
    procedure removeAllSegments; cdecl;
    procedure removeSegmentAtIndex(segment: NSUInteger; animated: Boolean); cdecl;
    function segmentedControlStyle: UISegmentedControlStyle; cdecl; // API_DEPRECATED("The segmentedControlStyle property no longer has any effect", ios(2.0, 7.0))
    function segmentIndexForActionIdentifier(actionIdentifier: UIActionIdentifier): NSInteger; cdecl;
    function selectedSegmentIndex: NSInteger; cdecl;
    function selectedSegmentTintColor: UIColor; cdecl;
    procedure setAction(action: UIAction; forSegmentAtIndex: NSUInteger); cdecl;
    procedure setApportionsSegmentWidthsByContent(apportionsSegmentWidthsByContent: Boolean); cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage; forState: UIControlState; barMetrics: UIBarMetrics); cdecl;
    procedure setContentOffset(offset: CGSize; forSegmentAtIndex: NSUInteger); cdecl;
    procedure setContentPositionAdjustment(adjustment: UIOffset; forSegmentType: UISegmentedControlSegment; barMetrics: UIBarMetrics); cdecl;
    procedure setDividerImage(dividerImage: UIImage; forLeftSegmentState: UIControlState; rightSegmentState: UIControlState;
      barMetrics: UIBarMetrics); cdecl;
    procedure setEnabled(enabled: Boolean; forSegmentAtIndex: NSUInteger); cdecl;
    procedure setImage(image: UIImage; forSegmentAtIndex: NSUInteger); cdecl;
    procedure setMomentary(momentary: Boolean); cdecl;
    procedure setSegmentedControlStyle(segmentedControlStyle: UISegmentedControlStyle); cdecl; // API_DEPRECATED("The segmentedControlStyle property no longer has any effect", ios(2.0, 7.0))
    procedure setSelectedSegmentIndex(selectedSegmentIndex: NSInteger); cdecl;
    procedure setSelectedSegmentTintColor(selectedSegmentTintColor: UIColor); cdecl;
    procedure setTitle(title: NSString; forSegmentAtIndex: NSUInteger); cdecl;
    procedure setTitleTextAttributes(attributes: NSDictionary; forState: UIControlState); cdecl;
    procedure setWidth(width: CGFloat; forSegmentAtIndex: NSUInteger); cdecl;
    function titleForSegmentAtIndex(segment: NSUInteger): NSString; cdecl;
    function titleTextAttributesForState(state: UIControlState): NSDictionary; cdecl;
    function widthForSegmentAtIndex(segment: NSUInteger): CGFloat; cdecl;
  end;
  TUISegmentedControl = class(TOCGenericImport<UISegmentedControlClass, UISegmentedControl>) end;

  UISplitViewControllerClass = interface(UIViewControllerClass)
    ['{B46D0EEB-EA57-4095-B66C-D07E1D1A31C1}']
  end;

  UISplitViewController = interface(UIViewController)
    ['{9903252C-B030-4AA3-9917-E2AE4DE456B9}']
    function delegate: Pointer; cdecl;
    function displayMode: UISplitViewControllerDisplayMode; cdecl;
    function displayModeButtonItem: UIBarButtonItem; cdecl;
    function displayModeButtonVisibility: UISplitViewControllerDisplayModeButtonVisibility; cdecl;
    procedure hideColumn(column: UISplitViewControllerColumn); cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    function initWithStyle(style: UISplitViewControllerStyle): Pointer; cdecl;
    function isCollapsed: Boolean; cdecl;
    function maximumPrimaryColumnWidth: CGFloat; cdecl;
    function maximumSupplementaryColumnWidth: CGFloat; cdecl;
    function minimumPrimaryColumnWidth: CGFloat; cdecl;
    function minimumSupplementaryColumnWidth: CGFloat; cdecl;
    function preferredDisplayMode: UISplitViewControllerDisplayMode; cdecl;
    function preferredPrimaryColumnWidth: CGFloat; cdecl;
    function preferredPrimaryColumnWidthFraction: CGFloat; cdecl;
    function preferredSplitBehavior: UISplitViewControllerSplitBehavior; cdecl;
    function preferredSupplementaryColumnWidth: CGFloat; cdecl;
    function preferredSupplementaryColumnWidthFraction: CGFloat; cdecl;
    function presentsWithGesture: Boolean; cdecl;
    function primaryBackgroundStyle: UISplitViewControllerBackgroundStyle; cdecl;
    function primaryColumnWidth: CGFloat; cdecl;
    function primaryEdge: UISplitViewControllerPrimaryEdge; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDisplayModeButtonVisibility(displayModeButtonVisibility: UISplitViewControllerDisplayModeButtonVisibility); cdecl;
    procedure setMaximumPrimaryColumnWidth(maximumPrimaryColumnWidth: CGFloat); cdecl;
    procedure setMaximumSupplementaryColumnWidth(maximumSupplementaryColumnWidth: CGFloat); cdecl;
    procedure setMinimumPrimaryColumnWidth(minimumPrimaryColumnWidth: CGFloat); cdecl;
    procedure setMinimumSupplementaryColumnWidth(minimumSupplementaryColumnWidth: CGFloat); cdecl;
    procedure setPreferredDisplayMode(preferredDisplayMode: UISplitViewControllerDisplayMode); cdecl;
    procedure setPreferredPrimaryColumnWidth(preferredPrimaryColumnWidth: CGFloat); cdecl;
    procedure setPreferredPrimaryColumnWidthFraction(preferredPrimaryColumnWidthFraction: CGFloat); cdecl;
    procedure setPreferredSplitBehavior(preferredSplitBehavior: UISplitViewControllerSplitBehavior); cdecl;
    procedure setPreferredSupplementaryColumnWidth(preferredSupplementaryColumnWidth: CGFloat); cdecl;
    procedure setPreferredSupplementaryColumnWidthFraction(preferredSupplementaryColumnWidthFraction: CGFloat); cdecl;
    procedure setPresentsWithGesture(presentsWithGesture: Boolean); cdecl;
    procedure setPrimaryBackgroundStyle(primaryBackgroundStyle: UISplitViewControllerBackgroundStyle); cdecl;
    procedure setPrimaryEdge(primaryEdge: UISplitViewControllerPrimaryEdge); cdecl;
    procedure setShowsSecondaryOnlyButton(showsSecondaryOnlyButton: Boolean); cdecl;
    procedure setViewController(vc: UIViewController; forColumn: UISplitViewControllerColumn); cdecl;
    procedure setViewControllers(viewControllers: NSArray); cdecl;
    procedure showColumn(column: UISplitViewControllerColumn); cdecl;
    procedure showDetailViewController(vc: UIViewController; sender: Pointer); cdecl;
    function showsSecondaryOnlyButton: Boolean; cdecl;
    procedure showViewController(vc: UIViewController; sender: Pointer); cdecl;
    function splitBehavior: UISplitViewControllerSplitBehavior; cdecl;
    function style: UISplitViewControllerStyle; cdecl;
    function supplementaryColumnWidth: CGFloat; cdecl;
    function viewControllerForColumn(column: UISplitViewControllerColumn): UIViewController; cdecl;
    function viewControllers: NSArray; cdecl;
  end;
  TUISplitViewController = class(TOCGenericImport<UISplitViewControllerClass, UISplitViewController>) end;

  UISplitViewControllerDelegate = interface(IObjectiveC)
    ['{FB8DC0EE-47CB-4759-8860-9E1C3939FFD0}']
    function primaryViewControllerForCollapsingSplitViewController(splitViewController: UISplitViewController): UIViewController; cdecl;
    function primaryViewControllerForExpandingSplitViewController(splitViewController: UISplitViewController): UIViewController; cdecl;
    procedure splitViewController(svc: UISplitViewController; willHideViewController: UIViewController; withBarButtonItem: UIBarButtonItem;
      forPopoverController: UIPopoverController); overload; cdecl; // API_DEPRECATED("Use splitViewController:willChangeToDisplayMode: and displayModeButtonItem instead", ios(2.0, 8.0))
    procedure splitViewController(svc: UISplitViewController; willShowViewController: UIViewController;
      invalidatingBarButtonItem: UIBarButtonItem); overload; cdecl; // API_DEPRECATED("Use splitViewController:willChangeToDisplayMode: and displayModeButtonItem instead", ios(2.0, 8.0))
    function splitViewController(svc: UISplitViewController;
      topColumnForCollapsingToProposedTopColumn: UISplitViewControllerColumn): UISplitViewControllerColumn; overload; cdecl;
    function splitViewController(svc: UISplitViewController; shouldHideViewController: UIViewController;
      inOrientation: UIInterfaceOrientation): Boolean; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("preferredDisplayMode", ios(5.0, 8.0))
    procedure splitViewController(svc: UISplitViewController; popoverController: UIPopoverController;
      willPresentViewController: UIViewController); overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("splitViewController:willChangeToDisplayMode:", ios(2.0, 8.0))
    function splitViewController(splitViewController: UISplitViewController;
      separateSecondaryViewControllerFromPrimaryViewController: UIViewController): UIViewController; overload; cdecl;
    [MethodName('splitViewController:willChangeToDisplayMode:')]
    procedure splitViewControllerWillChangeToDisplayMode(svc: UISplitViewController;
      willChangeToDisplayMode: UISplitViewControllerDisplayMode); overload; cdecl;
    function splitViewController(splitViewController: UISplitViewController; showViewController: UIViewController;
      sender: Pointer): Boolean; overload; cdecl;
    function splitViewController(splitViewController: UISplitViewController; collapseSecondaryViewController: UIViewController;
      ontoPrimaryViewController: UIViewController): Boolean; overload; cdecl;
    procedure splitViewControllerDidCollapse(svc: UISplitViewController); cdecl;
    procedure splitViewControllerDidExpand(svc: UISplitViewController); cdecl;
    [MethodName('splitViewController:displayModeForExpandingToProposedDisplayMode:')]
    function splitViewControllerDisplayModeForExpandingToProposedDisplayMode(svc: UISplitViewController;
      displayModeForExpandingToProposedDisplayMode: UISplitViewControllerDisplayMode): UISplitViewControllerDisplayMode; cdecl;
    procedure splitViewControllerInteractivePresentationGestureDidEnd(svc: UISplitViewController); cdecl;
    procedure splitViewControllerInteractivePresentationGestureWillBegin(svc: UISplitViewController); cdecl;
    function splitViewControllerPreferredInterfaceOrientationForPresentation(splitViewController: UISplitViewController): UIInterfaceOrientation; cdecl;
    [MethodName('splitViewController:showDetailViewController:sender:')]
    function splitViewControllerShowDetailViewController(splitViewController: UISplitViewController; showDetailViewController: UIViewController;
      sender: Pointer): Boolean; cdecl;
    function splitViewControllerSupportedInterfaceOrientations(splitViewController: UISplitViewController): UIInterfaceOrientationMask; cdecl;
    [MethodName('splitViewController:willHideColumn:')]
    procedure splitViewControllerWillHideColumn(svc: UISplitViewController; willHideColumn: UISplitViewControllerColumn); cdecl;
    [MethodName('splitViewController:willShowColumn:')]
    procedure splitViewControllerWillShowColumn(svc: UISplitViewController; willShowColumn: UISplitViewControllerColumn); cdecl;
    function targetDisplayModeForActionInSplitViewController(svc: UISplitViewController): UISplitViewControllerDisplayMode; cdecl;
  end;

  UITextCursorView = interface(IObjectiveC)
    ['{B263DA5A-7117-47CC-A8F1-AE8492DF17A9}']
    function isBlinking: Boolean; cdecl;
    procedure resetBlinkAnimation; cdecl;
    procedure setBlinking(blinking: Boolean); cdecl;
  end;

  UIStandardTextCursorViewClass = interface(UIViewClass)
    ['{1AFBEEF5-F25D-4888-A33C-4BB45D9599F6}']
  end;

  UIStandardTextCursorView = interface(UIView)
    ['{5C8A408E-3254-487D-8354-F9D7DEC22446}']
  end;
  TUIStandardTextCursorView = class(TOCGenericImport<UIStandardTextCursorViewClass, UIStandardTextCursorView>) end;

  UIStepperClass = interface(UIControlClass)
    ['{BB1A0D97-BC5A-4E3D-82E9-619FC0C990F4}']
  end;

  UIStepper = interface(UIControl)
    ['{C989AF08-5BC2-4409-B46A-7C6AC9DB84AF}']
    function autorepeat: Boolean; cdecl;
    function backgroundImageForState(state: UIControlState): UIImage; cdecl;
    function decrementImageForState(state: UIControlState): UIImage; cdecl;
    function dividerImageForLeftSegmentState(state: UIControlState; rightSegmentState: UIControlState): UIImage; cdecl;
    function incrementImageForState(state: UIControlState): UIImage; cdecl;
    function isContinuous: Boolean; cdecl;
    function maximumValue: Double; cdecl;
    function minimumValue: Double; cdecl;
    procedure setAutorepeat(autorepeat: Boolean); cdecl;
    procedure setBackgroundImage(image: UIImage; forState: UIControlState); cdecl;
    procedure setContinuous(continuous: Boolean); cdecl;
    procedure setDecrementImage(image: UIImage; forState: UIControlState); cdecl;
    procedure setDividerImage(image: UIImage; forLeftSegmentState: UIControlState; rightSegmentState: UIControlState); cdecl;
    procedure setIncrementImage(image: UIImage; forState: UIControlState); cdecl;
    procedure setMaximumValue(maximumValue: Double); cdecl;
    procedure setMinimumValue(minimumValue: Double); cdecl;
    procedure setStepValue(stepValue: Double); cdecl;
    procedure setValue(value: Double); cdecl;
    procedure setWraps(wraps: Boolean); cdecl;
    function stepValue: Double; cdecl;
    function value: Double; cdecl;
    function wraps: Boolean; cdecl;
  end;
  TUIStepper = class(TOCGenericImport<UIStepperClass, UIStepper>) end;

  UIStoryboardClass = interface(NSObjectClass)
    ['{F05B0959-3DA4-407F-93D8-3AB60169C610}']
    {class} function storyboardWithName(name: NSString; bundle: NSBundle): UIStoryboard; cdecl;
  end;

  UIStoryboard = interface(NSObject)
    ['{01442102-7331-4A4E-B818-D2337C2B0402}']
    function instantiateInitialViewController: UIViewController; cdecl;
    function instantiateInitialViewControllerWithCreator(block: UIStoryboardViewControllerCreator): UIViewController; cdecl;
    function instantiateViewControllerWithIdentifier(identifier: NSString): UIViewController; overload; cdecl;
    function instantiateViewControllerWithIdentifier(identifier: NSString;
      creator: UIStoryboardViewControllerCreator): UIViewController; overload; cdecl;
  end;
  TUIStoryboard = class(TOCGenericImport<UIStoryboardClass, UIStoryboard>) end;

  UIStoryboardSegueClass = interface(NSObjectClass)
    ['{F9EE6BC2-47AE-4B60-97D9-56BF5BB456A3}']
    {class} function segueWithIdentifier(identifier: NSString; source: UIViewController; destination: UIViewController;
      performHandler: TUIStoryboardSegueBlockMethod1): Pointer; cdecl;
  end;

  UIStoryboardSegue = interface(NSObject)
    ['{C2FD19D5-0E5A-47FA-8849-24E9C58FB0BE}']
    function destinationViewController: UIViewController; cdecl;
    function identifier: NSString; cdecl;
    function initWithIdentifier(identifier: NSString; source: UIViewController; destination: UIViewController): Pointer; cdecl;
    procedure perform; cdecl;
    function sourceViewController: UIViewController; cdecl;
  end;
  TUIStoryboardSegue = class(TOCGenericImport<UIStoryboardSegueClass, UIStoryboardSegue>) end;

  UIStoryboardUnwindSegueSourceClass = interface(NSObjectClass)
    ['{B231ADEE-1993-4EB5-BA2B-F9B16D305A09}']
  end;

  UIStoryboardUnwindSegueSource = interface(NSObject)
    ['{97CBEEBA-B63B-468A-BF3F-EB1355CFD3AE}']
    function sender: Pointer; cdecl;
    function sourceViewController: UIViewController; cdecl;
    function unwindAction: SEL; cdecl;
  end;
  TUIStoryboardUnwindSegueSource = class(TOCGenericImport<UIStoryboardUnwindSegueSourceClass, UIStoryboardUnwindSegueSource>) end;

  UIStoryboardPopoverSegueClass = interface(UIStoryboardSegueClass)
    ['{DCAB738B-DCA0-464E-975F-8F0E764ADF32}']
  end;

  UIStoryboardPopoverSegue = interface(UIStoryboardSegue)
    ['{CE7219DA-A077-4CD9-BC38-CD5B81E788AD}']
    function popoverController: UIPopoverController; cdecl;
  end;
  TUIStoryboardPopoverSegue = class(TOCGenericImport<UIStoryboardPopoverSegueClass, UIStoryboardPopoverSegue>) end;

  UISwitchClass = interface(UIControlClass)
    ['{16563538-B538-49F7-9DFA-7E6151D4AADC}']
  end;

  UISwitch = interface(UIControl)
    ['{3511F85D-FF35-454F-88CF-5EE14C9014D8}']
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    function isOn: Boolean; cdecl;
    function offImage: UIImage; cdecl;
    function onImage: UIImage; cdecl;
    function onTintColor: UIColor; cdecl;
    function preferredStyle: UISwitchStyle; cdecl;
    procedure setOffImage(offImage: UIImage); cdecl;
    procedure setOn(on: Boolean); overload; cdecl;
    procedure setOn(on: Boolean; animated: Boolean); overload; cdecl;
    procedure setOnImage(onImage: UIImage); cdecl;
    procedure setOnTintColor(onTintColor: UIColor); cdecl;
    procedure setPreferredStyle(preferredStyle: UISwitchStyle); cdecl;
    procedure setThumbTintColor(thumbTintColor: UIColor); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function style: UISwitchStyle; cdecl;
    function thumbTintColor: UIColor; cdecl;
    function title: NSString; cdecl;
  end;
  TUISwitch = class(TOCGenericImport<UISwitchClass, UISwitch>) end;

  UITabBarClass = interface(UIViewClass)
    ['{A5F3F3DB-6385-4591-B272-9C2E51702B12}']
  end;

  UITabBar = interface(UIView)
    ['{AB368483-88EE-4969-BFF4-0F0C6FA5FBA6}']
    function backgroundImage: UIImage; cdecl;
    function barStyle: UIBarStyle; cdecl;
    function barTintColor: UIColor; cdecl;
    procedure beginCustomizingItems(items: NSArray); cdecl;
    function delegate: Pointer; cdecl;
    function endCustomizingAnimated(animated: Boolean): Boolean; cdecl;
    function isCustomizing: Boolean; cdecl;
    function isTranslucent: Boolean; cdecl;
    function itemPositioning: UITabBarItemPositioning; cdecl;
    function items: NSArray; cdecl;
    function itemSpacing: CGFloat; cdecl;
    function itemWidth: CGFloat; cdecl;
    function leadingAccessoryView: UIView; cdecl;
    function scrollEdgeAppearance: UITabBarAppearance; cdecl;
    function selectedImageTintColor: UIColor; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("tintColor", ios(5.0, 8.0))
    function selectedItem: UITabBarItem; cdecl;
    function selectionIndicatorImage: UIImage; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage); cdecl;
    procedure setBarStyle(barStyle: UIBarStyle); cdecl;
    procedure setBarTintColor(barTintColor: UIColor); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setItemPositioning(itemPositioning: UITabBarItemPositioning); cdecl;
    procedure setItems(items: NSArray; animated: Boolean); overload; cdecl;
    procedure setItems(items: NSArray); overload; cdecl;
    procedure setItemSpacing(itemSpacing: CGFloat); cdecl;
    procedure setItemWidth(itemWidth: CGFloat); cdecl;
    procedure setScrollEdgeAppearance(scrollEdgeAppearance: UITabBarAppearance); cdecl;
    procedure setSelectedImageTintColor(selectedImageTintColor: UIColor); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("tintColor", ios(5.0, 8.0))
    procedure setSelectedItem(selectedItem: UITabBarItem); cdecl;
    procedure setSelectionIndicatorImage(selectionIndicatorImage: UIImage); cdecl;
    procedure setShadowImage(shadowImage: UIImage); cdecl;
    procedure setStandardAppearance(standardAppearance: UITabBarAppearance); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    procedure setTranslucent(translucent: Boolean); cdecl;
    procedure setUnselectedItemTintColor(unselectedItemTintColor: UIColor); cdecl;
    function shadowImage: UIImage; cdecl;
    function standardAppearance: UITabBarAppearance; cdecl;
    function tintColor: UIColor; cdecl;
    function trailingAccessoryView: UIView; cdecl;
    function unselectedItemTintColor: UIColor; cdecl;
  end;
  TUITabBar = class(TOCGenericImport<UITabBarClass, UITabBar>) end;

  UITabBarDelegate = interface(IObjectiveC)
    ['{7D8C9E61-BA8F-430B-9682-D150C63341A6}']
    procedure tabBar(tabBar: UITabBar; willEndCustomizingItems: NSArray; changed: Boolean); overload; cdecl;
    procedure tabBar(tabBar: UITabBar; willBeginCustomizingItems: NSArray); overload; cdecl;
    procedure tabBar(tabBar: UITabBar; didSelectItem: UITabBarItem); overload; cdecl;
    [MethodName('tabBar:didBeginCustomizingItems:')]
    procedure tabBarDidBeginCustomizingItems(tabBar: UITabBar; didBeginCustomizingItems: NSArray); cdecl;
    [MethodName('tabBar:didEndCustomizingItems:changed:')]
    procedure tabBarDidEndCustomizingItems(tabBar: UITabBar; didEndCustomizingItems: NSArray; changed: Boolean); cdecl;
  end;

  UITabBarControllerClass = interface(UIViewControllerClass)
    ['{8FF10B1E-5561-47C5-8A48-E73C4CC34C9C}']
  end;

  UITabBarController = interface(UIViewController)
    ['{ECAE788F-486B-439C-BFC0-B755F888BF56}']
    function customizableViewControllers: NSArray; cdecl;
    function delegate: Pointer; cdecl;
    function moreNavigationController: UINavigationController; cdecl;
    function selectedIndex: NSUInteger; cdecl;
    function selectedViewController: UIViewController; cdecl;
    procedure setCustomizableViewControllers(customizableViewControllers: NSArray); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setSelectedIndex(selectedIndex: NSUInteger); cdecl;
    procedure setSelectedViewController(selectedViewController: UIViewController); cdecl;
    procedure setViewControllers(viewControllers: NSArray; animated: Boolean); overload; cdecl;
    procedure setViewControllers(viewControllers: NSArray); overload; cdecl;
    function tabBar: UITabBar; cdecl;
    function viewControllers: NSArray; cdecl;
  end;
  TUITabBarController = class(TOCGenericImport<UITabBarControllerClass, UITabBarController>) end;

  UITabBarControllerDelegate = interface(IObjectiveC)
    ['{FD0205D5-EC45-4BD7-A29D-EC28D0B3F177}']
    function tabBarController(tabBarController: UITabBarController; interactionControllerForAnimationController: Pointer): Pointer; overload; cdecl;
    procedure tabBarController(tabBarController: UITabBarController; willEndCustomizingViewControllers: NSArray; changed: Boolean); overload; cdecl;
    procedure tabBarController(tabBarController: UITabBarController; willBeginCustomizingViewControllers: NSArray); overload; cdecl;
    function tabBarController(tabBarController: UITabBarController; animationControllerForTransitionFromViewController: UIViewController;
      toViewController: UIViewController): Pointer; overload; cdecl;
    function tabBarController(tabBarController: UITabBarController; shouldSelectViewController: UIViewController): Boolean; overload; cdecl;
    [MethodName('tabBarController:didEndCustomizingViewControllers:changed:')]
    procedure tabBarControllerDidEndCustomizingViewControllers(tabBarController: UITabBarController; didEndCustomizingViewControllers: NSArray;
      changed: Boolean); cdecl;
    [MethodName('tabBarController:didSelectViewController:')]
    procedure tabBarControllerDidSelectViewController(tabBarController: UITabBarController; didSelectViewController: UIViewController); cdecl;
    function tabBarControllerPreferredInterfaceOrientationForPresentation(tabBarController: UITabBarController): UIInterfaceOrientation; cdecl;
    function tabBarControllerSupportedInterfaceOrientations(tabBarController: UITabBarController): UIInterfaceOrientationMask; cdecl;
  end;

  UITabBarItemClass = interface(UIBarItemClass)
    ['{C4A93B23-599E-4812-8CF3-B185F24165AB}']
  end;

  UITabBarItem = interface(UIBarItem)
    ['{6F1155FC-177E-4887-BB3E-886E399D5ED0}']
    function badgeColor: UIColor; cdecl;
    function badgeTextAttributesForState(state: UIControlState): NSDictionary; cdecl;
    function badgeValue: NSString; cdecl;
    function finishedSelectedImage: UIImage; cdecl; // API_DEPRECATED("", ios(5.0, 7.0))
    function finishedUnselectedImage: UIImage; cdecl; // API_DEPRECATED("", ios(5.0, 7.0))
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithTabBarSystemItem(systemItem: UITabBarSystemItem; tag: NSInteger): Pointer; cdecl;
    function initWithTitle(title: NSString; image: UIImage; tag: NSInteger): Pointer; overload; cdecl;
    function initWithTitle(title: NSString; image: UIImage; selectedImage: UIImage): Pointer; overload; cdecl;
    function scrollEdgeAppearance: UITabBarAppearance; cdecl;
    function selectedImage: UIImage; cdecl;
    procedure setBadgeColor(badgeColor: UIColor); cdecl;
    procedure setBadgeTextAttributes(textAttributes: NSDictionary; forState: UIControlState); cdecl;
    procedure setBadgeValue(badgeValue: NSString); cdecl;
    procedure setFinishedSelectedImage(selectedImage: UIImage; withFinishedUnselectedImage: UIImage); cdecl; // API_DEPRECATED("Use initWithTitle:image:selectedImage: or the image and selectedImage properties along with UIImageRenderingModeAlwaysOriginal", ios(5.0, 7.0))
    procedure setScrollEdgeAppearance(scrollEdgeAppearance: UITabBarAppearance); cdecl;
    procedure setSelectedImage(selectedImage: UIImage); cdecl;
    procedure setStandardAppearance(standardAppearance: UITabBarAppearance); cdecl;
    procedure setTitlePositionAdjustment(titlePositionAdjustment: UIOffset); cdecl;
    function standardAppearance: UITabBarAppearance; cdecl;
    function titlePositionAdjustment: UIOffset; cdecl;
  end;
  TUITabBarItem = class(TOCGenericImport<UITabBarItemClass, UITabBarItem>) end;

  UITableViewHeaderFooterViewClass = interface(UIViewClass)
    ['{1556238F-1ACD-4318-89C0-A749AC1C1CA9}']
  end;

  UITableViewHeaderFooterView = interface(UIView)
    ['{119E9BD6-668B-4CFB-B9F2-8FC44EDB3354}']
    function automaticallyUpdatesBackgroundConfiguration: Boolean; cdecl;
    function automaticallyUpdatesContentConfiguration: Boolean; cdecl;
    function backgroundConfiguration: UIBackgroundConfiguration; cdecl;
    function backgroundView: UIView; cdecl;
    function configurationState: UIViewConfigurationState; cdecl;
    function configurationUpdateHandler: UITableViewHeaderFooterViewConfigurationUpdateHandler; cdecl;
    function contentConfiguration: Pointer; cdecl;
    function contentView: UIView; cdecl;
    function defaultBackgroundConfiguration: UIBackgroundConfiguration; cdecl;
    function defaultContentConfiguration: UIListContentConfiguration; cdecl;
    function detailTextLabel: UILabel; cdecl; // API_DEPRECATED("Use UIListContentConfiguration instead, this property will be deprecated in a future release.", ios(6.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithReuseIdentifier(reuseIdentifier: NSString): Pointer; cdecl;
    procedure prepareForReuse; cdecl;
    function reuseIdentifier: NSString; cdecl;
    procedure setAutomaticallyUpdatesBackgroundConfiguration(automaticallyUpdatesBackgroundConfiguration: Boolean); cdecl;
    procedure setAutomaticallyUpdatesContentConfiguration(automaticallyUpdatesContentConfiguration: Boolean); cdecl;
    procedure setBackgroundConfiguration(backgroundConfiguration: UIBackgroundConfiguration); cdecl;
    procedure setBackgroundView(backgroundView: UIView); cdecl;
    procedure setConfigurationUpdateHandler(configurationUpdateHandler: UITableViewHeaderFooterViewConfigurationUpdateHandler); cdecl;
    procedure setContentConfiguration(contentConfiguration: Pointer); cdecl;
    procedure setNeedsUpdateConfiguration; cdecl;
    function textLabel: UILabel; cdecl; // API_DEPRECATED("Use UIListContentConfiguration instead, this property will be deprecated in a future release.", ios(6.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    procedure updateConfigurationUsingState(state: UIViewConfigurationState); cdecl;
  end;
  TUITableViewHeaderFooterView = class(TOCGenericImport<UITableViewHeaderFooterViewClass, UITableViewHeaderFooterView>) end;

  UITableViewControllerClass = interface(UIViewControllerClass)
    ['{18A0EFA8-5371-476C-A9CE-D1C10DFE0129}']
  end;

  UITableViewController = interface(UIViewController)
    ['{390D2E50-28AF-4474-93C2-6EEDEF3912F8}']
    function clearsSelectionOnViewWillAppear: Boolean; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    function initWithStyle(style: UITableViewStyle): Pointer; cdecl;
    function refreshControl: UIRefreshControl; cdecl;
    procedure setClearsSelectionOnViewWillAppear(clearsSelectionOnViewWillAppear: Boolean); cdecl;
    procedure setRefreshControl(refreshControl: UIRefreshControl); cdecl;
    procedure setTableView(tableView: UITableView); cdecl;
    function tableView: UITableView; cdecl;
  end;
  TUITableViewController = class(TOCGenericImport<UITableViewControllerClass, UITableViewController>) end;

  UITextCheckerClass = interface(NSObjectClass)
    ['{5F4693F3-3A68-4293-A904-56A063832828}']
    {class} function availableLanguages: NSArray; cdecl;
    {class} function hasLearnedWord(&word: NSString): Boolean; cdecl;
    {class} procedure learnWord(&word: NSString); cdecl;
    {class} procedure unlearnWord(&word: NSString); cdecl;
  end;

  UITextChecker = interface(NSObject)
    ['{31C29704-1656-4F85-87E3-AFE747BB0229}']
    function completionsForPartialWordRange(range: NSRange; inString: NSString; language: NSString): NSArray; cdecl;
    function guessesForWordRange(range: NSRange; inString: NSString; language: NSString): NSArray; cdecl;
    function ignoredWords: NSArray; cdecl;
    procedure ignoreWord(wordToIgnore: NSString); cdecl;
    function rangeOfMisspelledWordInString(stringToCheck: NSString; range: NSRange; startingAt: NSInteger; wrap: Boolean;
      language: NSString): NSRange; cdecl;
    procedure setIgnoredWords(ignoredWords: NSArray); cdecl;
  end;
  TUITextChecker = class(TOCGenericImport<UITextCheckerClass, UITextChecker>) end;

  UITextCursorDropPositionAnimatorClass = interface(NSObjectClass)
    ['{14FD1C31-A9AB-45A9-BF38-C89193267F35}']
  end;

  UITextCursorDropPositionAnimator = interface(NSObject)
    ['{F434B658-99E1-4A3A-BAAE-3D0CD97686AE}']
    procedure animateAlongsideChanges(animation: TUITextCursorDropPositionAnimatorBlockMethod1;
      completion: TUITextCursorDropPositionAnimatorBlockMethod1); cdecl;
    function cursorView: UIView; cdecl;
    function initWithTextCursorView(cursorView: UIView; textInput: UIView): Pointer; cdecl;
    procedure placeCursorAtPosition(position: UITextPosition; animated: Boolean); cdecl;
    procedure setCursorVisible(visible: Boolean; animated: Boolean); cdecl;
    function textInput: UIView; cdecl;
  end;
  TUITextCursorDropPositionAnimator = class(TOCGenericImport<UITextCursorDropPositionAnimatorClass, UITextCursorDropPositionAnimator>) end;

  UITextInputContextClass = interface(NSObjectClass)
    ['{517DBFA3-374A-4663-9ABE-C4589A4B5BA1}']
    {class} function current: UITextInputContext; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UITextInputContext = interface(NSObject)
    ['{53FCE5A4-AC12-480E-9E8A-A9D6A44D2938}']
    function isDictationInputExpected: Boolean; cdecl;
    function isHardwareKeyboardInputExpected: Boolean; cdecl;
    function isPencilInputExpected: Boolean; cdecl;
    procedure setDictationInputExpected(dictationInputExpected: Boolean); cdecl;
    procedure setHardwareKeyboardInputExpected(hardwareKeyboardInputExpected: Boolean); cdecl;
    procedure setPencilInputExpected(pencilInputExpected: Boolean); cdecl;
  end;
  TUITextInputContext = class(TOCGenericImport<UITextInputContextClass, UITextInputContext>) end;

  UITextSelectionHandleView = interface(IObjectiveC)
    ['{A92FF888-6021-4F7A-A6B2-2E760A0073B5}']
    function customShape: UIBezierPath; cdecl;
    function direction: NSDirectionalRectEdge; cdecl;
    function isVertical: Boolean; cdecl;
    function preferredFrameForRect(rect: CGRect): CGRect; cdecl;
    procedure setCustomShape(customShape: UIBezierPath); cdecl;
    procedure setDirection(direction: NSDirectionalRectEdge); cdecl;
  end;

  UITextSelectionHighlightView = interface(IObjectiveC)
    ['{345D781D-D92D-4982-B473-5888286DCA31}']
    function selectionRects: NSArray; cdecl;
    procedure setSelectionRects(selectionRects: NSArray); cdecl;
  end;

  UITextSelectionDisplayInteractionDelegate = interface(IObjectiveC)
    ['{2EF4CD38-E37F-450E-9010-975BA5E5D589}']
    function selectionContainerViewBelowTextForSelectionDisplayInteraction(interaction: UITextSelectionDisplayInteraction): UIView; cdecl;
  end;

  UITextSelectionDisplayInteractionClass = interface(NSObjectClass)
    ['{C9D21693-C13E-4AD5-A96E-E36C572F62E8}']
    {class} function new: Pointer; cdecl;
  end;

  UITextSelectionDisplayInteraction = interface(NSObject)
    ['{01A30639-0739-4832-BFC0-FE2742EF8913}']
    function cursorView: UIView; cdecl;
    function delegate: Pointer; cdecl;
    function handleViews: NSArray; cdecl;
    function highlightView: UIView; cdecl;
    function initWithTextInput(textInput: Pointer; delegate: Pointer): Pointer; cdecl;
    function isActivated: Boolean; cdecl;
    procedure layoutManagedSubviews; cdecl;
    procedure setActivated(activated: Boolean); cdecl;
    procedure setCursorView(cursorView: UIView); cdecl;
    procedure setHandleViews(handleViews: NSArray); cdecl;
    procedure setHighlightView(highlightView: UIView); cdecl;
    procedure setNeedsSelectionUpdate; cdecl;
    function textInput: Pointer; cdecl;
  end;
  TUITextSelectionDisplayInteraction = class(TOCGenericImport<UITextSelectionDisplayInteractionClass, UITextSelectionDisplayInteraction>) end;

  UITextSearchAggregator = interface(IObjectiveC)
    ['{73A3E533-9138-49BE-A5E0-A4743626C585}']
    function allFoundRanges: NSOrderedSet; cdecl;
    procedure finishedSearching; cdecl;
    procedure foundRange(range: UITextRange; forSearchString: NSString; inDocument: UITextSearchDocumentIdentifier); cdecl;
    procedure invalidate; cdecl;
    procedure invalidateFoundRange(range: UITextRange; inDocument: UITextSearchDocumentIdentifier); cdecl;
  end;

  UITextSearching = interface(IObjectiveC)
    ['{971AFCDD-A04C-4F3F-AFE2-BF4E9E82D914}']
    procedure clearAllDecoratedFoundText; cdecl;
    function compareFoundRange(foundRange: UITextRange; toRange: UITextRange; inDocument: UITextSearchDocumentIdentifier): NSComparisonResult; cdecl;
    function compareOrderFromDocument(fromDocument: UITextSearchDocumentIdentifier;
      toDocument: UITextSearchDocumentIdentifier): NSComparisonResult; cdecl;
    procedure decorateFoundTextRange(range: UITextRange; inDocument: UITextSearchDocumentIdentifier; usingStyle: UITextSearchFoundTextStyle); cdecl;
    procedure performTextSearchWithQueryString(&string: NSString; usingOptions: UITextSearchOptions; resultAggregator: Pointer); cdecl;
    procedure replaceAllOccurrencesOfQueryString(queryString: NSString; usingOptions: UITextSearchOptions; withText: NSString); cdecl;
    procedure replaceFoundTextInRange(range: UITextRange; inDocument: UITextSearchDocumentIdentifier; withText: NSString); cdecl;
    procedure scrollRangeToVisible(range: UITextRange; inDocument: UITextSearchDocumentIdentifier); cdecl;
    function selectedTextRange: UITextRange; cdecl;
    function selectedTextSearchDocument: UITextSearchDocumentIdentifier; cdecl;
    function shouldReplaceFoundTextInRange(range: UITextRange; inDocument: UITextSearchDocumentIdentifier; withText: NSString): Boolean; cdecl;
    function supportsTextReplacement: Boolean; cdecl;
    procedure willHighlightFoundTextRange(range: UITextRange; inDocument: UITextSearchDocumentIdentifier); cdecl;
  end;

  UITextSearchOptionsClass = interface(NSObjectClass)
    ['{63E88D03-F8B0-4EBE-BD0F-571A48DEEF99}']
  end;

  UITextSearchOptions = interface(NSObject)
    ['{DFEF75F4-F670-4D95-B87C-0A034F1D4BA7}']
    function stringCompareOptions: NSStringCompareOptions; cdecl;
    function wordMatchMethod: UITextSearchMatchMethod; cdecl;
  end;
  TUITextSearchOptions = class(TOCGenericImport<UITextSearchOptionsClass, UITextSearchOptions>) end;

  UIFindSessionClass = interface(NSObjectClass)
    ['{11E450FA-C139-4F21-AE77-9FF001D2590D}']
  end;

  UIFindSession = interface(NSObject)
    ['{26DEC54D-B768-4C0B-AC64-2BAE5F99876D}']
    function allowsReplacement: Boolean; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("supportsReplacement", ios(16.0, 16.0), visionos(1.0, 1.0))
    function allowsReplacementForCurrentlyHighlightedResult: Boolean; cdecl;
    function highlightedResultIndex: NSInteger; cdecl;
    procedure highlightNextResultInDirection(direction: UITextStorageDirection); cdecl;
    procedure invalidateFoundResults; cdecl;
    procedure performSearchWithQuery(query: NSString; options: UITextSearchOptions); cdecl;
    procedure performSingleReplacementWithSearchQuery(searchQuery: NSString; replacementString: NSString; options: UITextSearchOptions); cdecl;
    procedure replaceAllInstancesOfSearchQuery(searchQuery: NSString; withReplacementString: NSString; options: UITextSearchOptions); cdecl;
    function resultCount: NSInteger; cdecl;
    function searchResultDisplayStyle: UIFindSessionSearchResultDisplayStyle; cdecl;
    procedure setSearchResultDisplayStyle(searchResultDisplayStyle: UIFindSessionSearchResultDisplayStyle); cdecl;
    function supportsReplacement: Boolean; cdecl;
  end;
  TUIFindSession = class(TOCGenericImport<UIFindSessionClass, UIFindSession>) end;

  UITextSearchingFindSessionClass = interface(UIFindSessionClass)
    ['{27497943-1527-40AD-B018-F4B0F8C40915}']
    {class} function new: Pointer; cdecl;
  end;

  UITextSearchingFindSession = interface(UIFindSession)
    ['{22998FF2-3427-480C-9876-C9A37F9AB396}']
    function initWithSearchableObject(searchableObject: Pointer): Pointer; cdecl;
    function searchableObject: Pointer; cdecl;
  end;
  TUITextSearchingFindSession = class(TOCGenericImport<UITextSearchingFindSessionClass, UITextSearchingFindSession>) end;

  UIFindInteractionDelegate = interface(IObjectiveC)
    ['{897BC775-ECB7-46F5-8369-A5A0F0A1FE15}']
    procedure findInteraction(interaction: UIFindInteraction; didBeginFindSession: UIFindSession); overload; cdecl;
    function findInteraction(interaction: UIFindInteraction; sessionForView: UIView): UIFindSession; overload; cdecl;
    [MethodName('findInteraction:didEndFindSession:')]
    procedure findInteractionDidEndFindSession(interaction: UIFindInteraction; didEndFindSession: UIFindSession); cdecl;
  end;

  UIFindInteractionClass = interface(NSObjectClass)
    ['{E81C3622-ADB4-45E4-A7B2-BD4C2B0454BA}']
    {class} function new: Pointer; cdecl;
  end;

  UIFindInteraction = interface(NSObject)
    ['{6AC63A74-66C2-46AE-AF16-A9DBF9452AB4}']
    function activeFindSession: UIFindSession; cdecl;
    function delegate: Pointer; cdecl;
    procedure dismissFindNavigator; cdecl;
    procedure findNext; cdecl;
    procedure findPrevious; cdecl;
    function initWithSessionDelegate(sessionDelegate: Pointer): Pointer; cdecl;
    function isFindNavigatorVisible: Boolean; cdecl;
    function optionsMenuProvider: TUIFindInteractionBlockMethod1; cdecl;
    procedure presentFindNavigatorShowingReplace(showingReplace: Boolean); cdecl;
    function replacementText: NSString; cdecl;
    function searchText: NSString; cdecl;
    procedure setOptionsMenuProvider(optionsMenuProvider: TUIFindInteractionBlockMethod2); cdecl;
    procedure setReplacementText(replacementText: NSString); cdecl;
    procedure setSearchText(searchText: NSString); cdecl;
    procedure updateResultCount; cdecl;
  end;
  TUIFindInteraction = class(TOCGenericImport<UIFindInteractionClass, UIFindInteraction>) end;

  UITextViewDelegate = interface(IObjectiveC)
    ['{E75FAF98-94CB-42A4-A0D1-90540DE251BA}']
    procedure textView(textView: UITextView; textItemMenuWillDisplayForTextItem: UITextItem; animator: Pointer); overload; cdecl;
    function textView(textView: UITextView; menuConfigurationForTextItem: UITextItem;
      defaultMenu: UIMenu): UITextItemMenuConfiguration; overload; cdecl;
    function textView(textView: UITextView; primaryActionForTextItem: UITextItem; defaultAction: UIAction): UIAction; overload; cdecl;
    procedure textView(textView: UITextView; willPresentEditMenuWithAnimator: Pointer); overload; cdecl;
    function textView(textView: UITextView; shouldInteractWithTextAttachment: NSTextAttachment; inRange: NSRange): Boolean; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("textView:shouldInteractWithTextAttachment:inRange:interaction:", ios(7.0, 10.0))
    function textView(textView: UITextView; shouldInteractWithURL: NSURL; inRange: NSRange): Boolean; overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("textView:shouldInteractWithURL:inRange:interaction:", ios(7.0, 10.0))
    function textView(textView: UITextView; shouldInteractWithTextAttachment: NSTextAttachment; inRange: NSRange;
      interaction: UITextItemInteraction): Boolean; overload; cdecl; // API_DEPRECATED("Replaced by primaryActionForTextItem: and menuConfigurationForTextItem: for additional customization options.", ios(10.0, 17.0), visionos(1.0, 1.0))
    function textView(textView: UITextView; shouldInteractWithURL: NSURL; inRange: NSRange;
      interaction: UITextItemInteraction): Boolean; overload; cdecl; // API_DEPRECATED("Replaced by primaryActionForTextItem: and menuConfigurationForTextItem: for additional customization options.", ios(10.0, 17.0), visionos(1.0, 1.0))
    function textView(textView: UITextView; shouldChangeTextInRange: NSRange; replacementText: NSString): Boolean; overload; cdecl;
    function textView(textView: UITextView; editMenuForTextInRange: NSRange; suggestedActions: NSArray): UIMenu; overload; cdecl;
    procedure textViewDidBeginEditing(textView: UITextView); cdecl;
    procedure textViewDidChange(textView: UITextView); cdecl;
    procedure textViewDidChangeSelection(textView: UITextView); cdecl;
    procedure textViewDidEndEditing(textView: UITextView); cdecl;
    function textViewShouldBeginEditing(textView: UITextView): Boolean; cdecl;
    function textViewShouldEndEditing(textView: UITextView): Boolean; cdecl;
    [MethodName('textView:textItemMenuWillEndForTextItem:animator:')]
    procedure textViewTextItemMenuWillEndForTextItem(textView: UITextView; textItemMenuWillEndForTextItem: UITextItem; animator: Pointer); cdecl;
    [MethodName('textView:willDismissEditMenuWithAnimator:')]
    procedure textViewWillDismissEditMenuWithAnimator(textView: UITextView; willDismissEditMenuWithAnimator: Pointer); cdecl;
  end;

  UITextViewClass = interface(UIScrollViewClass)
    ['{3721DE9C-4C3E-40AE-B886-AD8D475B2A6F}']
    {class} function textViewUsingTextLayoutManager(usingTextLayoutManager: Boolean): Pointer; cdecl;
  end;

  UITextView = interface(UIScrollView)
    ['{9FCF27DD-9615-47F8-BF3B-9224CAA11A92}']
    function allowsEditingTextAttributes: Boolean; cdecl;
    function attributedText: NSAttributedString; cdecl;
    function borderStyle: UITextViewBorderStyle; cdecl;
    function clearsOnInsertion: Boolean; cdecl;
    function dataDetectorTypes: UIDataDetectorTypes; cdecl;
    function delegate: Pointer; cdecl;
    function findInteraction: UIFindInteraction; cdecl;
    function font: UIFont; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect; textContainer: NSTextContainer): Pointer; cdecl;
    function inputAccessoryView: UIView; cdecl;
    function inputView: UIView; cdecl;
    function interactionState: Pointer; cdecl;
    function isEditable: Boolean; cdecl;
    function isFindInteractionEnabled: Boolean; cdecl;
    function isSelectable: Boolean; cdecl;
    function layoutManager: NSLayoutManager; cdecl;
    function linkTextAttributes: NSDictionary; cdecl;
    procedure scrollRangeToVisible(range: NSRange); cdecl;
    function selectedRange: NSRange; cdecl;
    procedure setAllowsEditingTextAttributes(allowsEditingTextAttributes: Boolean); cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    procedure setBorderStyle(borderStyle: UITextViewBorderStyle); cdecl;
    procedure setClearsOnInsertion(clearsOnInsertion: Boolean); cdecl;
    procedure setDataDetectorTypes(dataDetectorTypes: UIDataDetectorTypes); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setEditable(editable: Boolean); cdecl;
    procedure setFindInteractionEnabled(findInteractionEnabled: Boolean); cdecl;
    procedure setFont(font: UIFont); cdecl;
    procedure setInputAccessoryView(inputAccessoryView: UIView); cdecl;
    procedure setInputView(inputView: UIView); cdecl;
    procedure setInteractionState(interactionState: Pointer); cdecl;
    procedure setLinkTextAttributes(linkTextAttributes: NSDictionary); cdecl;
    procedure setSelectable(selectable: Boolean); cdecl;
    procedure setSelectedRange(selectedRange: NSRange); cdecl;
    procedure setText(text: NSString); cdecl;
    procedure setTextAlignment(textAlignment: NSTextAlignment); cdecl;
    procedure setTextColor(textColor: UIColor); cdecl;
    procedure setTextContainerInset(textContainerInset: UIEdgeInsets); cdecl;
    procedure setTypingAttributes(typingAttributes: NSDictionary); cdecl;
    procedure setUsesStandardTextScaling(usesStandardTextScaling: Boolean); cdecl;
    function text: NSString; cdecl;
    function textAlignment: NSTextAlignment; cdecl;
    function textColor: UIColor; cdecl;
    function textContainer: NSTextContainer; cdecl;
    function textContainerInset: UIEdgeInsets; cdecl;
    function textLayoutManager: NSTextLayoutManager; cdecl;
    function textStorage: NSTextStorage; cdecl;
    function typingAttributes: NSDictionary; cdecl;
    function usesStandardTextScaling: Boolean; cdecl;
  end;
  TUITextView = class(TOCGenericImport<UITextViewClass, UITextView>) end;

  UIToolbarClass = interface(UIViewClass)
    ['{569BFFEF-A55E-4F71-BAAF-50A455DF48D0}']
  end;

  UIToolbar = interface(UIView)
    ['{9624C4C8-A723-4FE7-84F0-CDB1ABAB5BFF}']
    function backgroundImageForToolbarPosition(topOrBottom: UIBarPosition; barMetrics: UIBarMetrics): UIImage; cdecl;
    function barStyle: UIBarStyle; cdecl;
    function barTintColor: UIColor; cdecl;
    function compactAppearance: UIToolbarAppearance; cdecl;
    function compactScrollEdgeAppearance: UIToolbarAppearance; cdecl;
    function delegate: Pointer; cdecl;
    function isTranslucent: Boolean; cdecl;
    function items: NSArray; cdecl;
    function scrollEdgeAppearance: UIToolbarAppearance; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage; forToolbarPosition: UIBarPosition; barMetrics: UIBarMetrics); cdecl;
    procedure setBarStyle(barStyle: UIBarStyle); cdecl;
    procedure setBarTintColor(barTintColor: UIColor); cdecl;
    procedure setCompactAppearance(compactAppearance: UIToolbarAppearance); cdecl;
    procedure setCompactScrollEdgeAppearance(compactScrollEdgeAppearance: UIToolbarAppearance); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setItems(items: NSArray); overload; cdecl;
    procedure setItems(items: NSArray; animated: Boolean); overload; cdecl;
    procedure setScrollEdgeAppearance(scrollEdgeAppearance: UIToolbarAppearance); cdecl;
    procedure setShadowImage(shadowImage: UIImage; forToolbarPosition: UIBarPosition); cdecl;
    procedure setStandardAppearance(standardAppearance: UIToolbarAppearance); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    procedure setTranslucent(translucent: Boolean); cdecl;
    function shadowImageForToolbarPosition(topOrBottom: UIBarPosition): UIImage; cdecl;
    function standardAppearance: UIToolbarAppearance; cdecl;
    function tintColor: UIColor; cdecl;
  end;
  TUIToolbar = class(TOCGenericImport<UIToolbarClass, UIToolbar>) end;

  UIToolbarDelegate = interface(IObjectiveC)
    ['{0AAF8AE1-CFB8-4D04-9ED2-B22847DFC6B7}']
  end;

  UIVideoEditorControllerClass = interface(UINavigationControllerClass)
    ['{A49B974B-B128-4148-B6A6-D8C7E42B8B4A}']
    {class} function canEditVideoAtPath(videoPath: NSString): Boolean; cdecl;
  end;

  UIVideoEditorController = interface(UINavigationController)
    ['{19670BFB-4471-4FF7-858E-B5DBDABEF3C9}']
    function delegate: Pointer; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setVideoMaximumDuration(videoMaximumDuration: NSTimeInterval); cdecl;
    procedure setVideoPath(videoPath: NSString); cdecl;
    procedure setVideoQuality(videoQuality: UIImagePickerControllerQualityType); cdecl;
    function videoMaximumDuration: NSTimeInterval; cdecl;
    function videoPath: NSString; cdecl;
    function videoQuality: UIImagePickerControllerQualityType; cdecl;
  end;
  TUIVideoEditorController = class(TOCGenericImport<UIVideoEditorControllerClass, UIVideoEditorController>) end;

  UIVideoEditorControllerDelegate = interface(IObjectiveC)
    ['{0E9BAB6E-AD7C-4FF2-9BFA-3126B68A48D3}']
    procedure videoEditorController(editor: UIVideoEditorController; didFailWithError: NSError); overload; cdecl;
    procedure videoEditorController(editor: UIVideoEditorController; didSaveEditedVideoToPath: NSString); overload; cdecl;
    procedure videoEditorControllerDidCancel(editor: UIVideoEditorController); cdecl;
  end;

  UIWebViewClass = interface(UIViewClass)
    ['{D8B03F82-9A55-41D6-9CA1-A50550B2B3FA}']
  end;

  UIWebView = interface(UIView)
    ['{B298A715-E7A5-465E-B945-1AB66C1DC340}']
    function allowsInlineMediaPlayback: Boolean; cdecl;
    function allowsLinkPreview: Boolean; cdecl;
    function allowsPictureInPictureMediaPlayback: Boolean; cdecl;
    function canGoBack: Boolean; cdecl;
    function canGoForward: Boolean; cdecl;
    function dataDetectorTypes: UIDataDetectorTypes; cdecl;
    function delegate: Pointer; cdecl;
    function detectsPhoneNumbers: Boolean; cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    function gapBetweenPages: CGFloat; cdecl;
    procedure goBack; cdecl;
    procedure goForward; cdecl;
    function isLoading: Boolean; cdecl;
    function keyboardDisplayRequiresUserAction: Boolean; cdecl;
    procedure loadData(data: NSData; MIMEType: NSString; textEncodingName: NSString; baseURL: NSURL); cdecl;
    procedure loadHTMLString(&string: NSString; baseURL: NSURL); cdecl;
    procedure loadRequest(request: NSURLRequest); cdecl;
    function mediaPlaybackAllowsAirPlay: Boolean; cdecl;
    function mediaPlaybackRequiresUserAction: Boolean; cdecl;
    function pageCount: NSUInteger; cdecl;
    function pageLength: CGFloat; cdecl;
    function paginationBreakingMode: UIWebPaginationBreakingMode; cdecl;
    function paginationMode: UIWebPaginationMode; cdecl;
    procedure reload; cdecl;
    function request: NSURLRequest; cdecl;
    function scalesPageToFit: Boolean; cdecl;
    function scrollView: UIScrollView; cdecl;
    procedure setAllowsInlineMediaPlayback(allowsInlineMediaPlayback: Boolean); cdecl;
    procedure setAllowsLinkPreview(allowsLinkPreview: Boolean); cdecl;
    procedure setAllowsPictureInPictureMediaPlayback(allowsPictureInPictureMediaPlayback: Boolean); cdecl;
    procedure setDataDetectorTypes(dataDetectorTypes: UIDataDetectorTypes); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDetectsPhoneNumbers(detectsPhoneNumbers: Boolean); cdecl; // API_DEPRECATED("", ios(2.0, 3.0))
    procedure setGapBetweenPages(gapBetweenPages: CGFloat); cdecl;
    procedure setKeyboardDisplayRequiresUserAction(keyboardDisplayRequiresUserAction: Boolean); cdecl;
    procedure setMediaPlaybackAllowsAirPlay(mediaPlaybackAllowsAirPlay: Boolean); cdecl;
    procedure setMediaPlaybackRequiresUserAction(mediaPlaybackRequiresUserAction: Boolean); cdecl;
    procedure setPageLength(pageLength: CGFloat); cdecl;
    procedure setPaginationBreakingMode(paginationBreakingMode: UIWebPaginationBreakingMode); cdecl;
    procedure setPaginationMode(paginationMode: UIWebPaginationMode); cdecl;
    procedure setScalesPageToFit(scalesPageToFit: Boolean); cdecl;
    procedure setSuppressesIncrementalRendering(suppressesIncrementalRendering: Boolean); cdecl;
    procedure stopLoading; cdecl;
    function stringByEvaluatingJavaScriptFromString(script: NSString): NSString; cdecl;
    function suppressesIncrementalRendering: Boolean; cdecl;
  end;
  TUIWebView = class(TOCGenericImport<UIWebViewClass, UIWebView>) end;

  UIWebViewDelegate = interface(IObjectiveC)
    ['{EA3250E5-F2E8-4BE1-B236-71082674B0D4}']
    procedure webView(webView: UIWebView; didFailLoadWithError: NSError); overload; cdecl; // API_DEPRECATED("No longer supported.", ios(2.0, 12.0))
    function webView(webView: UIWebView; shouldStartLoadWithRequest: NSURLRequest; navigationType: UIWebViewNavigationType): Boolean; overload; cdecl; // API_DEPRECATED("No longer supported.", ios(2.0, 12.0))
    procedure webViewDidFinishLoad(webView: UIWebView); cdecl; // API_DEPRECATED("No longer supported.", ios(2.0, 12.0))
    procedure webViewDidStartLoad(webView: UIWebView); cdecl; // API_DEPRECATED("No longer supported.", ios(2.0, 12.0))
  end;

  UIWindowClass = interface(UIViewClass)
    ['{C736B32D-20D2-4784-BA7C-55DAD852BFD7}']
  end;

  UIWindow = interface(UIView)
    ['{7F861CD5-3329-49B3-9CDE-C5F028E935D5}']
    procedure becomeKeyWindow; cdecl;
    function canBecomeKeyWindow: Boolean; cdecl;
    function canResizeToFitContent: Boolean; cdecl;
    function convertPoint(point: CGPoint; toWindow: UIWindow): CGPoint; cdecl;
    [MethodName('convertPoint:fromWindow:')]
    function convertPointFromWindow(point: CGPoint; fromWindow: UIWindow): CGPoint; cdecl;
    function convertRect(rect: CGRect; toWindow: UIWindow): CGRect; cdecl;
    [MethodName('convertRect:fromWindow:')]
    function convertRectFromWindow(rect: CGRect; fromWindow: UIWindow): CGRect; cdecl;
    function initWithWindowScene(windowScene: UIWindowScene): Pointer; cdecl;
    function isKeyWindow: Boolean; cdecl;
    procedure makeKeyAndVisible; cdecl;
    procedure makeKeyWindow; cdecl;
    procedure resignKeyWindow; cdecl;
    function rootViewController: UIViewController; cdecl;
    function safeAreaAspectFitLayoutGuide: UILayoutGuide; cdecl;
    function screen: UIScreen; cdecl;
    procedure sendEvent(event: UIEvent); cdecl;
    procedure setCanResizeToFitContent(canResizeToFitContent: Boolean); cdecl;
    procedure setRootViewController(rootViewController: UIViewController); cdecl;
    procedure setScreen(screen: UIScreen); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("setWindowScene:", ios(3.2, 13.0))
    procedure setWindowLevel(windowLevel: UIWindowLevel); cdecl;
    procedure setWindowScene(windowScene: UIWindowScene); cdecl;
    function windowLevel: UIWindowLevel; cdecl;
    function windowScene: UIWindowScene; cdecl;
  end;
  TUIWindow = class(TOCGenericImport<UIWindowClass, UIWindow>) end;

  UILayoutGuideAspectFitting = interface(IObjectiveC)
    ['{7A4034BB-F6D2-475D-98BE-520AF2CAA09C}']
    function aspectRatio: CGFloat; cdecl;
    procedure setAspectRatio(aspectRatio: CGFloat); cdecl;
  end;

  UIDragItemClass = interface(NSObjectClass)
    ['{D830CA00-B174-4398-83D4-816477426C57}']
    {class} function new: Pointer; cdecl;
  end;

  UIDragItem = interface(NSObject)
    ['{7D208AD5-72F2-47D5-929A-0EA5CDACBF54}']
    function initWithItemProvider(itemProvider: NSItemProvider): Pointer; cdecl;
    function itemProvider: NSItemProvider; cdecl;
    function localObject: Pointer; cdecl;
    function previewProvider: TUIDragItemBlockMethod1; cdecl;
    procedure setLocalObject(localObject: Pointer); cdecl;
    procedure setNeedsDropPreviewUpdate; cdecl;
    procedure setPreviewProvider(previewProvider: TUIDragItemBlockMethod2); cdecl;
  end;
  TUIDragItem = class(TOCGenericImport<UIDragItemClass, UIDragItem>) end;

  UIDragPreviewClass = interface(NSObjectClass)
    ['{8AB1985B-0399-4E3D-93E3-168EF08A2E9C}']
    {class} function new: Pointer; cdecl;
    {class} function previewForURL(url: NSURL; title: NSString): Pointer; overload; cdecl;
    {class} function previewForURL(url: NSURL): Pointer; overload; cdecl;
  end;

  UIDragPreview = interface(NSObject)
    ['{1CFC6248-CF9C-405C-9F28-0C62AC1762B2}']
    function initWithView(view: UIView): Pointer; overload; cdecl;
    function initWithView(view: UIView; parameters: UIDragPreviewParameters): Pointer; overload; cdecl;
    function parameters: UIDragPreviewParameters; cdecl;
    function view: UIView; cdecl;
  end;
  TUIDragPreview = class(TOCGenericImport<UIDragPreviewClass, UIDragPreview>) end;

  UIPreviewParametersClass = interface(NSObjectClass)
    ['{0FBF4C3B-DE22-44C6-B148-14821E0C90B6}']
  end;

  UIPreviewParameters = interface(NSObject)
    ['{CFC3A870-A6C7-4888-BDC8-6463FF2D1A3F}']
    function backgroundColor: UIColor; cdecl;
    function initWithTextLineRects(textLineRects: NSArray): Pointer; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    procedure setShadowPath(shadowPath: UIBezierPath); cdecl;
    procedure setVisiblePath(visiblePath: UIBezierPath); cdecl;
    function shadowPath: UIBezierPath; cdecl;
    function visiblePath: UIBezierPath; cdecl;
  end;
  TUIPreviewParameters = class(TOCGenericImport<UIPreviewParametersClass, UIPreviewParameters>) end;

  UIDragPreviewParametersClass = interface(UIPreviewParametersClass)
    ['{E247E86C-9C4F-48C9-812A-347BF4FB9AA2}']
  end;

  UIDragPreviewParameters = interface(UIPreviewParameters)
    ['{AA075616-69F5-42E6-A4AE-5FD3C374DEEB}']
  end;
  TUIDragPreviewParameters = class(TOCGenericImport<UIDragPreviewParametersClass, UIDragPreviewParameters>) end;

  UIDragDropSession = interface(IObjectiveC)
    ['{8AF422DC-6365-4D0A-87F8-DE7D6607380C}']
    function allowsMoveOperation: Boolean; cdecl;
    function canLoadObjectsOfClass(aClass: Pointer): Boolean; cdecl;
    function hasItemsConformingToTypeIdentifiers(typeIdentifiers: NSArray): Boolean; cdecl;
    function isRestrictedToDraggingApplication: Boolean; cdecl;
    function items: NSArray; cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
  end;

  UIDragSession = interface(IObjectiveC)
    ['{54C410E2-1463-4CCE-ADAB-4162B5DBAC16}']
    function localContext: Pointer; cdecl;
    procedure setLocalContext(localContext: Pointer); cdecl;
  end;

  UIDropSession = interface(IObjectiveC)
    ['{6B5EF33C-0932-47DF-902A-89239A279ED2}']
    function loadObjectsOfClass(aClass: Pointer; completion: Pointer): NSProgress; cdecl;
    function localDragSession: Pointer; cdecl;
    function progressIndicatorStyle: UIDropSessionProgressIndicatorStyle; cdecl;
    procedure setProgressIndicatorStyle(progressIndicatorStyle: UIDropSessionProgressIndicatorStyle); cdecl;
  end;

  UIPreviewTargetClass = interface(NSObjectClass)
    ['{8BC398FE-773C-4A37-88FB-C467CA6A1FB8}']
    {class} function new: Pointer; cdecl;
  end;

  UIPreviewTarget = interface(NSObject)
    ['{06D73D79-C6A2-49AB-9747-24485DC6F498}']
    function center: CGPoint; cdecl;
    function container: UIView; cdecl;
    function initWithContainer(container: UIView; center: CGPoint; transform: CGAffineTransform): Pointer; overload; cdecl;
    function initWithContainer(container: UIView; center: CGPoint): Pointer; overload; cdecl;
    function transform: CGAffineTransform; cdecl;
  end;
  TUIPreviewTarget = class(TOCGenericImport<UIPreviewTargetClass, UIPreviewTarget>) end;

  UITargetedPreviewClass = interface(NSObjectClass)
    ['{6FFCEB33-3094-4D38-A2F0-0A7359FBAE09}']
    {class} function new: Pointer; cdecl;
  end;

  UITargetedPreview = interface(NSObject)
    ['{95D364B4-4B14-42C4-8C64-4CF7CBD63321}']
    function initWithView(view: UIView): Pointer; overload; cdecl;
    function initWithView(view: UIView; parameters: UIPreviewParameters): Pointer; overload; cdecl;
    function initWithView(view: UIView; parameters: UIPreviewParameters; target: UIPreviewTarget): Pointer; overload; cdecl;
    function parameters: UIPreviewParameters; cdecl;
    function retargetedPreviewWithTarget(newTarget: UIPreviewTarget): UITargetedPreview; cdecl;
    function size: CGSize; cdecl;
    function target: UIPreviewTarget; cdecl;
    function view: UIView; cdecl;
  end;
  TUITargetedPreview = class(TOCGenericImport<UITargetedPreviewClass, UITargetedPreview>) end;

  UIDragPreviewTargetClass = interface(UIPreviewTargetClass)
    ['{492816AE-60C7-4215-BDE7-1586F33EADDC}']
  end;

  UIDragPreviewTarget = interface(UIPreviewTarget)
    ['{6C4EC1CC-DA02-4E3E-8AA4-2DC920D244D3}']
  end;
  TUIDragPreviewTarget = class(TOCGenericImport<UIDragPreviewTargetClass, UIDragPreviewTarget>) end;

  UITargetedDragPreviewClass = interface(UITargetedPreviewClass)
    ['{5F06F750-BD44-46EA-B21A-CEB451AC1F03}']
    {class} function previewForURL(url: NSURL; target: UIDragPreviewTarget): Pointer; overload; cdecl;
    {class} function previewForURL(url: NSURL; title: NSString; target: UIDragPreviewTarget): Pointer; overload; cdecl;
  end;

  UITargetedDragPreview = interface(UITargetedPreview)
    ['{E233CB01-869F-4C0C-8A01-84E2159975CA}']
    function retargetedPreviewWithTarget(newTarget: UIDragPreviewTarget): UITargetedDragPreview; cdecl;
  end;
  TUITargetedDragPreview = class(TOCGenericImport<UITargetedDragPreviewClass, UITargetedDragPreview>) end;

  UISpringLoadedInteractionClass = interface(NSObjectClass)
    ['{2E9CA6EF-FADA-49F2-AE1F-8D9C4CBC8526}']
    {class} function new: Pointer; cdecl;
  end;

  UISpringLoadedInteraction = interface(NSObject)
    ['{BDDC024A-6ACE-4EE8-BD95-FD2AA87E33EE}']
    function initWithActivationHandler(handler: TUISpringLoadedInteractionBlockMethod1): Pointer; cdecl;
    function initWithInteractionBehavior(interactionBehavior: Pointer; interactionEffect: Pointer;
      activationHandler: TUISpringLoadedInteractionBlockMethod1): Pointer; cdecl;
    function interactionBehavior: Pointer; cdecl;
    function interactionEffect: Pointer; cdecl;
  end;
  TUISpringLoadedInteraction = class(TOCGenericImport<UISpringLoadedInteractionClass, UISpringLoadedInteraction>) end;

  UISpringLoadedInteractionBehavior = interface(IObjectiveC)
    ['{85840972-F1F1-434A-91F1-316430719915}']
    procedure interactionDidFinish(interaction: UISpringLoadedInteraction); cdecl;
    function shouldAllowInteraction(interaction: UISpringLoadedInteraction; withContext: Pointer): Boolean; cdecl;
  end;

  UISpringLoadedInteractionEffect = interface(IObjectiveC)
    ['{D463A9AC-8BC7-48C6-AFE1-B7B40D5D6082}']
    procedure interaction(interaction: UISpringLoadedInteraction; didChangeWithContext: Pointer); cdecl;
  end;

  UISpringLoadedInteractionContext = interface(IObjectiveC)
    ['{85B1DC22-942B-4B08-895C-CCAC4C496500}']
    function locationInView(view: UIView): CGPoint; cdecl;
    procedure setTargetItem(targetItem: Pointer); cdecl;
    procedure setTargetView(targetView: UIView); cdecl;
    function state: UISpringLoadedInteractionEffectState; cdecl;
    function targetItem: Pointer; cdecl;
    function targetView: UIView; cdecl;
  end;

  UIBarAppearanceClass = interface(NSObjectClass)
    ['{DCDFCB6A-3FF8-4E27-93C0-EE7460625C5C}']
  end;

  UIBarAppearance = interface(NSObject)
    ['{5E8ECD0A-035F-46A8-A304-2B3FBEE3C5DD}']
    function backgroundColor: UIColor; cdecl;
    function backgroundEffect: UIBlurEffect; cdecl;
    function backgroundImage: UIImage; cdecl;
    function backgroundImageContentMode: UIViewContentMode; cdecl;
    procedure configureWithDefaultBackground; cdecl;
    procedure configureWithOpaqueBackground; cdecl;
    procedure configureWithTransparentBackground; cdecl;
    function copy: Pointer; cdecl;
    function idiom: UIUserInterfaceIdiom; cdecl;
    function initWithBarAppearance(barAppearance: UIBarAppearance): Pointer; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithIdiom(idiom: UIUserInterfaceIdiom): Pointer; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    procedure setBackgroundEffect(backgroundEffect: UIBlurEffect); cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage); cdecl;
    procedure setBackgroundImageContentMode(backgroundImageContentMode: UIViewContentMode); cdecl;
    procedure setShadowColor(shadowColor: UIColor); cdecl;
    procedure setShadowImage(shadowImage: UIImage); cdecl;
    function shadowColor: UIColor; cdecl;
    function shadowImage: UIImage; cdecl;
  end;
  TUIBarAppearance = class(TOCGenericImport<UIBarAppearanceClass, UIBarAppearance>) end;

  UIBarButtonItemStateAppearanceClass = interface(NSObjectClass)
    ['{06974438-5031-47B3-853C-3C611E245C08}']
    {class} function new: Pointer; cdecl;
  end;

  UIBarButtonItemStateAppearance = interface(NSObject)
    ['{043FF8B9-2DAB-488E-A90B-9D8252E95049}']
    function backgroundImage: UIImage; cdecl;
    function backgroundImagePositionAdjustment: UIOffset; cdecl;
    procedure setBackgroundImage(backgroundImage: UIImage); cdecl;
    procedure setBackgroundImagePositionAdjustment(backgroundImagePositionAdjustment: UIOffset); cdecl;
    procedure setTitlePositionAdjustment(titlePositionAdjustment: UIOffset); cdecl;
    procedure setTitleTextAttributes(titleTextAttributes: NSDictionary); cdecl;
    function titlePositionAdjustment: UIOffset; cdecl;
    function titleTextAttributes: NSDictionary; cdecl;
  end;
  TUIBarButtonItemStateAppearance = class(TOCGenericImport<UIBarButtonItemStateAppearanceClass, UIBarButtonItemStateAppearance>) end;

  UIBarButtonItemAppearanceClass = interface(NSObjectClass)
    ['{DE62ACF0-8DA9-407F-A0C5-2BEE6E4D6F1D}']
  end;

  UIBarButtonItemAppearance = interface(NSObject)
    ['{899712C6-C41D-4B13-8CF0-CB21CE676D4F}']
    procedure configureWithDefaultForStyle(style: UIBarButtonItemStyle); cdecl;
    function copy: Pointer; cdecl;
    function disabled: UIBarButtonItemStateAppearance; cdecl;
    function focused: UIBarButtonItemStateAppearance; cdecl;
    function highlighted: UIBarButtonItemStateAppearance; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithStyle(style: UIBarButtonItemStyle): Pointer; cdecl;
    function normal: UIBarButtonItemStateAppearance; cdecl;
  end;
  TUIBarButtonItemAppearance = class(TOCGenericImport<UIBarButtonItemAppearanceClass, UIBarButtonItemAppearance>) end;

  UINavigationBarAppearanceClass = interface(UIBarAppearanceClass)
    ['{A26686C8-7D95-4C57-B091-45B8A0E5D01E}']
  end;

  UINavigationBarAppearance = interface(UIBarAppearance)
    ['{187BE4F4-734E-4EEA-9414-0D17A858BC34}']
    function backButtonAppearance: UIBarButtonItemAppearance; cdecl;
    function backIndicatorImage: UIImage; cdecl;
    function backIndicatorTransitionMaskImage: UIImage; cdecl;
    function buttonAppearance: UIBarButtonItemAppearance; cdecl;
    function doneButtonAppearance: UIBarButtonItemAppearance; cdecl;
    function largeTitleTextAttributes: NSDictionary; cdecl;
    procedure setBackButtonAppearance(backButtonAppearance: UIBarButtonItemAppearance); cdecl;
    procedure setBackIndicatorImage(backIndicatorImage: UIImage; transitionMaskImage: UIImage); cdecl;
    procedure setButtonAppearance(buttonAppearance: UIBarButtonItemAppearance); cdecl;
    procedure setDoneButtonAppearance(doneButtonAppearance: UIBarButtonItemAppearance); cdecl;
    procedure setLargeTitleTextAttributes(largeTitleTextAttributes: NSDictionary); cdecl;
    procedure setTitlePositionAdjustment(titlePositionAdjustment: UIOffset); cdecl;
    procedure setTitleTextAttributes(titleTextAttributes: NSDictionary); cdecl;
    function titlePositionAdjustment: UIOffset; cdecl;
    function titleTextAttributes: NSDictionary; cdecl;
  end;
  TUINavigationBarAppearance = class(TOCGenericImport<UINavigationBarAppearanceClass, UINavigationBarAppearance>) end;

  UIToolbarAppearanceClass = interface(UIBarAppearanceClass)
    ['{8C38BE0E-6ED9-4194-9F63-51362B0ACBE2}']
  end;

  UIToolbarAppearance = interface(UIBarAppearance)
    ['{57018E96-5210-4ED4-8CE3-9F8EBCBE8493}']
    function buttonAppearance: UIBarButtonItemAppearance; cdecl;
    function doneButtonAppearance: UIBarButtonItemAppearance; cdecl;
    procedure setButtonAppearance(buttonAppearance: UIBarButtonItemAppearance); cdecl;
    procedure setDoneButtonAppearance(doneButtonAppearance: UIBarButtonItemAppearance); cdecl;
  end;
  TUIToolbarAppearance = class(TOCGenericImport<UIToolbarAppearanceClass, UIToolbarAppearance>) end;

  UITabBarItemStateAppearanceClass = interface(NSObjectClass)
    ['{15A93742-8826-466A-AAFC-B14E5C4A1172}']
    {class} function new: Pointer; cdecl;
  end;

  UITabBarItemStateAppearance = interface(NSObject)
    ['{DAB9D473-B604-4520-8B72-D2FCDB5BFDE9}']
    function badgeBackgroundColor: UIColor; cdecl;
    function badgePositionAdjustment: UIOffset; cdecl;
    function badgeTextAttributes: NSDictionary; cdecl;
    function badgeTitlePositionAdjustment: UIOffset; cdecl;
    function iconColor: UIColor; cdecl;
    procedure setBadgeBackgroundColor(badgeBackgroundColor: UIColor); cdecl;
    procedure setBadgePositionAdjustment(badgePositionAdjustment: UIOffset); cdecl;
    procedure setBadgeTextAttributes(badgeTextAttributes: NSDictionary); cdecl;
    procedure setBadgeTitlePositionAdjustment(badgeTitlePositionAdjustment: UIOffset); cdecl;
    procedure setIconColor(iconColor: UIColor); cdecl;
    procedure setTitlePositionAdjustment(titlePositionAdjustment: UIOffset); cdecl;
    procedure setTitleTextAttributes(titleTextAttributes: NSDictionary); cdecl;
    function titlePositionAdjustment: UIOffset; cdecl;
    function titleTextAttributes: NSDictionary; cdecl;
  end;
  TUITabBarItemStateAppearance = class(TOCGenericImport<UITabBarItemStateAppearanceClass, UITabBarItemStateAppearance>) end;

  UITabBarItemAppearanceClass = interface(NSObjectClass)
    ['{3FC2B7DE-790E-4A24-9F97-2FBAA97A28C9}']
  end;

  UITabBarItemAppearance = interface(NSObject)
    ['{CD6C1E18-7C8F-4814-9346-A96DDDF6E975}']
    procedure configureWithDefaultForStyle(style: UITabBarItemAppearanceStyle); cdecl;
    function copy: Pointer; cdecl;
    function disabled: UITabBarItemStateAppearance; cdecl;
    function focused: UITabBarItemStateAppearance; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithStyle(style: UITabBarItemAppearanceStyle): Pointer; cdecl;
    function normal: UITabBarItemStateAppearance; cdecl;
    function selected: UITabBarItemStateAppearance; cdecl;
  end;
  TUITabBarItemAppearance = class(TOCGenericImport<UITabBarItemAppearanceClass, UITabBarItemAppearance>) end;

  UITabBarAppearanceClass = interface(UIBarAppearanceClass)
    ['{00A72597-AD4D-4A46-B5E2-7968CD2CED03}']
  end;

  UITabBarAppearance = interface(UIBarAppearance)
    ['{BBCD84A4-C099-436A-9ED6-4D4DF08B5BC1}']
    function compactInlineLayoutAppearance: UITabBarItemAppearance; cdecl;
    function inlineLayoutAppearance: UITabBarItemAppearance; cdecl;
    function selectionIndicatorImage: UIImage; cdecl;
    function selectionIndicatorTintColor: UIColor; cdecl;
    procedure setCompactInlineLayoutAppearance(compactInlineLayoutAppearance: UITabBarItemAppearance); cdecl;
    procedure setInlineLayoutAppearance(inlineLayoutAppearance: UITabBarItemAppearance); cdecl;
    procedure setSelectionIndicatorImage(selectionIndicatorImage: UIImage); cdecl;
    procedure setSelectionIndicatorTintColor(selectionIndicatorTintColor: UIColor); cdecl;
    procedure setStackedItemPositioning(stackedItemPositioning: UITabBarItemPositioning); cdecl;
    procedure setStackedItemSpacing(stackedItemSpacing: CGFloat); cdecl;
    procedure setStackedItemWidth(stackedItemWidth: CGFloat); cdecl;
    procedure setStackedLayoutAppearance(stackedLayoutAppearance: UITabBarItemAppearance); cdecl;
    function stackedItemPositioning: UITabBarItemPositioning; cdecl;
    function stackedItemSpacing: CGFloat; cdecl;
    function stackedItemWidth: CGFloat; cdecl;
    function stackedLayoutAppearance: UITabBarItemAppearance; cdecl;
  end;
  TUITabBarAppearance = class(TOCGenericImport<UITabBarAppearanceClass, UITabBarAppearance>) end;

  UIActivityItemsConfigurationReading = interface(IObjectiveC)
    ['{6C49C697-05A0-4FFA-856D-CC9C08AC0252}']
    function activityItemsConfigurationMetadataForItemAtIndex(index: NSInteger; key: UIActivityItemsConfigurationMetadataKey): Pointer; cdecl;
    function activityItemsConfigurationMetadataForKey(key: UIActivityItemsConfigurationMetadataKey): Pointer; cdecl;
    function activityItemsConfigurationPreviewForItemAtIndex(index: NSInteger; intent: UIActivityItemsConfigurationPreviewIntent;
      suggestedSize: CGSize): NSItemProvider; cdecl;
    function activityItemsConfigurationSupportsInteraction(interaction: UIActivityItemsConfigurationInteraction): Boolean; cdecl;
    function applicationActivitiesForActivityItemsConfiguration: NSArray; cdecl;
    function itemProvidersForActivityItemsConfiguration: NSArray; cdecl;
  end;

  UIActivityItemsConfigurationProviding = interface(IObjectiveC)
    ['{D810A9C3-7060-4C97-9F77-9EB53316BD18}']
    function activityItemsConfiguration: Pointer; cdecl;
  end;

  UIActivityItemsConfigurationClass = interface(NSObjectClass)
    ['{AF4B6B96-4019-48B0-917C-44F096A9BCE1}']
    {class} function activityItemsConfigurationWithItemProviders(itemProviders: NSArray): Pointer; cdecl;
    {class} function activityItemsConfigurationWithObjects(objects: NSArray): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIActivityItemsConfiguration = interface(NSObject)
    ['{4DBCBFFC-D0AD-42F8-BC2A-623B353E7C18}']
    function applicationActivitiesProvider: TUIActivityItemsConfigurationBlockMethod5; cdecl;
    function initWithItemProviders(itemProviders: NSArray): Pointer; cdecl;
    function initWithObjects(objects: NSArray): Pointer; cdecl;
    function localObject: Pointer; cdecl;
    function metadataProvider: TUIActivityItemsConfigurationBlockMethod1; cdecl;
    function perItemMetadataProvider: TUIActivityItemsConfigurationBlockMethod3; cdecl;
    function previewProvider: TUIActivityItemsConfigurationBlockMethod4; cdecl;
    procedure setApplicationActivitiesProvider(applicationActivitiesProvider: TUIActivityItemsConfigurationBlockMethod2); cdecl;
    procedure setLocalObject(localObject: Pointer); cdecl;
    procedure setMetadataProvider(metadataProvider: TUIActivityItemsConfigurationBlockMethod2); cdecl;
    procedure setPerItemMetadataProvider(perItemMetadataProvider: TUIActivityItemsConfigurationBlockMethod2); cdecl;
    procedure setPreviewProvider(previewProvider: TUIActivityItemsConfigurationBlockMethod2); cdecl;
    procedure setSupportedInteractions(supportedInteractions: NSArray); cdecl;
    function supportedInteractions: NSArray; cdecl;
  end;
  TUIActivityItemsConfiguration = class(TOCGenericImport<UIActivityItemsConfigurationClass, UIActivityItemsConfiguration>) end;

  UISearchSuggestion = interface(IObjectiveC)
    ['{A933BECD-974F-4CFB-BF20-A7F4D38D4C6C}']
    function iconImage: UIImage; cdecl;
    function localizedAttributedSuggestion: NSAttributedString; cdecl;
    function localizedDescription: NSString; cdecl;
    function localizedSuggestion: NSString; cdecl;
    function representedObject: Pointer; cdecl;
    procedure setRepresentedObject(representedObject: Pointer); cdecl;
  end;

  UISearchSuggestionItemClass = interface(NSObjectClass)
    ['{43F5FD2C-8EB0-402D-9E4D-BE7CCEE47D63}']
    {class} function suggestionWithLocalizedAttributedSuggestion(suggestion: NSAttributedString): Pointer; overload; cdecl;
    {class} function suggestionWithLocalizedAttributedSuggestion(suggestion: NSAttributedString;
      descriptionString: NSString): Pointer; overload; cdecl;
    {class} function suggestionWithLocalizedAttributedSuggestion(suggestion: NSAttributedString; descriptionString: NSString;
      iconImage: UIImage): Pointer; overload; cdecl;
    {class} function suggestionWithLocalizedSuggestion(suggestion: NSString): Pointer; overload; cdecl;
    {class} function suggestionWithLocalizedSuggestion(suggestion: NSString; descriptionString: NSString): Pointer; overload; cdecl;
    {class} function suggestionWithLocalizedSuggestion(suggestion: NSString; descriptionString: NSString;
      iconImage: UIImage): Pointer; overload; cdecl;
  end;

  UISearchSuggestionItem = interface(NSObject)
    ['{1FD9DE87-7288-4A80-A458-5F8F827AFCE6}']
    function iconImage: UIImage; cdecl;
    function initWithLocalizedAttributedSuggestion(suggestion: NSAttributedString; localizedDescription: NSString): Pointer; overload; cdecl;
    function initWithLocalizedAttributedSuggestion(suggestion: NSAttributedString; localizedDescription: NSString;
      iconImage: UIImage): Pointer; overload; cdecl;
    function initWithLocalizedAttributedSuggestion(suggestion: NSAttributedString): Pointer; overload; cdecl;
    function initWithLocalizedSuggestion(suggestion: NSString): Pointer; overload; cdecl;
    function initWithLocalizedSuggestion(suggestion: NSString; localizedDescription: NSString): Pointer; overload; cdecl;
    function initWithLocalizedSuggestion(suggestion: NSString; localizedDescription: NSString; iconImage: UIImage): Pointer; overload; cdecl;
    function localizedAttributedSuggestion: NSAttributedString; cdecl;
    function localizedDescription: NSString; cdecl;
    function localizedSuggestion: NSString; cdecl;
    function representedObject: Pointer; cdecl;
    procedure setRepresentedObject(representedObject: Pointer); cdecl;
  end;
  TUISearchSuggestionItem = class(TOCGenericImport<UISearchSuggestionItemClass, UISearchSuggestionItem>) end;

  UIScribbleInteractionClass = interface(NSObjectClass)
    ['{61F6983D-042B-48DC-BE2C-F15F897407FC}']
    {class} function isPencilInputExpected: Boolean; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIScribbleInteraction = interface(NSObject)
    ['{9FFE2E46-816E-4845-A22A-1B4FC9B18DCF}']
    function delegate: Pointer; cdecl;
    function initWithDelegate(delegate: Pointer): Pointer; cdecl;
    function isHandlingWriting: Boolean; cdecl;
  end;
  TUIScribbleInteraction = class(TOCGenericImport<UIScribbleInteractionClass, UIScribbleInteraction>) end;

  UIScribbleInteractionDelegate = interface(IObjectiveC)
    ['{F4BD4ECD-05F2-415B-8385-9C095849C506}']
    function scribbleInteraction(interaction: UIScribbleInteraction; shouldBeginAtLocation: CGPoint): Boolean; cdecl;
    procedure scribbleInteractionDidFinishWriting(interaction: UIScribbleInteraction); cdecl;
    function scribbleInteractionShouldDelayFocus(interaction: UIScribbleInteraction): Boolean; cdecl;
    procedure scribbleInteractionWillBeginWriting(interaction: UIScribbleInteraction); cdecl;
  end;

  UIIndirectScribbleInteractionClass = interface(NSObjectClass)
    ['{799241F1-4FE9-4294-A060-E62F88277F26}']
    {class} function new: Pointer; cdecl;
  end;

  UIIndirectScribbleInteraction = interface(NSObject)
    ['{0FCBDDE7-4A6A-4CB0-98D6-698A0AD5E09C}']
    function delegate: Pointer; cdecl;
    function initWithDelegate(delegate: Pointer): Pointer; cdecl;
    function isHandlingWriting: Boolean; cdecl;
  end;
  TUIIndirectScribbleInteraction = class(TOCGenericImport<UIIndirectScribbleInteractionClass, UIIndirectScribbleInteraction>) end;

  UIIndirectScribbleInteractionDelegate = interface(IObjectiveC)
    ['{B14D8FF5-E829-4430-A489-0AA43A8A6534}']
    procedure indirectScribbleInteraction(interaction: UIIndirectScribbleInteraction; focusElementIfNeeded: UIScribbleElementIdentifier;
      referencePoint: CGPoint; completion: Pointer); overload; cdecl;
    function indirectScribbleInteraction(interaction: UIIndirectScribbleInteraction;
      isElementFocused: UIScribbleElementIdentifier): Boolean; overload; cdecl;
    procedure indirectScribbleInteraction(interaction: UIIndirectScribbleInteraction; requestElementsInRect: CGRect;
      completion: Pointer); overload; cdecl;
    [MethodName('indirectScribbleInteraction:didFinishWritingInElement:')]
    procedure indirectScribbleInteractionDidFinishWritingInElement(interaction: UIIndirectScribbleInteraction;
      didFinishWritingInElement: UIScribbleElementIdentifier); cdecl;
    [MethodName('indirectScribbleInteraction:frameForElement:')]
    function indirectScribbleInteractionFrameForElement(interaction: UIIndirectScribbleInteraction;
      frameForElement: UIScribbleElementIdentifier): CGRect; cdecl;
    [MethodName('indirectScribbleInteraction:shouldDelayFocusForElement:')]
    function indirectScribbleInteractionShouldDelayFocusForElement(interaction: UIIndirectScribbleInteraction;
      shouldDelayFocusForElement: UIScribbleElementIdentifier): Boolean; cdecl;
    [MethodName('indirectScribbleInteraction:willBeginWritingInElement:')]
    procedure indirectScribbleInteractionWillBeginWritingInElement(interaction: UIIndirectScribbleInteraction;
      willBeginWritingInElement: UIScribbleElementIdentifier); cdecl;
  end;

  NSLayoutAnchorClass = interface(NSObjectClass)
    ['{01EF79B0-9753-4030-8A33-3AD9003B89CC}']
  end;

  NSLayoutAnchor = interface(NSObject)
    ['{D65A7F90-51A7-4C5D-8640-DCC73AB4CBDE}']
    function constraintEqualToAnchor(anchor: NSLayoutAnchor): NSLayoutConstraint; overload; cdecl;
    function constraintEqualToAnchor(anchor: NSLayoutAnchor; constant: CGFloat): NSLayoutConstraint; overload; cdecl;
    function constraintGreaterThanOrEqualToAnchor(anchor: NSLayoutAnchor; constant: CGFloat): NSLayoutConstraint; overload; cdecl;
    function constraintGreaterThanOrEqualToAnchor(anchor: NSLayoutAnchor): NSLayoutConstraint; overload; cdecl;
    function constraintLessThanOrEqualToAnchor(anchor: NSLayoutAnchor; constant: CGFloat): NSLayoutConstraint; overload; cdecl;
    function constraintLessThanOrEqualToAnchor(anchor: NSLayoutAnchor): NSLayoutConstraint; overload; cdecl;
    function constraintsAffectingLayout: NSArray; cdecl;
    function hasAmbiguousLayout: Boolean; cdecl;
    function item: Pointer; cdecl;
    function name: NSString; cdecl;
  end;
  TNSLayoutAnchor = class(TOCGenericImport<NSLayoutAnchorClass, NSLayoutAnchor>) end;

  NSLayoutXAxisAnchorClass = interface(NSLayoutAnchorClass)
    ['{EB53E663-BB8B-4595-B774-17D922CBCA0D}']
  end;

  NSLayoutXAxisAnchor = interface(NSLayoutAnchor)
    ['{BF3509A6-166E-4C04-8A83-3D1E0980695B}']
    function anchorWithOffsetToAnchor(otherAnchor: NSLayoutXAxisAnchor): NSLayoutDimension; cdecl;
    function constraintEqualToSystemSpacingAfterAnchor(anchor: NSLayoutXAxisAnchor; multiplier: CGFloat): NSLayoutConstraint; cdecl;
    function constraintGreaterThanOrEqualToSystemSpacingAfterAnchor(anchor: NSLayoutXAxisAnchor; multiplier: CGFloat): NSLayoutConstraint; cdecl;
    function constraintLessThanOrEqualToSystemSpacingAfterAnchor(anchor: NSLayoutXAxisAnchor; multiplier: CGFloat): NSLayoutConstraint; cdecl;
  end;
  TNSLayoutXAxisAnchor = class(TOCGenericImport<NSLayoutXAxisAnchorClass, NSLayoutXAxisAnchor>) end;

  NSLayoutYAxisAnchorClass = interface(NSLayoutAnchorClass)
    ['{878D10F7-46B1-4497-A34A-88C521E1B1E4}']
  end;

  NSLayoutYAxisAnchor = interface(NSLayoutAnchor)
    ['{4A71E776-7474-4E0E-B78D-CC73060DBE3E}']
    function anchorWithOffsetToAnchor(otherAnchor: NSLayoutYAxisAnchor): NSLayoutDimension; cdecl;
    function constraintEqualToSystemSpacingBelowAnchor(anchor: NSLayoutYAxisAnchor; multiplier: CGFloat): NSLayoutConstraint; cdecl;
    function constraintGreaterThanOrEqualToSystemSpacingBelowAnchor(anchor: NSLayoutYAxisAnchor; multiplier: CGFloat): NSLayoutConstraint; cdecl;
    function constraintLessThanOrEqualToSystemSpacingBelowAnchor(anchor: NSLayoutYAxisAnchor; multiplier: CGFloat): NSLayoutConstraint; cdecl;
  end;
  TNSLayoutYAxisAnchor = class(TOCGenericImport<NSLayoutYAxisAnchorClass, NSLayoutYAxisAnchor>) end;

  NSLayoutDimensionClass = interface(NSLayoutAnchorClass)
    ['{7070FE7E-6CFC-4827-B082-D1C67D01D9EF}']
  end;

  NSLayoutDimension = interface(NSLayoutAnchor)
    ['{55B49DEF-CB36-41D0-BD4F-4D9F2842BD5E}']
    function constraintEqualToAnchor(anchor: NSLayoutDimension; multiplier: CGFloat; constant: CGFloat): NSLayoutConstraint; overload; cdecl;
    function constraintEqualToAnchor(anchor: NSLayoutDimension; multiplier: CGFloat): NSLayoutConstraint; overload; cdecl;
    function constraintEqualToConstant(c: CGFloat): NSLayoutConstraint; cdecl;
    function constraintGreaterThanOrEqualToAnchor(anchor: NSLayoutDimension; multiplier: CGFloat;
      constant: CGFloat): NSLayoutConstraint; overload; cdecl;
    function constraintGreaterThanOrEqualToAnchor(anchor: NSLayoutDimension; multiplier: CGFloat): NSLayoutConstraint; overload; cdecl;
    function constraintGreaterThanOrEqualToConstant(c: CGFloat): NSLayoutConstraint; cdecl;
    function constraintLessThanOrEqualToAnchor(anchor: NSLayoutDimension; multiplier: CGFloat;
      constant: CGFloat): NSLayoutConstraint; overload; cdecl;
    function constraintLessThanOrEqualToAnchor(anchor: NSLayoutDimension; multiplier: CGFloat): NSLayoutConstraint; overload; cdecl;
    function constraintLessThanOrEqualToConstant(c: CGFloat): NSLayoutConstraint; cdecl;
  end;
  TNSLayoutDimension = class(TOCGenericImport<NSLayoutDimensionClass, NSLayoutDimension>) end;

  UITrackingLayoutGuideClass = interface(UILayoutGuideClass)
    ['{E8DB8079-ECBB-4DB9-AB0D-D0B1DF6DF0ED}']
  end;

  UITrackingLayoutGuide = interface(UILayoutGuide)
    ['{C52D833F-405B-4419-BC22-4E61ED88592C}']
    function constraintsActiveWhenAwayFromEdge(edge: NSDirectionalRectEdge): NSArray; cdecl;
    function constraintsActiveWhenNearEdge(edge: NSDirectionalRectEdge): NSArray; cdecl;
    procedure removeAllTrackedConstraints; cdecl;
    procedure setConstraints(trackingConstraints: NSArray; activeWhenNearEdge: NSDirectionalRectEdge); cdecl;
    [MethodName('setConstraints:activeWhenAwayFromEdge:')]
    procedure setConstraintsActiveWhenAwayFromEdge(trackingConstraints: NSArray; activeWhenAwayFromEdge: NSDirectionalRectEdge); cdecl;
  end;
  TUITrackingLayoutGuide = class(TOCGenericImport<UITrackingLayoutGuideClass, UITrackingLayoutGuide>) end;

  UIKeyboardLayoutGuideClass = interface(UITrackingLayoutGuideClass)
    ['{432D4BAF-92EF-4AA8-99D2-A9E0444D2F72}']
  end;

  UIKeyboardLayoutGuide = interface(UITrackingLayoutGuide)
    ['{159876D3-2A73-4AEB-A163-965588D55A75}']
    function followsUndockedKeyboard: Boolean; cdecl;
    function keyboardDismissPadding: CGFloat; cdecl;
    procedure setFollowsUndockedKeyboard(followsUndockedKeyboard: Boolean); cdecl;
    procedure setKeyboardDismissPadding(keyboardDismissPadding: CGFloat); cdecl;
    procedure setUsesBottomSafeArea(usesBottomSafeArea: Boolean); cdecl;
    function usesBottomSafeArea: Boolean; cdecl;
  end;
  TUIKeyboardLayoutGuide = class(TOCGenericImport<UIKeyboardLayoutGuideClass, UIKeyboardLayoutGuide>) end;

  UIStackViewClass = interface(UIViewClass)
    ['{46BC1B34-0161-415B-A256-BC1ADB2A1851}']
  end;

  UIStackView = interface(UIView)
    ['{F25CDD1E-277C-455A-8A75-56F56084C299}']
    procedure addArrangedSubview(view: UIView); cdecl;
    function alignment: UIStackViewAlignment; cdecl;
    function arrangedSubviews: NSArray; cdecl;
    function axis: UILayoutConstraintAxis; cdecl;
    function customSpacingAfterView(arrangedSubview: UIView): CGFloat; cdecl;
    function distribution: UIStackViewDistribution; cdecl;
    function initWithArrangedSubviews(views: NSArray): Pointer; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    procedure insertArrangedSubview(view: UIView; atIndex: NSUInteger); cdecl;
    function isBaselineRelativeArrangement: Boolean; cdecl;
    function isLayoutMarginsRelativeArrangement: Boolean; cdecl;
    procedure removeArrangedSubview(view: UIView); cdecl;
    procedure setAlignment(alignment: UIStackViewAlignment); cdecl;
    procedure setAxis(axis: UILayoutConstraintAxis); cdecl;
    procedure setBaselineRelativeArrangement(baselineRelativeArrangement: Boolean); cdecl;
    procedure setCustomSpacing(spacing: CGFloat; afterView: UIView); cdecl;
    procedure setDistribution(distribution: UIStackViewDistribution); cdecl;
    procedure setLayoutMarginsRelativeArrangement(layoutMarginsRelativeArrangement: Boolean); cdecl;
    procedure setSpacing(spacing: CGFloat); cdecl;
    function spacing: CGFloat; cdecl;
  end;
  TUIStackView = class(TOCGenericImport<UIStackViewClass, UIStackView>) end;

  NSTextStorageClass = interface(NSMutableAttributedStringClass)
    ['{8EAD55F0-11B6-4C00-9800-11A0DBF4370B}']
  end;

  NSTextStorage = interface(NSMutableAttributedString)
    ['{5CC9EDB3-EEE4-4FDB-AF08-DB64A977847D}']
    procedure addLayoutManager(aLayoutManager: NSLayoutManager); cdecl;
    function changeInLength: NSInteger; cdecl;
    function delegate: Pointer; cdecl;
    procedure edited(editedMask: NSTextStorageEditActions; range: NSRange; changeInLength: NSInteger); cdecl;
    function editedMask: NSTextStorageEditActions; cdecl;
    function editedRange: NSRange; cdecl;
    procedure ensureAttributesAreFixedInRange(range: NSRange); cdecl;
    function fixesAttributesLazily: Boolean; cdecl;
    procedure invalidateAttributesInRange(range: NSRange); cdecl;
    function layoutManagers: NSArray; cdecl;
    procedure processEditing; cdecl;
    procedure removeLayoutManager(aLayoutManager: NSLayoutManager); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setTextStorageObserver(textStorageObserver: Pointer); cdecl;
    function textStorageObserver: Pointer; cdecl;
  end;
  TNSTextStorage = class(TOCGenericImport<NSTextStorageClass, NSTextStorage>) end;

  NSTextStorageDelegate = interface(IObjectiveC)
    ['{09910581-5AF7-4F69-9CB5-7E8CBA28E188}']
    procedure textStorage(textStorage: NSTextStorage; willProcessEditing: NSTextStorageEditActions; range: NSRange; changeInLength: NSInteger); cdecl;
    [MethodName('textStorage:didProcessEditing:range:changeInLength:')]
    procedure textStorageDidProcessEditing(textStorage: NSTextStorage; didProcessEditing: NSTextStorageEditActions; range: NSRange;
      changeInLength: NSInteger); cdecl;
  end;

  NSTextStorageObserving = interface(IObjectiveC)
    ['{51B21412-1EDA-4816-A1BB-53F17699387B}']
    procedure performEditingTransactionForTextStorage(textStorage: NSTextStorage; usingBlock: Pointer); cdecl;
    procedure processEditingForTextStorage(textStorage: NSTextStorage; edited: NSTextStorageEditActions; range: NSRange; changeInLength: NSInteger;
      invalidatedRange: NSRange); cdecl;
    procedure setTextStorage(textStorage: NSTextStorage); cdecl;
    function textStorage: NSTextStorage; cdecl;
  end;

  NSTextLayoutOrientationProvider = interface(IObjectiveC)
    ['{B67B7838-B440-448A-B491-E41709369C56}']
    function layoutOrientation: NSTextLayoutOrientation; cdecl;
  end;

  NSLayoutManagerClass = interface(NSObjectClass)
    ['{C1FBA4AC-99D9-4FEE-AAAD-452E20546CB8}']
  end;

  NSLayoutManager = interface(NSObject)
    ['{3215202E-1ACA-4F98-9DC2-B5E01241262D}']
    procedure addTextContainer(container: NSTextContainer); cdecl;
    function allowsNonContiguousLayout: Boolean; cdecl;
    function attachmentSizeForGlyphAtIndex(glyphIndex: NSUInteger): CGSize; cdecl;
    function boundingRectForGlyphRange(glyphRange: NSRange; inTextContainer: NSTextContainer): CGRect; cdecl;
    function CGGlyphAtIndex(glyphIndex: NSUInteger): CGGlyph; overload; cdecl;
    function CGGlyphAtIndex(glyphIndex: NSUInteger; isValidIndex: PBoolean): CGGlyph; overload; cdecl;
    function characterIndexForGlyphAtIndex(glyphIndex: NSUInteger): NSUInteger; cdecl;
    function characterIndexForPoint(point: CGPoint; inTextContainer: NSTextContainer;
      fractionOfDistanceBetweenInsertionPoints: PCGFloat): NSUInteger; cdecl;
    function characterRangeForGlyphRange(glyphRange: NSRange; actualGlyphRange: NSRangePointer): NSRange; cdecl;
    function delegate: Pointer; cdecl;
    procedure drawBackgroundForGlyphRange(glyphsToShow: NSRange; atPoint: CGPoint); cdecl;
    procedure drawGlyphsForGlyphRange(glyphsToShow: NSRange; atPoint: CGPoint); cdecl;
    function drawsOutsideLineFragmentForGlyphAtIndex(glyphIndex: NSUInteger): Boolean; cdecl;
    procedure drawStrikethroughForGlyphRange(glyphRange: NSRange; strikethroughType: NSUnderlineStyle; baselineOffset: CGFloat;
      lineFragmentRect: CGRect; lineFragmentGlyphRange: NSRange; containerOrigin: CGPoint); cdecl;
    procedure drawUnderlineForGlyphRange(glyphRange: NSRange; underlineType: NSUnderlineStyle; baselineOffset: CGFloat; lineFragmentRect: CGRect;
      lineFragmentGlyphRange: NSRange; containerOrigin: CGPoint); cdecl;
    procedure ensureGlyphsForCharacterRange(charRange: NSRange); cdecl;
    procedure ensureGlyphsForGlyphRange(glyphRange: NSRange); cdecl;
    procedure ensureLayoutForBoundingRect(bounds: CGRect; inTextContainer: NSTextContainer); cdecl;
    procedure ensureLayoutForCharacterRange(charRange: NSRange); cdecl;
    procedure ensureLayoutForGlyphRange(glyphRange: NSRange); cdecl;
    procedure ensureLayoutForTextContainer(container: NSTextContainer); cdecl;
    procedure enumerateEnclosingRectsForGlyphRange(glyphRange: NSRange; withinSelectedGlyphRange: NSRange; inTextContainer: NSTextContainer;
      usingBlock: TNSLayoutManagerBlockMethod2); cdecl;
    procedure enumerateLineFragmentsForGlyphRange(glyphRange: NSRange; usingBlock: TNSLayoutManagerBlockMethod1); cdecl;
    function extraLineFragmentRect: CGRect; cdecl;
    function extraLineFragmentTextContainer: NSTextContainer; cdecl;
    function extraLineFragmentUsedRect: CGRect; cdecl;
    procedure fillBackgroundRectArray(rectArray: PCGRect; count: NSUInteger; forCharacterRange: NSRange; color: UIColor); cdecl;
    function firstUnlaidCharacterIndex: NSUInteger; cdecl;
    function firstUnlaidGlyphIndex: NSUInteger; cdecl;
    function fractionOfDistanceThroughGlyphForPoint(point: CGPoint; inTextContainer: NSTextContainer): CGFloat; cdecl;
    procedure getFirstUnlaidCharacterIndex(charIndex: PNSUInteger; glyphIndex: PNSUInteger); cdecl;
    function getGlyphsInRange(glyphRange: NSRange; glyphs: PCGGlyph; properties: PNSGlyphProperty; characterIndexes: PNSUInteger;
      bidiLevels: PByte): NSUInteger; cdecl;
    function getLineFragmentInsertionPointsForCharacterAtIndex(charIndex: NSUInteger; alternatePositions: Boolean; inDisplayOrder: Boolean;
      positions: PCGFloat; characterIndexes: PNSUInteger): NSUInteger; cdecl;
    function glyphAtIndex(glyphIndex: NSUInteger): CGGlyph; overload; cdecl;
    function glyphAtIndex(glyphIndex: NSUInteger; isValidIndex: PBoolean): CGGlyph; overload; cdecl;
    function glyphIndexForCharacterAtIndex(charIndex: NSUInteger): NSUInteger; cdecl;
    function glyphIndexForPoint(point: CGPoint; inTextContainer: NSTextContainer;
      fractionOfDistanceThroughGlyph: PCGFloat): NSUInteger; overload; cdecl;
    function glyphIndexForPoint(point: CGPoint; inTextContainer: NSTextContainer): NSUInteger; overload; cdecl;
    function glyphRangeForBoundingRect(bounds: CGRect; inTextContainer: NSTextContainer): NSRange; cdecl;
    function glyphRangeForBoundingRectWithoutAdditionalLayout(bounds: CGRect; inTextContainer: NSTextContainer): NSRange; cdecl;
    function glyphRangeForCharacterRange(charRange: NSRange; actualCharacterRange: NSRangePointer): NSRange; cdecl;
    function glyphRangeForTextContainer(container: NSTextContainer): NSRange; cdecl;
    function hasNonContiguousLayout: Boolean; cdecl;
    function hyphenationFactor: CGFloat; cdecl; // API_DEPRECATED("Please use usesDefaultHyphenation or -[NSParagraphStyle hyphenationFactor] instead.", macos(10.0,10.15), ios(7.0,13.0), watchos(2.0,6.0), tvos(9.0,13.0))
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    procedure insertTextContainer(container: NSTextContainer; atIndex: NSUInteger); cdecl;
    procedure invalidateDisplayForCharacterRange(charRange: NSRange); cdecl;
    procedure invalidateDisplayForGlyphRange(glyphRange: NSRange); cdecl;
    procedure invalidateGlyphsForCharacterRange(charRange: NSRange; changeInLength: NSInteger; actualCharacterRange: NSRangePointer); cdecl;
    procedure invalidateLayoutForCharacterRange(charRange: NSRange; actualCharacterRange: NSRangePointer); cdecl;
    function isValidGlyphIndex(glyphIndex: NSUInteger): Boolean; cdecl;
    function limitsLayoutForSuspiciousContents: Boolean; cdecl;
    function lineFragmentRectForGlyphAtIndex(glyphIndex: NSUInteger; effectiveRange: NSRangePointer): CGRect; overload; cdecl;
    function lineFragmentRectForGlyphAtIndex(glyphIndex: NSUInteger; effectiveRange: NSRangePointer;
      withoutAdditionalLayout: Boolean): CGRect; overload; cdecl;
    function lineFragmentUsedRectForGlyphAtIndex(glyphIndex: NSUInteger; effectiveRange: NSRangePointer;
      withoutAdditionalLayout: Boolean): CGRect; overload; cdecl;
    function lineFragmentUsedRectForGlyphAtIndex(glyphIndex: NSUInteger; effectiveRange: NSRangePointer): CGRect; overload; cdecl;
    function locationForGlyphAtIndex(glyphIndex: NSUInteger): CGPoint; cdecl;
    function notShownAttributeForGlyphAtIndex(glyphIndex: NSUInteger): Boolean; cdecl;
    function numberOfGlyphs: NSUInteger; cdecl;
    procedure processEditingForTextStorage(textStorage: NSTextStorage; edited: NSTextStorageEditActions; range: NSRange; changeInLength: NSInteger;
      invalidatedRange: NSRange); cdecl;
    function propertyForGlyphAtIndex(glyphIndex: NSUInteger): NSGlyphProperty; cdecl;
    function rangeOfNominallySpacedGlyphsContainingIndex(glyphIndex: NSUInteger): NSRange; cdecl;
    procedure removeTextContainerAtIndex(index: NSUInteger); cdecl;
    procedure setAllowsNonContiguousLayout(allowsNonContiguousLayout: Boolean); cdecl;
    procedure setAttachmentSize(attachmentSize: CGSize; forGlyphRange: NSRange); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDrawsOutsideLineFragment(flag: Boolean; forGlyphAtIndex: NSUInteger); cdecl;
    procedure setExtraLineFragmentRect(fragmentRect: CGRect; usedRect: CGRect; textContainer: NSTextContainer); cdecl;
    procedure setGlyphs(glyphs: PCGGlyph; properties: PNSGlyphProperty; characterIndexes: PNSUInteger; font: UIFont; forGlyphRange: NSRange); cdecl;
    procedure setHyphenationFactor(hyphenationFactor: CGFloat); cdecl; // API_DEPRECATED("Please use usesDefaultHyphenation or -[NSParagraphStyle hyphenationFactor] instead.", macos(10.0,10.15), ios(7.0,13.0), watchos(2.0,6.0), tvos(9.0,13.0))
    procedure setLimitsLayoutForSuspiciousContents(limitsLayoutForSuspiciousContents: Boolean); cdecl;
    procedure setLineFragmentRect(fragmentRect: CGRect; forGlyphRange: NSRange; usedRect: CGRect); cdecl;
    procedure setLocation(location: CGPoint; forStartOfGlyphRange: NSRange); cdecl;
    procedure setNotShownAttribute(flag: Boolean; forGlyphAtIndex: NSUInteger); cdecl;
    procedure setShowsControlCharacters(showsControlCharacters: Boolean); cdecl;
    procedure setShowsInvisibleCharacters(showsInvisibleCharacters: Boolean); cdecl;
    procedure setTextContainer(container: NSTextContainer; forGlyphRange: NSRange); cdecl;
    procedure setTextStorage(textStorage: NSTextStorage); cdecl;
    procedure setUsesDefaultHyphenation(usesDefaultHyphenation: Boolean); cdecl;
    procedure setUsesFontLeading(usesFontLeading: Boolean); cdecl;
    procedure showCGGlyphs(glyphs: PCGGlyph; positions: PCGPoint; count: NSUInteger; font: UIFont; matrix: CGAffineTransform;
      attributes: NSDictionary; inContext: CGContextRef); overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("showCGGlyphs:positions:count:font:textMatrix:attributes:inContext:", macos(10.7,10.15), ios(7.0,13.0), watchos(2.0,6.0), tvos(9.0,13.0))
    procedure showCGGlyphs(glyphs: PCGGlyph; positions: PCGPoint; count: NSInteger; font: UIFont; textMatrix: CGAffineTransform;
      attributes: NSDictionary; inContext: CGContextRef); overload; cdecl;
    function showsControlCharacters: Boolean; cdecl;
    function showsInvisibleCharacters: Boolean; cdecl;
    procedure strikethroughGlyphRange(glyphRange: NSRange; strikethroughType: NSUnderlineStyle; lineFragmentRect: CGRect;
      lineFragmentGlyphRange: NSRange; containerOrigin: CGPoint); cdecl;
    procedure textContainerChangedGeometry(container: NSTextContainer); cdecl;
    function textContainerForGlyphAtIndex(glyphIndex: NSUInteger; effectiveRange: NSRangePointer): NSTextContainer; overload; cdecl;
    function textContainerForGlyphAtIndex(glyphIndex: NSUInteger; effectiveRange: NSRangePointer;
      withoutAdditionalLayout: Boolean): NSTextContainer; overload; cdecl;
    function textContainers: NSArray; cdecl;
    function textStorage: NSTextStorage; cdecl;
    function truncatedGlyphRangeInLineFragmentForGlyphAtIndex(glyphIndex: NSUInteger): NSRange; cdecl;
    procedure underlineGlyphRange(glyphRange: NSRange; underlineType: NSUnderlineStyle; lineFragmentRect: CGRect; lineFragmentGlyphRange: NSRange;
      containerOrigin: CGPoint); cdecl;
    function usedRectForTextContainer(container: NSTextContainer): CGRect; cdecl;
    function usesDefaultHyphenation: Boolean; cdecl;
    function usesFontLeading: Boolean; cdecl;
  end;
  TNSLayoutManager = class(TOCGenericImport<NSLayoutManagerClass, NSLayoutManager>) end;

  NSLayoutManagerDelegate = interface(IObjectiveC)
    ['{72D0E558-D4EB-4DE3-B3D2-F090AFF1A54F}']
    function layoutManager(layoutManager: NSLayoutManager; shouldBreakLineByWordBeforeCharacterAtIndex: NSUInteger): Boolean; overload; cdecl;
    function layoutManager(layoutManager: NSLayoutManager; boundingBoxForControlGlyphAtIndex: NSUInteger; forTextContainer: NSTextContainer;
      proposedLineFragment: CGRect; glyphPosition: CGPoint; characterIndex: NSUInteger): CGRect; overload; cdecl;
    function layoutManager(layoutManager: NSLayoutManager; shouldSetLineFragmentRect: PCGRect; lineFragmentUsedRect: PCGRect;
      baselineOffset: PCGFloat; inTextContainer: NSTextContainer; forGlyphRange: NSRange): Boolean; overload; cdecl;
    procedure layoutManager(layoutManager: NSLayoutManager; didCompleteLayoutForTextContainer: NSTextContainer; atEnd: Boolean); overload; cdecl;
    procedure layoutManager(layoutManager: NSLayoutManager; textContainer: NSTextContainer; didChangeGeometryFromSize: CGSize); overload; cdecl;
    function layoutManager(layoutManager: NSLayoutManager; lineSpacingAfterGlyphAtIndex: NSUInteger;
      withProposedLineFragmentRect: CGRect): CGFloat; overload; cdecl;
    function layoutManager(layoutManager: NSLayoutManager; shouldGenerateGlyphs: PCGGlyph; properties: PNSGlyphProperty;
      characterIndexes: PNSUInteger; font: UIFont; forGlyphRange: NSRange): NSUInteger; overload; cdecl;
    function layoutManager(layoutManager: NSLayoutManager; shouldUseAction: NSControlCharacterAction;
      forControlCharacterAtIndex: NSUInteger): NSControlCharacterAction; overload; cdecl;
    procedure layoutManagerDidInvalidateLayout(sender: NSLayoutManager); cdecl;
    [MethodName('layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:')]
    function layoutManagerParagraphSpacingAfterGlyphAtIndex(layoutManager: NSLayoutManager; paragraphSpacingAfterGlyphAtIndex: NSUInteger;
      withProposedLineFragmentRect: CGRect): CGFloat; cdecl;
    [MethodName('layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:')]
    function layoutManagerParagraphSpacingBeforeGlyphAtIndex(layoutManager: NSLayoutManager; paragraphSpacingBeforeGlyphAtIndex: NSUInteger;
      withProposedLineFragmentRect: CGRect): CGFloat; cdecl;
    [MethodName('layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:')]
    function layoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex(layoutManager: NSLayoutManager;
      shouldBreakLineByHyphenatingBeforeCharacterAtIndex: NSUInteger): Boolean; cdecl;
  end;

  NSTextContainerClass = interface(NSObjectClass)
    ['{798F6507-90B9-41CD-A2C0-891519385A94}']
  end;

  NSTextContainer = interface(NSObject)
    ['{CC8BACB9-F429-454A-B773-FD34EFDDC35A}']
    function exclusionPaths: NSArray; cdecl;
    function heightTracksTextView: Boolean; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithSize(size: CGSize): Pointer; cdecl;
    function isSimpleRectangularTextContainer: Boolean; cdecl;
    function layoutManager: NSLayoutManager; cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    function lineFragmentPadding: CGFloat; cdecl;
    function lineFragmentRectForProposedRect(proposedRect: CGRect; atIndex: NSUInteger; writingDirection: NSWritingDirection;
      remainingRect: PCGRect): CGRect; cdecl;
    function maximumNumberOfLines: NSUInteger; cdecl;
    procedure replaceLayoutManager(newLayoutManager: NSLayoutManager); cdecl;
    procedure setExclusionPaths(exclusionPaths: NSArray); cdecl;
    procedure setHeightTracksTextView(heightTracksTextView: Boolean); cdecl;
    procedure setLayoutManager(layoutManager: NSLayoutManager); cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    procedure setLineFragmentPadding(lineFragmentPadding: CGFloat); cdecl;
    procedure setMaximumNumberOfLines(maximumNumberOfLines: NSUInteger); cdecl;
    procedure setSize(size: CGSize); cdecl;
    procedure setWidthTracksTextView(widthTracksTextView: Boolean); cdecl;
    function size: CGSize; cdecl;
    function textLayoutManager: NSTextLayoutManager; cdecl;
    function widthTracksTextView: Boolean; cdecl;
  end;
  TNSTextContainer = class(TOCGenericImport<NSTextContainerClass, NSTextContainer>) end;

  UIPreviewInteractionClass = interface(NSObjectClass)
    ['{C6E2D043-2B8A-42AC-9F10-5760335406B7}']
  end;

  UIPreviewInteraction = interface(NSObject)
    ['{B173E49F-DDE5-499D-8FCC-0DB1CCE77872}']
    procedure cancelInteraction; cdecl;
    function delegate: Pointer; cdecl;
    function initWithView(view: UIView): Pointer; cdecl;
    function locationInCoordinateSpace(coordinateSpace: Pointer): CGPoint; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function view: UIView; cdecl;
  end;
  TUIPreviewInteraction = class(TOCGenericImport<UIPreviewInteractionClass, UIPreviewInteraction>) end;

  UIPreviewInteractionDelegate = interface(IObjectiveC)
    ['{7652D2EF-F519-4085-827F-257017568E6B}']
    procedure previewInteraction(previewInteraction: UIPreviewInteraction; didUpdatePreviewTransition: CGFloat; ended: Boolean); cdecl;
    procedure previewInteractionDidCancel(previewInteraction: UIPreviewInteraction); cdecl;
    [MethodName('previewInteraction:didUpdateCommitTransition:ended:')]
    procedure previewInteractionDidUpdateCommitTransition(previewInteraction: UIPreviewInteraction; didUpdateCommitTransition: CGFloat;
      ended: Boolean); cdecl;
    function previewInteractionShouldBegin(previewInteraction: UIPreviewInteraction): Boolean; cdecl;
  end;

  UISheetPresentationControllerDetentResolutionContext = interface(IObjectiveC)
    ['{65E60F09-154A-4BA8-8D3C-4BEE9356F134}']
    function containerTraitCollection: UITraitCollection; cdecl;
    function maximumDetentValue: CGFloat; cdecl;
  end;

  UISheetPresentationControllerDetentClass = interface(NSObjectClass)
    ['{911263D0-EAFE-4BDA-9AEC-6CB05EAC7F22}']
    {class} function customDetentWithIdentifier(identifier: UISheetPresentationControllerDetentIdentifier;
      resolver: TUISheetPresentationControllerDetentBlockMethod1): Pointer; cdecl;
    {class} function largeDetent: Pointer; cdecl;
    {class} function mediumDetent: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UISheetPresentationControllerDetent = interface(NSObject)
    ['{741FD11E-5D36-4850-BA4A-FF8FC0ED6B68}']
    function identifier: UISheetPresentationControllerDetentIdentifier; cdecl;
    function resolvedValueInContext(context: Pointer): CGFloat; cdecl;
  end;
  TUISheetPresentationControllerDetent = class(TOCGenericImport<UISheetPresentationControllerDetentClass, UISheetPresentationControllerDetent>) end;

  UISheetPresentationControllerDelegate = interface(IObjectiveC)
    ['{1246E2E7-22E9-4D4D-B2E1-493530DE6275}']
    procedure sheetPresentationControllerDidChangeSelectedDetentIdentifier(sheetPresentationController: UISheetPresentationController); cdecl;
  end;

  UISheetPresentationControllerClass = interface(UIPresentationControllerClass)
    ['{32FB9A8D-7441-4FB7-835E-CCE57890C3C8}']
  end;

  UISheetPresentationController = interface(UIPresentationController)
    ['{0333DE43-097A-4664-BD76-B9D6388D2BF8}']
    procedure animateChanges(changes: TUISheetPresentationControllerBlockMethod1); cdecl;
    function delegate: Pointer; cdecl;
    function detents: NSArray; cdecl;
    procedure invalidateDetents; cdecl;
    function largestUndimmedDetentIdentifier: UISheetPresentationControllerDetentIdentifier; cdecl;
    function preferredCornerRadius: CGFloat; cdecl;
    function prefersEdgeAttachedInCompactHeight: Boolean; cdecl;
    function prefersGrabberVisible: Boolean; cdecl;
    function prefersPageSizing: Boolean; cdecl;
    function prefersScrollingExpandsWhenScrolledToEdge: Boolean; cdecl;
    function selectedDetentIdentifier: UISheetPresentationControllerDetentIdentifier; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setDetents(detents: NSArray); cdecl;
    procedure setLargestUndimmedDetentIdentifier(largestUndimmedDetentIdentifier: UISheetPresentationControllerDetentIdentifier); cdecl;
    procedure setPreferredCornerRadius(preferredCornerRadius: CGFloat); cdecl;
    procedure setPrefersEdgeAttachedInCompactHeight(prefersEdgeAttachedInCompactHeight: Boolean); cdecl;
    procedure setPrefersGrabberVisible(prefersGrabberVisible: Boolean); cdecl;
    procedure setPrefersPageSizing(prefersPageSizing: Boolean); cdecl;
    procedure setPrefersScrollingExpandsWhenScrolledToEdge(prefersScrollingExpandsWhenScrolledToEdge: Boolean); cdecl;
    procedure setSelectedDetentIdentifier(selectedDetentIdentifier: UISheetPresentationControllerDetentIdentifier); cdecl;
    procedure setSourceView(sourceView: UIView); cdecl;
    procedure setWidthFollowsPreferredContentSizeWhenEdgeAttached(widthFollowsPreferredContentSizeWhenEdgeAttached: Boolean); cdecl;
    function sourceView: UIView; cdecl;
    function widthFollowsPreferredContentSizeWhenEdgeAttached: Boolean; cdecl;
  end;
  TUISheetPresentationController = class(TOCGenericImport<UISheetPresentationControllerClass, UISheetPresentationController>) end;

  UIPopoverPresentationControllerSourceItem = interface(IObjectiveC)
    ['{D8B6561B-06AB-4921-9D52-74EB02263ACB}']
    function frameInView(referenceView: UIView): CGRect; cdecl;
  end;

  UIPopoverPresentationControllerDelegate = interface(IObjectiveC)
    ['{337062D0-D931-4B19-9924-4FFE6B234CDC}']
    procedure popoverPresentationController(popoverPresentationController: UIPopoverPresentationController; willRepositionPopoverToRect: PCGRect;
      inView: PUIView); cdecl;
    procedure popoverPresentationControllerDidDismissPopover(popoverPresentationController: UIPopoverPresentationController); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("presentationControllerDidDismiss:", ios(8.0, 13.0))
    function popoverPresentationControllerShouldDismissPopover(popoverPresentationController: UIPopoverPresentationController): Boolean; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("presentationControllerShouldDismiss:", ios(8.0, 13.0))
    procedure prepareForPopoverPresentation(popoverPresentationController: UIPopoverPresentationController); cdecl;
  end;

  UIPopoverPresentationControllerClass = interface(UIPresentationControllerClass)
    ['{409665FF-5F69-40D7-874E-C9D90ED86034}']
  end;

  UIPopoverPresentationController = interface(UIPresentationController)
    ['{7152D83A-D82F-4B1A-831D-F21688634E8F}']
    function adaptiveSheetPresentationController: UISheetPresentationController; cdecl;
    function arrowDirection: UIPopoverArrowDirection; cdecl;
    function backgroundColor: UIColor; cdecl;
    function barButtonItem: UIBarButtonItem; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("sourceItem", ios(8.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    function canOverlapSourceViewRect: Boolean; cdecl;
    function delegate: Pointer; cdecl;
    function passthroughViews: NSArray; cdecl;
    function permittedArrowDirections: UIPopoverArrowDirection; cdecl;
    function popoverBackgroundViewClass: Pointer; cdecl;
    function popoverLayoutMargins: UIEdgeInsets; cdecl;
    procedure setBackgroundColor(backgroundColor: UIColor); cdecl;
    procedure setBarButtonItem(barButtonItem: UIBarButtonItem); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("sourceItem", ios(8.0, API_TO_BE_DEPRECATED), visionos(1.0, API_TO_BE_DEPRECATED))
    procedure setCanOverlapSourceViewRect(canOverlapSourceViewRect: Boolean); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setPassthroughViews(passthroughViews: NSArray); cdecl;
    procedure setPermittedArrowDirections(permittedArrowDirections: UIPopoverArrowDirection); cdecl;
    procedure setPopoverBackgroundViewClass(popoverBackgroundViewClass: Pointer); cdecl;
    procedure setPopoverLayoutMargins(popoverLayoutMargins: UIEdgeInsets); cdecl;
    procedure setSourceItem(sourceItem: Pointer); cdecl;
    procedure setSourceRect(sourceRect: CGRect); cdecl;
    procedure setSourceView(sourceView: UIView); cdecl;
    function sourceItem: Pointer; cdecl;
    function sourceRect: CGRect; cdecl;
    function sourceView: UIView; cdecl;
  end;
  TUIPopoverPresentationController = class(TOCGenericImport<UIPopoverPresentationControllerClass, UIPopoverPresentationController>) end;

  UIDynamicAnimatorDelegate = interface(IObjectiveC)
    ['{9E17C584-82BE-46B3-804E-1ED1304A106B}']
    procedure dynamicAnimatorDidPause(animator: UIDynamicAnimator); cdecl;
    procedure dynamicAnimatorWillResume(animator: UIDynamicAnimator); cdecl;
  end;

  UIDynamicAnimatorClass = interface(NSObjectClass)
    ['{9FC77170-E6B6-42CD-A6D7-3034B9121AAF}']
  end;

  UIDynamicAnimator = interface(NSObject)
    ['{96533C00-9B88-465A-9DCC-71E1A6F6356C}']
    procedure addBehavior(behavior: UIDynamicBehavior); cdecl;
    function behaviors: NSArray; cdecl;
    function delegate: Pointer; cdecl;
    function elapsedTime: NSTimeInterval; cdecl;
    function initWithCollectionViewLayout(layout: UICollectionViewLayout): Pointer; cdecl;
    function initWithReferenceView(view: UIView): Pointer; cdecl;
    function isRunning: Boolean; cdecl;
    function itemsInRect(rect: CGRect): NSArray; cdecl;
    function layoutAttributesForCellAtIndexPath(indexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForDecorationViewOfKind(decorationViewKind: NSString; atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function layoutAttributesForSupplementaryViewOfKind(kind: NSString; atIndexPath: NSIndexPath): UICollectionViewLayoutAttributes; cdecl;
    function referenceView: UIView; cdecl;
    procedure removeAllBehaviors; cdecl;
    procedure removeBehavior(behavior: UIDynamicBehavior); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure updateItemUsingCurrentState(item: Pointer); cdecl;
  end;
  TUIDynamicAnimator = class(TOCGenericImport<UIDynamicAnimatorClass, UIDynamicAnimator>) end;

  UIPushBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{5EE575FC-3804-42AE-9286-E874667ED739}']
  end;

  UIPushBehavior = interface(UIDynamicBehavior)
    ['{BB03ABE8-3349-45E1-ACC2-0FC5B9075680}']
    function active: Boolean; cdecl;
    procedure addItem(item: Pointer); cdecl;
    function angle: CGFloat; cdecl;
    function initWithItems(items: NSArray; mode: UIPushBehaviorMode): Pointer; cdecl;
    function items: NSArray; cdecl;
    function magnitude: CGFloat; cdecl;
    function mode: UIPushBehaviorMode; cdecl;
    function pushDirection: CGVector; cdecl;
    procedure removeItem(item: Pointer); cdecl;
    procedure setActive(active: Boolean); cdecl;
    procedure setAngle(angle: CGFloat); overload; cdecl;
    procedure setAngle(angle: CGFloat; magnitude: CGFloat); overload; cdecl;
    procedure setMagnitude(magnitude: CGFloat); cdecl;
    procedure setPushDirection(pushDirection: CGVector); cdecl;
    procedure setTargetOffsetFromCenter(o: UIOffset; forItem: Pointer); cdecl;
    function targetOffsetFromCenterForItem(item: Pointer): UIOffset; cdecl;
  end;
  TUIPushBehavior = class(TOCGenericImport<UIPushBehaviorClass, UIPushBehavior>) end;

  UISnapBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{F7EEBBB8-1631-4EB3-8010-B31F67A0B8A5}']
  end;

  UISnapBehavior = interface(UIDynamicBehavior)
    ['{56D5F2D3-B440-4F78-9E46-BEBB436C841A}']
    function damping: CGFloat; cdecl;
    function initWithItem(item: Pointer; snapToPoint: CGPoint): Pointer; cdecl;
    procedure setDamping(damping: CGFloat); cdecl;
    procedure setSnapPoint(snapPoint: CGPoint); cdecl;
    function snapPoint: CGPoint; cdecl;
  end;
  TUISnapBehavior = class(TOCGenericImport<UISnapBehaviorClass, UISnapBehavior>) end;

  UIDynamicItemBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{327A71BE-3F4E-4AB8-BC3E-B272D6D706D9}']
  end;

  UIDynamicItemBehavior = interface(UIDynamicBehavior)
    ['{27FAB9F1-CC3D-4863-BA9F-611A80A26856}']
    procedure addAngularVelocity(velocity: CGFloat; forItem: Pointer); cdecl;
    procedure addItem(item: Pointer); cdecl;
    procedure addLinearVelocity(velocity: CGPoint; forItem: Pointer); cdecl;
    function allowsRotation: Boolean; cdecl;
    function angularResistance: CGFloat; cdecl;
    function angularVelocityForItem(item: Pointer): CGFloat; cdecl;
    function charge: CGFloat; cdecl;
    function density: CGFloat; cdecl;
    function elasticity: CGFloat; cdecl;
    function friction: CGFloat; cdecl;
    function initWithItems(items: NSArray): Pointer; cdecl;
    function isAnchored: Boolean; cdecl;
    function items: NSArray; cdecl;
    function linearVelocityForItem(item: Pointer): CGPoint; cdecl;
    procedure removeItem(item: Pointer); cdecl;
    function resistance: CGFloat; cdecl;
    procedure setAllowsRotation(allowsRotation: Boolean); cdecl;
    procedure setAnchored(anchored: Boolean); cdecl;
    procedure setAngularResistance(angularResistance: CGFloat); cdecl;
    procedure setCharge(charge: CGFloat); cdecl;
    procedure setDensity(density: CGFloat); cdecl;
    procedure setElasticity(elasticity: CGFloat); cdecl;
    procedure setFriction(friction: CGFloat); cdecl;
    procedure setResistance(resistance: CGFloat); cdecl;
  end;
  TUIDynamicItemBehavior = class(TOCGenericImport<UIDynamicItemBehaviorClass, UIDynamicItemBehavior>) end;

  UIFieldBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{5D21A2E2-BAFA-4B00-9446-871CB33B9AB1}']
    {class} function dragField: Pointer; cdecl;
    {class} function electricField: Pointer; cdecl;
    {class} function fieldWithEvaluationBlock(block: TUIFieldBehaviorBlockMethod1): Pointer; cdecl;
    {class} function linearGravityFieldWithVector(direction: CGVector): Pointer; cdecl;
    {class} function magneticField: Pointer; cdecl;
    {class} function noiseFieldWithSmoothness(smoothness: CGFloat; animationSpeed: CGFloat): Pointer; cdecl;
    {class} function radialGravityFieldWithPosition(position: CGPoint): Pointer; cdecl;
    {class} function springField: Pointer; cdecl;
    {class} function turbulenceFieldWithSmoothness(smoothness: CGFloat; animationSpeed: CGFloat): Pointer; cdecl;
    {class} function velocityFieldWithVector(direction: CGVector): Pointer; cdecl;
    {class} function vortexField: Pointer; cdecl;
  end;

  UIFieldBehavior = interface(UIDynamicBehavior)
    ['{562AE0DC-7CB6-4BB4-8B9B-54486DD3FDF3}']
    procedure addItem(item: Pointer); cdecl;
    function animationSpeed: CGFloat; cdecl;
    function direction: CGVector; cdecl;
    function falloff: CGFloat; cdecl;
    function items: NSArray; cdecl;
    function minimumRadius: CGFloat; cdecl;
    function position: CGPoint; cdecl;
    function region: UIRegion; cdecl;
    procedure removeItem(item: Pointer); cdecl;
    procedure setAnimationSpeed(animationSpeed: CGFloat); cdecl;
    procedure setDirection(direction: CGVector); cdecl;
    procedure setFalloff(falloff: CGFloat); cdecl;
    procedure setMinimumRadius(minimumRadius: CGFloat); cdecl;
    procedure setPosition(position: CGPoint); cdecl;
    procedure setRegion(region: UIRegion); cdecl;
    procedure setSmoothness(smoothness: CGFloat); cdecl;
    procedure setStrength(strength: CGFloat); cdecl;
    function smoothness: CGFloat; cdecl;
    function strength: CGFloat; cdecl;
  end;
  TUIFieldBehavior = class(TOCGenericImport<UIFieldBehaviorClass, UIFieldBehavior>) end;

  UIGravityBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{0F0465CB-EFFC-4623-95B1-232D4A03A2FE}']
  end;

  UIGravityBehavior = interface(UIDynamicBehavior)
    ['{5A1EE3F1-DAEB-42E9-BCB1-33B61C9500A2}']
    procedure addItem(item: Pointer); cdecl;
    function angle: CGFloat; cdecl;
    function gravityDirection: CGVector; cdecl;
    function initWithItems(items: NSArray): Pointer; cdecl;
    function items: NSArray; cdecl;
    function magnitude: CGFloat; cdecl;
    procedure removeItem(item: Pointer); cdecl;
    procedure setAngle(angle: CGFloat); overload; cdecl;
    procedure setAngle(angle: CGFloat; magnitude: CGFloat); overload; cdecl;
    procedure setGravityDirection(gravityDirection: CGVector); cdecl;
    procedure setMagnitude(magnitude: CGFloat); cdecl;
  end;
  TUIGravityBehavior = class(TOCGenericImport<UIGravityBehaviorClass, UIGravityBehavior>) end;

  UIAttachmentBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{E33DC27F-1027-4556-8B35-9080EE1AF6F5}']
    {class} function fixedAttachmentWithItem(item1: Pointer; attachedToItem: Pointer; attachmentAnchor: CGPoint): Pointer; cdecl;
    [MethodName('limitAttachmentWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:')]
    {class} function limitAttachmentWithItem(item1: Pointer; offsetFromCenter: UIOffset; attachedToItem: Pointer; offset2: UIOffset): Pointer; cdecl;
    {class} function pinAttachmentWithItem(item1: Pointer; attachedToItem: Pointer; attachmentAnchor: CGPoint): Pointer; cdecl;
    {class} function slidingAttachmentWithItem(item1: Pointer; attachedToItem: Pointer; attachmentAnchor: CGPoint;
      axisOfTranslation: CGVector): Pointer; overload; cdecl;
    {class} function slidingAttachmentWithItem(item: Pointer; attachmentAnchor: CGPoint; axisOfTranslation: CGVector): Pointer; overload; cdecl;
  end;

  UIAttachmentBehavior = interface(UIDynamicBehavior)
    ['{11BB3713-1B00-4FA5-BC85-66DDEA81B70F}']
    function anchorPoint: CGPoint; cdecl;
    function attachedBehaviorType: UIAttachmentBehaviorType; cdecl;
    function attachmentRange: UIFloatRange; cdecl;
    function damping: CGFloat; cdecl;
    function frequency: CGFloat; cdecl;
    function frictionTorque: CGFloat; cdecl;
    function initWithItem(item: Pointer; attachedToAnchor: CGPoint): Pointer; overload; cdecl;
    [MethodName('initWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:')]
    function initWithItem(item1: Pointer; offsetFromCenter: UIOffset; attachedToItem: Pointer; offset2: UIOffset): Pointer; overload; cdecl;
    function initWithItem(item1: Pointer; attachedToItem: Pointer): Pointer; overload; cdecl;
    function initWithItem(item: Pointer; offsetFromCenter: UIOffset; attachedToAnchor: CGPoint): Pointer; overload; cdecl;
    function items: NSArray; cdecl;
    function length: CGFloat; cdecl;
    procedure setAnchorPoint(anchorPoint: CGPoint); cdecl;
    procedure setAttachmentRange(attachmentRange: UIFloatRange); cdecl;
    procedure setDamping(damping: CGFloat); cdecl;
    procedure setFrequency(frequency: CGFloat); cdecl;
    procedure setFrictionTorque(frictionTorque: CGFloat); cdecl;
    procedure setLength(length: CGFloat); cdecl;
  end;
  TUIAttachmentBehavior = class(TOCGenericImport<UIAttachmentBehaviorClass, UIAttachmentBehavior>) end;

  UICollisionBehaviorDelegate = interface(IObjectiveC)
    ['{DFF5CB13-FE83-4486-BE83-485CA2E9AFE0}']
    procedure collisionBehavior(behavior: UICollisionBehavior; endedContactForItem: Pointer; withItem: Pointer); overload; cdecl;
    procedure collisionBehavior(behavior: UICollisionBehavior; beganContactForItem: Pointer; withItem: Pointer; atPoint: CGPoint); overload; cdecl;
    [MethodName('collisionBehavior:beganContactForItem:withBoundaryIdentifier:atPoint:')]
    procedure collisionBehaviorBeganContactForItem(behavior: UICollisionBehavior; beganContactForItem: Pointer; withBoundaryIdentifier: Pointer;
      atPoint: CGPoint); cdecl;
    [MethodName('collisionBehavior:endedContactForItem:withBoundaryIdentifier:')]
    procedure collisionBehaviorEndedContactForItem(behavior: UICollisionBehavior; endedContactForItem: Pointer;
      withBoundaryIdentifier: Pointer); cdecl;
  end;

  UICollisionBehaviorClass = interface(UIDynamicBehaviorClass)
    ['{40032C64-0ECF-4A3A-B8AE-71EB051C84F7}']
  end;

  UICollisionBehavior = interface(UIDynamicBehavior)
    ['{AFD6232C-71E8-43FF-9812-9257E499F62C}']
    procedure addBoundaryWithIdentifier(identifier: Pointer; fromPoint: CGPoint; toPoint: CGPoint); overload; cdecl;
    procedure addBoundaryWithIdentifier(identifier: Pointer; forPath: UIBezierPath); overload; cdecl;
    procedure addItem(item: Pointer); cdecl;
    function boundaryIdentifiers: NSArray; cdecl;
    function boundaryWithIdentifier(identifier: Pointer): UIBezierPath; cdecl;
    function collisionDelegate: Pointer; cdecl;
    function collisionMode: UICollisionBehaviorMode; cdecl;
    function initWithItems(items: NSArray): Pointer; cdecl;
    function items: NSArray; cdecl;
    procedure removeAllBoundaries; cdecl;
    procedure removeBoundaryWithIdentifier(identifier: Pointer); cdecl;
    procedure removeItem(item: Pointer); cdecl;
    procedure setCollisionDelegate(collisionDelegate: Pointer); cdecl;
    procedure setCollisionMode(collisionMode: UICollisionBehaviorMode); cdecl;
    procedure setTranslatesReferenceBoundsIntoBoundary(translatesReferenceBoundsIntoBoundary: Boolean); cdecl;
    procedure setTranslatesReferenceBoundsIntoBoundaryWithInsets(insets: UIEdgeInsets); cdecl;
    function translatesReferenceBoundsIntoBoundary: Boolean; cdecl;
  end;
  TUICollisionBehavior = class(TOCGenericImport<UICollisionBehaviorClass, UICollisionBehavior>) end;

  UIRegionClass = interface(NSObjectClass)
    ['{BD641B60-10D3-42E5-89E9-5B26880EB073}']
    {class} function infiniteRegion: UIRegion; cdecl;
  end;

  UIRegion = interface(NSObject)
    ['{62471C5B-ABF6-4AA6-A65E-61044B146661}']
    function containsPoint(point: CGPoint): Boolean; cdecl;
    function initWithRadius(radius: CGFloat): Pointer; cdecl;
    function initWithSize(size: CGSize): Pointer; cdecl;
    function inverseRegion: Pointer; cdecl;
    function regionByDifferenceFromRegion(region: UIRegion): Pointer; cdecl;
    function regionByIntersectionWithRegion(region: UIRegion): Pointer; cdecl;
    function regionByUnionWithRegion(region: UIRegion): Pointer; cdecl;
  end;
  TUIRegion = class(TOCGenericImport<UIRegionClass, UIRegion>) end;

  UITextDragPreviewRendererClass = interface(NSObjectClass)
    ['{DF3236AE-E072-4F51-9650-B1674226625F}']
    {class} function new: Pointer; cdecl;
  end;

  UITextDragPreviewRenderer = interface(NSObject)
    ['{57643E22-053F-48AA-8424-2EE76536803D}']
    procedure adjustFirstLineRect(firstLineRect: PCGRect; bodyRect: PCGRect; lastLineRect: PCGRect; textOrigin: CGPoint); cdecl;
    function bodyRect: CGRect; cdecl;
    function firstLineRect: CGRect; cdecl;
    function image: UIImage; cdecl;
    function initWithLayoutManager(layoutManager: NSLayoutManager; range: NSRange; unifyRects: Boolean): Pointer; overload; cdecl;
    function initWithLayoutManager(layoutManager: NSLayoutManager; range: NSRange): Pointer; overload; cdecl;
    function lastLineRect: CGRect; cdecl;
    function layoutManager: NSLayoutManager; cdecl;
  end;
  TUITextDragPreviewRenderer = class(TOCGenericImport<UITextDragPreviewRendererClass, UITextDragPreviewRenderer>) end;

  UIViewPropertyAnimatorClass = interface(NSObjectClass)
    ['{5AFE3855-1593-4E45-91AF-429C7F79B28C}']
    {class} function runningPropertyAnimatorWithDuration(duration: NSTimeInterval; delay: NSTimeInterval; options: UIViewAnimationOptions;
      animations: TUIViewPropertyAnimatorBlockMethod1; completion: TUIViewPropertyAnimatorBlockMethod2): Pointer; cdecl;
  end;

  UIViewPropertyAnimator = interface(NSObject)
    ['{3A8BCBCD-5AE2-4645-95B7-64BC5B7BE318}']
    procedure addAnimations(animation: TUIViewPropertyAnimatorBlockMethod1; delayFactor: CGFloat); overload; cdecl;
    procedure addAnimations(animation: TUIViewPropertyAnimatorBlockMethod1); overload; cdecl;
    procedure addCompletion(completion: TUIViewPropertyAnimatorBlockMethod2); cdecl;
    procedure continueAnimationWithTimingParameters(parameters: Pointer; durationFactor: CGFloat); cdecl;
    function delay: NSTimeInterval; cdecl;
    function duration: NSTimeInterval; cdecl;
    function initWithDuration(duration: NSTimeInterval; timingParameters: Pointer): Pointer; overload; cdecl;
    function initWithDuration(duration: NSTimeInterval; curve: UIViewAnimationCurve;
      animations: TUIViewPropertyAnimatorBlockMethod1): Pointer; overload; cdecl;
    function initWithDuration(duration: NSTimeInterval; controlPoint1: CGPoint; controlPoint2: CGPoint;
      animations: TUIViewPropertyAnimatorBlockMethod1): Pointer; overload; cdecl;
    function initWithDuration(duration: NSTimeInterval; dampingRatio: CGFloat;
      animations: TUIViewPropertyAnimatorBlockMethod1): Pointer; overload; cdecl;
    function isInterruptible: Boolean; cdecl;
    function isManualHitTestingEnabled: Boolean; cdecl;
    function isUserInteractionEnabled: Boolean; cdecl;
    function pausesOnCompletion: Boolean; cdecl;
    function scrubsLinearly: Boolean; cdecl;
    procedure setInterruptible(interruptible: Boolean); cdecl;
    procedure setManualHitTestingEnabled(manualHitTestingEnabled: Boolean); cdecl;
    procedure setPausesOnCompletion(pausesOnCompletion: Boolean); cdecl;
    procedure setScrubsLinearly(scrubsLinearly: Boolean); cdecl;
    procedure setUserInteractionEnabled(userInteractionEnabled: Boolean); cdecl;
    function timingParameters: Pointer; cdecl;
  end;
  TUIViewPropertyAnimator = class(TOCGenericImport<UIViewPropertyAnimatorClass, UIViewPropertyAnimator>) end;

  UIFeedbackGeneratorClass = interface(NSObjectClass)
    ['{D3887BBB-7F7A-40DE-9B42-873E323447A4}']
    {class} function feedbackGeneratorForView(view: UIView): Pointer; cdecl;
  end;

  UIFeedbackGenerator = interface(NSObject)
    ['{D6F64B22-9FF5-4DAD-80A0-AD110AF6FC97}']
    procedure prepare; cdecl;
  end;
  TUIFeedbackGenerator = class(TOCGenericImport<UIFeedbackGeneratorClass, UIFeedbackGenerator>) end;

  UISelectionFeedbackGeneratorClass = interface(UIFeedbackGeneratorClass)
    ['{C295558C-3EF8-4882-8E24-B0C28B23D31E}']
  end;

  UISelectionFeedbackGenerator = interface(UIFeedbackGenerator)
    ['{4CD06AE7-8139-451E-95D8-22A497FBA6F0}']
    procedure selectionChanged; cdecl;
    procedure selectionChangedAtLocation(location: CGPoint); cdecl;
  end;
  TUISelectionFeedbackGenerator = class(TOCGenericImport<UISelectionFeedbackGeneratorClass, UISelectionFeedbackGenerator>) end;

  UIImpactFeedbackGeneratorClass = interface(UIFeedbackGeneratorClass)
    ['{D88A3E5C-A2CC-469C-9F74-BC5D736E651B}']
    {class} function feedbackGeneratorWithStyle(style: UIImpactFeedbackStyle; forView: UIView): Pointer; cdecl;
  end;

  UIImpactFeedbackGenerator = interface(UIFeedbackGenerator)
    ['{320E0039-45E8-4FA7-BEAC-A4098B4A77AC}']
    procedure impactOccurred; cdecl;
    procedure impactOccurredAtLocation(location: CGPoint); cdecl;
    procedure impactOccurredWithIntensity(intensity: CGFloat; atLocation: CGPoint); overload; cdecl;
    procedure impactOccurredWithIntensity(intensity: CGFloat); overload; cdecl;
    function initWithStyle(style: UIImpactFeedbackStyle): Pointer; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("+feedbackGeneratorWithStyle:forView:", ios(10.0, API_TO_BE_DEPRECATED))
  end;
  TUIImpactFeedbackGenerator = class(TOCGenericImport<UIImpactFeedbackGeneratorClass, UIImpactFeedbackGenerator>) end;

  UINotificationFeedbackGeneratorClass = interface(UIFeedbackGeneratorClass)
    ['{D603E04C-1A55-4167-89B3-C702468543D2}']
  end;

  UINotificationFeedbackGenerator = interface(UIFeedbackGenerator)
    ['{01F53433-9DAA-4D69-8C1A-FC75B086E79D}']
    procedure notificationOccurred(notificationType: UINotificationFeedbackType); overload; cdecl;
    procedure notificationOccurred(notificationType: UINotificationFeedbackType; atLocation: CGPoint); overload; cdecl;
  end;
  TUINotificationFeedbackGenerator = class(TOCGenericImport<UINotificationFeedbackGeneratorClass, UINotificationFeedbackGenerator>) end;

  UICanvasFeedbackGeneratorClass = interface(UIFeedbackGeneratorClass)
    ['{E8889387-ED73-4204-8853-2BFC298E42C4}']
  end;

  UICanvasFeedbackGenerator = interface(UIFeedbackGenerator)
    ['{99F76DF4-E0DA-4A1A-B988-47BE9BF7853C}']
    procedure alignmentOccurredAtLocation(location: CGPoint); cdecl;
    procedure pathCompletedAtLocation(location: CGPoint); cdecl;
  end;
  TUICanvasFeedbackGenerator = class(TOCGenericImport<UICanvasFeedbackGeneratorClass, UICanvasFeedbackGenerator>) end;

  UITextInteractionDelegate = interface(IObjectiveC)
    ['{AA9E28DD-E7FC-4292-AD15-551A62C706E6}']
    procedure interactionDidEnd(interaction: UITextInteraction); cdecl;
    function interactionShouldBegin(interaction: UITextInteraction; atPoint: CGPoint): Boolean; cdecl;
    procedure interactionWillBegin(interaction: UITextInteraction); cdecl;
  end;

  UITextInteractionClass = interface(NSObjectClass)
    ['{E88C63FD-5756-41AE-9DA2-560766A93EF6}']
    {class} function textInteractionForMode(mode: UITextInteractionMode): Pointer; cdecl;
  end;

  UITextInteraction = interface(NSObject)
    ['{08444C97-068F-4BC4-A721-AD3F05A2C87B}']
    function delegate: Pointer; cdecl;
    function gesturesForFailureRequirements: NSArray; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setTextInput(textInput: UIResponder); cdecl;
    function textInput: UIResponder; cdecl;
    function textInteractionMode: UITextInteractionMode; cdecl;
  end;
  TUITextInteraction = class(TOCGenericImport<UITextInteractionClass, UITextInteraction>) end;

  UITextItemClass = interface(NSObjectClass)
    ['{230FE6CC-5B35-48B4-BFD6-B933FFDBC3F6}']
    {class} function new: Pointer; cdecl;
  end;

  UITextItem = interface(NSObject)
    ['{7CD2386D-0317-4AEF-BE1D-07C1682B55A0}']
    function contentType: UITextItemContentType; cdecl;
    function link: NSURL; cdecl;
    function range: NSRange; cdecl;
    function tagIdentifier: NSString; cdecl;
    function textAttachment: NSTextAttachment; cdecl;
  end;
  TUITextItem = class(TOCGenericImport<UITextItemClass, UITextItem>) end;

  UITextItemMenuPreviewClass = interface(NSObjectClass)
    ['{58802C71-2F61-4B57-BE12-2C4A2A4A4834}']
    {class} function defaultPreview: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UITextItemMenuPreview = interface(NSObject)
    ['{62782ACE-C481-4B9D-B2D2-44FCB7215B83}']
    function initWithView(view: UIView): Pointer; cdecl;
  end;
  TUITextItemMenuPreview = class(TOCGenericImport<UITextItemMenuPreviewClass, UITextItemMenuPreview>) end;

  UITextItemMenuConfigurationClass = interface(NSObjectClass)
    ['{77AD856C-9DAC-4FAB-A1C0-AECA37E2C9E2}']
    {class} function configurationWithMenu(menu: UIMenu): Pointer; cdecl;
    {class} function configurationWithPreview(preview: UITextItemMenuPreview; menu: UIMenu): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UITextItemMenuConfiguration = interface(NSObject)
    ['{0D7B8DB8-4EB5-4D59-86BA-8C03A45A2788}']
  end;
  TUITextItemMenuConfiguration = class(TOCGenericImport<UITextItemMenuConfigurationClass, UITextItemMenuConfiguration>) end;

  UITextLoupeSessionClass = interface(NSObjectClass)
    ['{3FC37145-B276-46E5-BBA5-DB527DC8ABE3}']
    {class} function beginLoupeSessionAtPoint(point: CGPoint; fromSelectionWidgetView: UIView; inView: UIView): Pointer; cdecl;
  end;

  UITextLoupeSession = interface(NSObject)
    ['{F9340DDF-1DD0-4BA5-9904-7F572895649A}']
    procedure invalidate; cdecl;
    procedure moveToPoint(point: CGPoint; withCaretRect: CGRect; trackingCaret: Boolean); cdecl;
  end;
  TUITextLoupeSession = class(TOCGenericImport<UITextLoupeSessionClass, UITextLoupeSession>) end;

  UIDocumentPropertiesClass = interface(NSObjectClass)
    ['{968F1A6C-29B0-4C39-83EC-667FCCCEB0CF}']
    {class} function new: Pointer; cdecl;
  end;

  UIDocumentProperties = interface(NSObject)
    ['{ACC0B6E8-585D-4F09-86AC-F2B43B684CDF}']
    function activityViewControllerProvider: TUIDocumentPropertiesBlockMethod3; cdecl;
    function dragItemsProvider: TUIDocumentPropertiesBlockMethod1; cdecl;
    function initWithMetadata(metadata: LPLinkMetadata): Pointer; cdecl;
    function initWithURL(url: NSURL): Pointer; cdecl;
    function metadata: LPLinkMetadata; cdecl;
    procedure setActivityViewControllerProvider(activityViewControllerProvider: TUIDocumentPropertiesBlockMethod2); cdecl;
    procedure setDragItemsProvider(dragItemsProvider: TUIDocumentPropertiesBlockMethod2); cdecl;
    procedure setMetadata(metadata: LPLinkMetadata); cdecl;
    procedure setWantsIconRepresentation(wantsIconRepresentation: Boolean); cdecl;
    function wantsIconRepresentation: Boolean; cdecl;
  end;
  TUIDocumentProperties = class(TOCGenericImport<UIDocumentPropertiesClass, UIDocumentProperties>) end;

  UIPencilInteractionClass = interface(NSObjectClass)
    ['{EFCEA7DF-A55B-4284-9B72-900FAFCC6A48}']
    {class} function preferredSqueezeAction: UIPencilPreferredAction; cdecl;
    {class} function preferredTapAction: UIPencilPreferredAction; cdecl;
    {class} function prefersHoverToolPreview: Boolean; cdecl;
    {class} function prefersPencilOnlyDrawing: Boolean; cdecl;
  end;

  UIPencilInteraction = interface(NSObject)
    ['{3B34EA78-BDC2-49CF-A31F-FFF9FC7BE2F5}']
    function delegate: Pointer; cdecl;
    function initWithDelegate(delegate: Pointer): Pointer; cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
  end;
  TUIPencilInteraction = class(TOCGenericImport<UIPencilInteractionClass, UIPencilInteraction>) end;

  UIPencilHoverPoseClass = interface(NSObjectClass)
    ['{27121805-2985-4CE8-B723-8ACC748FD9F8}']
    {class} function new: Pointer; cdecl;
  end;

  UIPencilHoverPose = interface(NSObject)
    ['{ABA0A97C-23A9-46EB-AAE5-F6A282B67EAB}']
    function altitudeAngle: CGFloat; cdecl;
    function azimuthAngle: CGFloat; cdecl;
    function azimuthUnitVector: CGVector; cdecl;
    function location: CGPoint; cdecl;
    function rollAngle: CGFloat; cdecl;
    function zOffset: CGFloat; cdecl;
  end;
  TUIPencilHoverPose = class(TOCGenericImport<UIPencilHoverPoseClass, UIPencilHoverPose>) end;

  UIPencilInteractionTapClass = interface(NSObjectClass)
    ['{C0047169-3F01-410A-BD84-657DD5240C28}']
    {class} function new: Pointer; cdecl;
  end;

  UIPencilInteractionTap = interface(NSObject)
    ['{B9C244B2-1845-4389-B135-F5FD1F08326C}']
    function hoverPose: UIPencilHoverPose; cdecl;
    function timestamp: NSTimeInterval; cdecl;
  end;
  TUIPencilInteractionTap = class(TOCGenericImport<UIPencilInteractionTapClass, UIPencilInteractionTap>) end;

  UIPencilInteractionSqueezeClass = interface(NSObjectClass)
    ['{96AE085D-D06F-459D-B169-F9FFA087835B}']
    {class} function new: Pointer; cdecl;
  end;

  UIPencilInteractionSqueeze = interface(NSObject)
    ['{7D41C0F0-6B60-4213-84F6-4637A3FD5674}']
    function hoverPose: UIPencilHoverPose; cdecl;
    function phase: UIPencilInteractionPhase; cdecl;
    function timestamp: NSTimeInterval; cdecl;
  end;
  TUIPencilInteractionSqueeze = class(TOCGenericImport<UIPencilInteractionSqueezeClass, UIPencilInteractionSqueeze>) end;

  UIPencilInteractionDelegate = interface(IObjectiveC)
    ['{E84CD839-F6E2-4F3D-A130-2F3EDAB71505}']
    procedure pencilInteraction(interaction: UIPencilInteraction; didReceiveSqueeze: UIPencilInteractionSqueeze); overload; cdecl;
    procedure pencilInteraction(interaction: UIPencilInteraction; didReceiveTap: UIPencilInteractionTap); overload; cdecl;
    procedure pencilInteractionDidTap(interaction: UIPencilInteraction); cdecl; // API_DEPRECATED("Use pencilInteraction(_:didReceiveTap:) instead", ios(12.1, 17.5), visionos(1.0, 1.2))
  end;

  UISceneWindowingBehaviorsClass = interface(NSObjectClass)
    ['{734CA4FD-31FE-49E7-B56E-AEC06F144BD2}']
    {class} function new: Pointer; cdecl;
  end;

  UISceneWindowingBehaviors = interface(NSObject)
    ['{F6FF72C2-09B2-4301-812C-CCADFE9F182D}']
    function isClosable: Boolean; cdecl;
    function isMiniaturizable: Boolean; cdecl;
    procedure setClosable(closable: Boolean); cdecl;
    procedure setMiniaturizable(miniaturizable: Boolean); cdecl;
  end;
  TUISceneWindowingBehaviors = class(TOCGenericImport<UISceneWindowingBehaviorsClass, UISceneWindowingBehaviors>) end;

  UISceneConfigurationClass = interface(NSObjectClass)
    ['{437E7062-F64B-4FD2-9E4D-FC096B82A6D9}']
    {class} function configurationWithName(name: NSString; sessionRole: UISceneSessionRole): Pointer; cdecl;
  end;

  UISceneConfiguration = interface(NSObject)
    ['{1A9D4C37-FC98-408C-9FA5-DE8045D4E27E}']
    function delegateClass: Pointer; cdecl;
    function initWithName(name: NSString; sessionRole: UISceneSessionRole): Pointer; cdecl;
    function name: NSString; cdecl;
    function role: UISceneSessionRole; cdecl;
    function sceneClass: Pointer; cdecl;
    procedure setDelegateClass(delegateClass: Pointer); cdecl;
    procedure setSceneClass(sceneClass: Pointer); cdecl;
    procedure setStoryboard(storyboard: UIStoryboard); cdecl;
    function storyboard: UIStoryboard; cdecl;
  end;
  TUISceneConfiguration = class(TOCGenericImport<UISceneConfigurationClass, UISceneConfiguration>) end;

  UISceneSessionClass = interface(NSObjectClass)
    ['{9CEB2DFB-615C-4081-B10E-557975D2493F}']
    {class} function new: Pointer; cdecl;
  end;

  UISceneSession = interface(NSObject)
    ['{202FC0C6-4694-4932-95B5-0EC96387CF22}']
    function configuration: UISceneConfiguration; cdecl;
    function persistentIdentifier: NSString; cdecl;
    function role: UISceneSessionRole; cdecl;
    function scene: UIScene; cdecl;
    procedure setStateRestorationActivity(stateRestorationActivity: NSUserActivity); cdecl;
    procedure setUserInfo(userInfo: NSDictionary); cdecl;
    function stateRestorationActivity: NSUserActivity; cdecl;
    function userInfo: NSDictionary; cdecl;
  end;
  TUISceneSession = class(TOCGenericImport<UISceneSessionClass, UISceneSession>) end;

  UISceneSessionActivationRequestClass = interface(NSObjectClass)
    ['{91F0498C-3F7D-49AD-9B77-7CFDC09239F8}']
    {class} function new: Pointer; cdecl;
    {class} function request: Pointer; cdecl;
    {class} function requestWithRole(role: UISceneSessionRole): Pointer; cdecl;
    {class} function requestWithSession(session: UISceneSession): Pointer; cdecl;
  end;

  UISceneSessionActivationRequest = interface(NSObject)
    ['{090CDC6B-2065-4EEA-B9D6-F5AEC059E5A8}']
    function options: UISceneActivationRequestOptions; cdecl;
    function role: UISceneSessionRole; cdecl;
    function session: UISceneSession; cdecl;
    procedure setOptions(options: UISceneActivationRequestOptions); cdecl;
    procedure setUserActivity(userActivity: NSUserActivity); cdecl;
    function userActivity: NSUserActivity; cdecl;
  end;
  TUISceneSessionActivationRequest = class(TOCGenericImport<UISceneSessionActivationRequestClass, UISceneSessionActivationRequest>) end;

  UISceneActivationConditionsClass = interface(NSObjectClass)
    ['{CDD57146-EEFA-467E-B34E-01257871FAD9}']
  end;

  UISceneActivationConditions = interface(NSObject)
    ['{D7F4E135-4DF4-4417-82DA-A018E025756C}']
    function canActivateForTargetContentIdentifierPredicate: NSPredicate; cdecl;
    function initWithCoder(aDecoder: NSCoder): Pointer; cdecl;
    function prefersToActivateForTargetContentIdentifierPredicate: NSPredicate; cdecl;
    procedure setCanActivateForTargetContentIdentifierPredicate(canActivateForTargetContentIdentifierPredicate: NSPredicate); cdecl;
    procedure setPrefersToActivateForTargetContentIdentifierPredicate(prefersToActivateForTargetContentIdentifierPredicate: NSPredicate); cdecl;
  end;
  TUISceneActivationConditions = class(TOCGenericImport<UISceneActivationConditionsClass, UISceneActivationConditions>) end;

  UIWindowSceneGeometryClass = interface(NSObjectClass)
    ['{84CE9B56-77AB-454C-8F10-05BA045AB0E3}']
    {class} function new: Pointer; cdecl;
  end;

  UIWindowSceneGeometry = interface(NSObject)
    ['{C96BE5E4-83AC-4592-A9B2-E0FCE49BDD68}']
    function interfaceOrientation: UIInterfaceOrientation; cdecl;
    function maximumSize: CGSize; cdecl;
    function minimumSize: CGSize; cdecl;
    function resizingRestrictions: UIWindowSceneResizingRestrictions; cdecl;
    function systemFrame: CGRect; cdecl;
  end;
  TUIWindowSceneGeometry = class(TOCGenericImport<UIWindowSceneGeometryClass, UIWindowSceneGeometry>) end;

  UIWindowSceneGeometryPreferencesClass = interface(NSObjectClass)
    ['{1260B24E-B1D2-41C7-B582-1182EF243D5A}']
    {class} function new: Pointer; cdecl;
  end;

  UIWindowSceneGeometryPreferences = interface(NSObject)
    ['{1EDC1E01-4A36-4F7C-88E5-7BA55A76B338}']
  end;
  TUIWindowSceneGeometryPreferences = class(TOCGenericImport<UIWindowSceneGeometryPreferencesClass, UIWindowSceneGeometryPreferences>) end;

  UIWindowSceneGeometryPreferencesMacClass = interface(UIWindowSceneGeometryPreferencesClass)
    ['{F7626E0F-731A-49F0-9A52-8A8944A277AC}']
  end;

  UIWindowSceneGeometryPreferencesMac = interface(UIWindowSceneGeometryPreferences)
    ['{8161D422-579C-442F-A8D0-209D16A8CEE4}']
    function initWithSystemFrame(systemFrame: CGRect): Pointer; cdecl;
    procedure setSystemFrame(systemFrame: CGRect); cdecl;
    function systemFrame: CGRect; cdecl;
  end;
  TUIWindowSceneGeometryPreferencesMac = class(TOCGenericImport<UIWindowSceneGeometryPreferencesMacClass, UIWindowSceneGeometryPreferencesMac>) end;

  UIWindowSceneGeometryPreferencesIOSClass = interface(UIWindowSceneGeometryPreferencesClass)
    ['{30DD4A83-30CC-43D1-A099-131634DF0B50}']
  end;

  UIWindowSceneGeometryPreferencesIOS = interface(UIWindowSceneGeometryPreferences)
    ['{014707E8-2E22-454D-B556-750E02FBE608}']
    function initWithInterfaceOrientations(interfaceOrientations: UIInterfaceOrientationMask): Pointer; cdecl;
    function interfaceOrientations: UIInterfaceOrientationMask; cdecl;
    procedure setInterfaceOrientations(interfaceOrientations: UIInterfaceOrientationMask); cdecl;
  end;
  TUIWindowSceneGeometryPreferencesIOS = class(TOCGenericImport<UIWindowSceneGeometryPreferencesIOSClass, UIWindowSceneGeometryPreferencesIOS>) end;

  UIWindowSceneGeometryPreferencesVisionClass = interface(UIWindowSceneGeometryPreferencesClass)
    ['{7114FAA0-A6F3-418F-8B8B-4EC22C1D18F5}']
  end;

  UIWindowSceneGeometryPreferencesVision = interface(UIWindowSceneGeometryPreferences)
    ['{7CA2B7AA-67DB-4055-A643-8E5211AA66C6}']
    function initWithSize(size: CGSize): Pointer; cdecl;
    function maximumSize: CGSize; cdecl;
    function minimumSize: CGSize; cdecl;
    function resizingRestrictions: UIWindowSceneResizingRestrictions; cdecl;
    procedure setMaximumSize(maximumSize: CGSize); cdecl;
    procedure setMinimumSize(minimumSize: CGSize); cdecl;
    procedure setResizingRestrictions(resizingRestrictions: UIWindowSceneResizingRestrictions); cdecl;
    procedure setSize(size: CGSize); cdecl;
    function size: CGSize; cdecl;
  end;
  TUIWindowSceneGeometryPreferencesVision = class(TOCGenericImport<UIWindowSceneGeometryPreferencesVisionClass, UIWindowSceneGeometryPreferencesVision>) end;

  UIWindowScenePlacementClass = interface(NSObjectClass)
    ['{887C5EFC-C6DA-475F-ADB9-66438501A8DE}']
    {class} function new: Pointer; cdecl;
  end;

  UIWindowScenePlacement = interface(NSObject)
    ['{6DD204DD-674C-457F-A71F-1E8B2264F8FE}']
  end;
  TUIWindowScenePlacement = class(TOCGenericImport<UIWindowScenePlacementClass, UIWindowScenePlacement>) end;

  UIWindowSceneStandardPlacementClass = interface(UIWindowScenePlacementClass)
    ['{F5EEDC3D-5149-48BF-8A52-710CE1AF1D0C}']
    {class} function standardPlacement: Pointer; cdecl;
  end;

  UIWindowSceneStandardPlacement = interface(UIWindowScenePlacement)
    ['{9EF60028-B7E3-4703-B644-8C304DD679CB}']
  end;
  TUIWindowSceneStandardPlacement = class(TOCGenericImport<UIWindowSceneStandardPlacementClass, UIWindowSceneStandardPlacement>) end;

  UIWindowSceneProminentPlacementClass = interface(UIWindowScenePlacementClass)
    ['{0439C7F3-E7DB-4AAD-8582-7A97BD6FC34D}']
    {class} function prominentPlacement: Pointer; cdecl;
  end;

  UIWindowSceneProminentPlacement = interface(UIWindowScenePlacement)
    ['{F46BFBF6-5DDF-48B2-8F0B-E94D7639E6B0}']
  end;
  TUIWindowSceneProminentPlacement = class(TOCGenericImport<UIWindowSceneProminentPlacementClass, UIWindowSceneProminentPlacement>) end;

  UIOpenURLContextClass = interface(NSObjectClass)
    ['{E8E005BC-FF9D-4F51-B75E-C760E02D661A}']
    {class} function new: Pointer; cdecl;
  end;

  UIOpenURLContext = interface(NSObject)
    ['{6985B628-31C2-492E-8A16-60ACBCD61783}']
    function options: UISceneOpenURLOptions; cdecl;
    function URL: NSURL; cdecl;
  end;
  TUIOpenURLContext = class(TOCGenericImport<UIOpenURLContextClass, UIOpenURLContext>) end;

  UIStatusBarManagerClass = interface(NSObjectClass)
    ['{7A6416F2-FE5F-4655-B831-907411521790}']
    {class} function new: Pointer; cdecl;
  end;

  UIStatusBarManager = interface(NSObject)
    ['{D8CF4B69-C9EF-4FCB-8911-46C83E40E12C}']
    function isStatusBarHidden: Boolean; cdecl;
    function statusBarFrame: CGRect; cdecl;
    function statusBarStyle: UIStatusBarStyle; cdecl;
  end;
  TUIStatusBarManager = class(TOCGenericImport<UIStatusBarManagerClass, UIStatusBarManager>) end;

  UIScreenshotServiceClass = interface(NSObjectClass)
    ['{21C51118-ECA7-4B0D-9383-CAB5F107EC21}']
    {class} function new: Pointer; cdecl;
  end;

  UIScreenshotService = interface(NSObject)
    ['{3B36D7CB-698A-481A-8609-EB1F12F266FB}']
    function delegate: Pointer; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function windowScene: UIWindowScene; cdecl;
  end;
  TUIScreenshotService = class(TOCGenericImport<UIScreenshotServiceClass, UIScreenshotService>) end;

  UIScreenshotServiceDelegate = interface(IObjectiveC)
    ['{9C7BCF5D-AA6C-460D-828E-D02BDB6B2527}']
    procedure screenshotService(screenshotService: UIScreenshotService; generatePDFRepresentationWithCompletion: Pointer); cdecl;
  end;

  UIMenuBuilder = interface(IObjectiveC)
    ['{FEBF42F5-A23D-4883-AE19-665D2157449A}']
    function actionForIdentifier(identifier: UIActionIdentifier): UIAction; cdecl;
    function commandForAction(action: SEL; propertyList: Pointer): UICommand; cdecl;
    procedure insertChildMenu(childMenu: UIMenu; atStartOfMenuForIdentifier: UIMenuIdentifier); cdecl;
    [MethodName('insertChildMenu:atEndOfMenuForIdentifier:')]
    procedure insertChildMenuAtEndOfMenuForIdentifier(childMenu: UIMenu; atEndOfMenuForIdentifier: UIMenuIdentifier); cdecl;
    procedure insertSiblingMenu(siblingMenu: UIMenu; beforeMenuForIdentifier: UIMenuIdentifier); cdecl;
    [MethodName('insertSiblingMenu:afterMenuForIdentifier:')]
    procedure insertSiblingMenuAfterMenuForIdentifier(siblingMenu: UIMenu; afterMenuForIdentifier: UIMenuIdentifier); cdecl;
    function menuForIdentifier(identifier: UIMenuIdentifier): UIMenu; cdecl;
    procedure removeMenuForIdentifier(removedIdentifier: UIMenuIdentifier); cdecl;
    procedure replaceChildrenOfMenuForIdentifier(parentIdentifier: UIMenuIdentifier; fromChildrenBlock: Pointer); cdecl;
    procedure replaceMenuForIdentifier(replacedIdentifier: UIMenuIdentifier; withMenu: UIMenu); cdecl;
    function system: UIMenuSystem; cdecl;
  end;

  UIDeferredMenuElementClass = interface(UIMenuElementClass)
    ['{C23DD42E-DDE1-4471-8FCE-46638DA092BC}']
    {class} function elementWithProvider(elementProvider: TUIDeferredMenuElementBlockMethod2): Pointer; cdecl;
    {class} function elementWithUncachedProvider(elementProvider: TUIDeferredMenuElementBlockMethod2): Pointer; cdecl;
  end;

  UIDeferredMenuElement = interface(UIMenuElement)
    ['{E3CA9936-3A64-4E7A-8080-4841052833D0}']
  end;
  TUIDeferredMenuElement = class(TOCGenericImport<UIDeferredMenuElementClass, UIDeferredMenuElement>) end;

  UIMenuSystemClass = interface(NSObjectClass)
    ['{B0407D68-CE77-4A4B-A8EC-46883533A018}']
    {class} function contextSystem: UIMenuSystem; cdecl;
    {class} function mainSystem: UIMenuSystem; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIMenuSystem = interface(NSObject)
    ['{158FF5F4-A2F8-4C41-8458-909C666EB895}']
    procedure setNeedsRebuild; cdecl;
    procedure setNeedsRevalidate; cdecl;
  end;
  TUIMenuSystem = class(TOCGenericImport<UIMenuSystemClass, UIMenuSystem>) end;

  UITextFormattingCoordinatorDelegate = interface(IObjectiveC)
    ['{5F0A7172-5905-4243-97B8-F3D7F70129F2}']
    procedure updateTextAttributesWithConversionHandler(conversionHandler: UITextAttributesConversionHandler); cdecl;
  end;

  UITextFormattingCoordinatorClass = interface(NSObjectClass)
    ['{3208976F-2C43-4AA4-9BB8-1B350A187E3D}']
    {class} function isFontPanelVisible: Boolean; cdecl;
    {class} function textFormattingCoordinatorForWindowScene(windowScene: UIWindowScene): Pointer; cdecl;
    {class} procedure toggleFontPanel(sender: Pointer); cdecl;
  end;

  UITextFormattingCoordinator = interface(NSObject)
    ['{66F24CDD-0F81-425C-B4FA-E0E5D291D0AF}']
    function delegate: Pointer; cdecl;
    function initWithWindowScene(windowScene: UIWindowScene): Pointer; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setSelectedAttributes(attributes: NSDictionary; isMultiple: Boolean); cdecl;
  end;
  TUITextFormattingCoordinator = class(TOCGenericImport<UITextFormattingCoordinatorClass, UITextFormattingCoordinator>) end;

  UIPointerRegionClass = interface(NSObjectClass)
    ['{7E967F9D-62CC-40F1-A470-C9269C272FDD}']
    {class} function new: Pointer; cdecl;
    {class} function regionWithRect(rect: CGRect; identifier: Pointer): Pointer; cdecl;
  end;

  UIPointerRegion = interface(NSObject)
    ['{A85551A0-1591-4AC1-8D43-66F06D048AE5}']
    function identifier: Pointer; cdecl;
    function latchingAxes: UIAxis; cdecl;
    function rect: CGRect; cdecl;
    procedure setLatchingAxes(latchingAxes: UIAxis); cdecl;
  end;
  TUIPointerRegion = class(TOCGenericImport<UIPointerRegionClass, UIPointerRegion>) end;

  UIPointerStyleClass = interface(UIHoverStyleClass)
    ['{6386E2B3-58D8-4994-BDD7-B59B99488A27}']
    {class} function hiddenPointerStyle: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
    {class} function styleWithEffect(effect: UIPointerEffect; shape: UIPointerShape): Pointer; cdecl;
    {class} function styleWithShape(shape: UIPointerShape; constrainedAxes: UIAxis): Pointer; cdecl;
    {class} function systemPointerStyle: Pointer; cdecl;
  end;

  UIPointerStyle = interface(UIHoverStyle)
    ['{6E0B9DD9-A9E4-44B0-B414-F1F5C1786368}']
    function accessories: NSArray; cdecl;
    procedure setAccessories(accessories: NSArray); cdecl;
  end;
  TUIPointerStyle = class(TOCGenericImport<UIPointerStyleClass, UIPointerStyle>) end;

  UIPointerEffectClass = interface(NSObjectClass)
    ['{6D65DA20-3620-41BE-8892-8EE89DDCC881}']
    {class} function effectWithPreview(preview: UITargetedPreview): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIPointerEffect = interface(NSObject)
    ['{50096979-1F75-4CED-B374-8B5B414F4147}']
    function preview: UITargetedPreview; cdecl;
  end;
  TUIPointerEffect = class(TOCGenericImport<UIPointerEffectClass, UIPointerEffect>) end;

  UIPointerHighlightEffectClass = interface(UIPointerEffectClass)
    ['{6F1BE91F-3081-4039-91C6-DF1CAE076000}']
  end;

  UIPointerHighlightEffect = interface(UIPointerEffect)
    ['{B83BBC42-02F9-41E0-B53D-6393669A7B7C}']
  end;
  TUIPointerHighlightEffect = class(TOCGenericImport<UIPointerHighlightEffectClass, UIPointerHighlightEffect>) end;

  UIPointerLiftEffectClass = interface(UIPointerEffectClass)
    ['{64735F07-1C6B-4516-90D7-92F6C4F70EEE}']
  end;

  UIPointerLiftEffect = interface(UIPointerEffect)
    ['{A0AC1119-38F5-433A-9350-2E921A840026}']
  end;
  TUIPointerLiftEffect = class(TOCGenericImport<UIPointerLiftEffectClass, UIPointerLiftEffect>) end;

  UIPointerHoverEffectClass = interface(UIPointerEffectClass)
    ['{01156288-370D-4B81-B23C-FE8BAD35596C}']
  end;

  UIPointerHoverEffect = interface(UIPointerEffect)
    ['{2B90D349-014B-4C61-AC59-16DAE66BC2E1}']
    function preferredTintMode: UIPointerEffectTintMode; cdecl;
    function prefersScaledContent: Boolean; cdecl;
    function prefersShadow: Boolean; cdecl;
    procedure setPreferredTintMode(preferredTintMode: UIPointerEffectTintMode); cdecl;
    procedure setPrefersScaledContent(prefersScaledContent: Boolean); cdecl;
    procedure setPrefersShadow(prefersShadow: Boolean); cdecl;
  end;
  TUIPointerHoverEffect = class(TOCGenericImport<UIPointerHoverEffectClass, UIPointerHoverEffect>) end;

  UIPointerShapeClass = interface(NSObjectClass)
    ['{8B8F8AD2-E1E5-497A-AB85-68F9A4E52400}']
    {class} function beamWithPreferredLength(length: CGFloat; axis: UIAxis): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
    {class} function shapeWithPath(path: UIBezierPath): Pointer; cdecl;
    {class} function shapeWithRoundedRect(rect: CGRect; cornerRadius: CGFloat): Pointer; overload; cdecl;
    {class} function shapeWithRoundedRect(rect: CGRect): Pointer; overload; cdecl;
  end;

  UIPointerShape = interface(NSObject)
    ['{7076D0A2-719E-4C07-9C09-3F3324453C81}']
  end;
  TUIPointerShape = class(TOCGenericImport<UIPointerShapeClass, UIPointerShape>) end;

  UIPointerInteractionClass = interface(NSObjectClass)
    ['{FD71F75B-7E93-4A3C-8F2C-ED802E2A1C30}']
  end;

  UIPointerInteraction = interface(NSObject)
    ['{A0D8BC3F-9A34-48A2-95A8-5803763DB487}']
    function delegate: Pointer; cdecl;
    function initWithDelegate(delegate: Pointer): Pointer; cdecl;
    procedure invalidate; cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
  end;
  TUIPointerInteraction = class(TOCGenericImport<UIPointerInteractionClass, UIPointerInteraction>) end;

  UIPointerInteractionDelegate = interface(IObjectiveC)
    ['{10890AC7-E5F5-4BE9-890C-83B1975ED8B2}']
    procedure pointerInteraction(interaction: UIPointerInteraction; willEnterRegion: UIPointerRegion; animator: Pointer); overload; cdecl;
    function pointerInteraction(interaction: UIPointerInteraction; styleForRegion: UIPointerRegion): UIPointerStyle; overload; cdecl;
    function pointerInteraction(interaction: UIPointerInteraction; regionForRequest: UIPointerRegionRequest;
      defaultRegion: UIPointerRegion): UIPointerRegion; overload; cdecl;
    [MethodName('pointerInteraction:willExitRegion:animator:')]
    procedure pointerInteractionWillExitRegion(interaction: UIPointerInteraction; willExitRegion: UIPointerRegion; animator: Pointer); cdecl;
  end;

  UIPointerRegionRequestClass = interface(NSObjectClass)
    ['{3546590D-FE8E-4A4D-AED5-7323579BF794}']
  end;

  UIPointerRegionRequest = interface(NSObject)
    ['{5A9A65F7-9701-4E08-8418-525286249870}']
    function location: CGPoint; cdecl;
    function modifiers: UIKeyModifierFlags; cdecl;
  end;
  TUIPointerRegionRequest = class(TOCGenericImport<UIPointerRegionRequestClass, UIPointerRegionRequest>) end;

  UIPointerInteractionAnimating = interface(IObjectiveC)
    ['{A12818EB-D137-43C0-A0CD-D0DA5E72D7ED}']
    procedure addAnimations(animations: Pointer); cdecl;
    procedure addCompletion(completion: Pointer); cdecl;
  end;

  UIBandSelectionInteractionClass = interface(NSObjectClass)
    ['{DF5D67F8-F48C-4FC0-BD38-A107EBE0099B}']
    {class} function new: Pointer; cdecl;
  end;

  UIBandSelectionInteraction = interface(NSObject)
    ['{962167AC-07C4-4091-A351-E056469FAA95}']
    function initialModifierFlags: UIKeyModifierFlags; cdecl;
    function initWithSelectionHandler(selectionHandler: TUIBandSelectionInteractionBlockMethod1): Pointer; cdecl;
    function isEnabled: Boolean; cdecl;
    function selectionRect: CGRect; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    procedure setShouldBeginHandler(shouldBeginHandler: TUIBandSelectionInteractionBlockMethod3); cdecl;
    function shouldBeginHandler: TUIBandSelectionInteractionBlockMethod2; cdecl;
    function state: UIBandSelectionInteractionState; cdecl;
  end;
  TUIBandSelectionInteraction = class(TOCGenericImport<UIBandSelectionInteractionClass, UIBandSelectionInteraction>) end;

  UIPointerAccessoryClass = interface(NSObjectClass)
    ['{BD3DA519-FCEC-4046-8C4B-0AC8F1C77A41}']
    {class} function accessoryWithShape(shape: UIPointerShape; position: UIPointerAccessoryPosition): Pointer; cdecl;
    {class} function arrowAccessoryWithPosition(position: UIPointerAccessoryPosition): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIPointerAccessory = interface(NSObject)
    ['{C1776A0A-0ECA-472A-A34E-2A03C8AB3E19}']
    function orientationMatchesAngle: Boolean; cdecl;
    function position: UIPointerAccessoryPosition; cdecl;
    procedure setOrientationMatchesAngle(orientationMatchesAngle: Boolean); cdecl;
    function shape: UIPointerShape; cdecl;
  end;
  TUIPointerAccessory = class(TOCGenericImport<UIPointerAccessoryClass, UIPointerAccessory>) end;

  UIColorWellClass = interface(UIControlClass)
    ['{4C6FC346-FCA9-4E44-A6A1-719B7535D30A}']
  end;

  UIColorWell = interface(UIControl)
    ['{4C07F72A-EB5B-4592-AEBF-1B1F1E8690C8}']
    function selectedColor: UIColor; cdecl;
    procedure setSelectedColor(selectedColor: UIColor); cdecl;
    procedure setSupportsAlpha(supportsAlpha: Boolean); cdecl;
    procedure setTitle(title: NSString); cdecl;
    function supportsAlpha: Boolean; cdecl;
    function title: NSString; cdecl;
  end;
  TUIColorWell = class(TOCGenericImport<UIColorWellClass, UIColorWell>) end;

  UIColorPickerViewControllerDelegate = interface(IObjectiveC)
    ['{813EB90C-9EEA-4C21-8AFC-9C32FC58DC51}']
    procedure colorPickerViewController(viewController: UIColorPickerViewController; didSelectColor: UIColor; continuously: Boolean); cdecl;
    procedure colorPickerViewControllerDidFinish(viewController: UIColorPickerViewController); cdecl;
    procedure colorPickerViewControllerDidSelectColor(viewController: UIColorPickerViewController); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("colorPickerViewController:didSelectColor:continuously:", ios(14.0, 15.0), visionos(1.0, 1.0))
  end;

  UIColorPickerViewControllerClass = interface(UIViewControllerClass)
    ['{20B21DBF-B2B9-4369-95A8-942C84BB484C}']
  end;

  UIColorPickerViewController = interface(UIViewController)
    ['{D18B217E-AC95-4924-91FD-5306B6015DEA}']
    function delegate: Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    function selectedColor: UIColor; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setSelectedColor(selectedColor: UIColor); cdecl;
    procedure setSupportsAlpha(supportsAlpha: Boolean); cdecl;
    function supportsAlpha: Boolean; cdecl;
  end;
  TUIColorPickerViewController = class(TOCGenericImport<UIColorPickerViewControllerClass, UIColorPickerViewController>) end;

  UIEventAttributionClass = interface(NSObjectClass)
    ['{D85AF2B1-1D41-4E92-A5B0-8C50C15F8ADB}']
    {class} function new: Pointer; cdecl;
  end;

  UIEventAttribution = interface(NSObject)
    ['{BC5703A6-1C3C-49B2-9F89-A44DFEE62FDB}']
    function destinationURL: NSURL; cdecl;
    function initWithSourceIdentifier(sourceIdentifier: UInt8; destinationURL: NSURL; sourceDescription: NSString;
      purchaser: NSString): Pointer; cdecl;
    function purchaser: NSString; cdecl;
    function reportEndpoint: NSURL; cdecl;
    function sourceDescription: NSString; cdecl;
    function sourceIdentifier: UInt8; cdecl;
  end;
  TUIEventAttribution = class(TOCGenericImport<UIEventAttributionClass, UIEventAttribution>) end;

  UIEventAttributionViewClass = interface(UIViewClass)
    ['{1AEB0302-26D3-4525-AB7A-5ADB38C98F87}']
  end;

  UIEventAttributionView = interface(UIView)
    ['{4A617B50-0237-49E3-8C86-CD4BBF7F6599}']
  end;
  TUIEventAttributionView = class(TOCGenericImport<UIEventAttributionViewClass, UIEventAttributionView>) end;

  UIWindowSceneActivationRequestOptionsClass = interface(UISceneActivationRequestOptionsClass)
    ['{A7B2CA2D-9090-48E3-A7B6-C265AE7E9D84}']
  end;

  UIWindowSceneActivationRequestOptions = interface(UISceneActivationRequestOptions)
    ['{93CC4BF9-463F-4C2C-AA3E-DD471917B70B}']
    function placement: UIWindowScenePlacement; cdecl;
    function preferredPresentationStyle: UIWindowScenePresentationStyle; cdecl; // API_DEPRECATED("Place use .placement with an appropriate UIWindowScenePlacement.", ios(15.0, 17.0), visionos(1.0, 1.0))
    procedure setPlacement(placement: UIWindowScenePlacement); cdecl;
    procedure setPreferredPresentationStyle(preferredPresentationStyle: UIWindowScenePresentationStyle); cdecl; // API_DEPRECATED("Place use .placement with an appropriate UIWindowScenePlacement.", ios(15.0, 17.0), visionos(1.0, 1.0))
  end;
  TUIWindowSceneActivationRequestOptions = class(TOCGenericImport<UIWindowSceneActivationRequestOptionsClass, UIWindowSceneActivationRequestOptions>) end;

  UIWindowSceneActivationConfigurationClass = interface(NSObjectClass)
    ['{ABB02262-59BA-4853-A6AE-DD43EB8F04D8}']
    {class} function new: Pointer; cdecl;
  end;

  UIWindowSceneActivationConfiguration = interface(NSObject)
    ['{11BFE5B2-FFDB-4B89-8718-5282DC5DB785}']
    function initWithUserActivity(userActivity: NSUserActivity): Pointer; cdecl;
    function options: UIWindowSceneActivationRequestOptions; cdecl;
    function preview: UITargetedPreview; cdecl;
    procedure setOptions(options: UIWindowSceneActivationRequestOptions); cdecl;
    procedure setPreview(preview: UITargetedPreview); cdecl;
    function userActivity: NSUserActivity; cdecl;
  end;
  TUIWindowSceneActivationConfiguration = class(TOCGenericImport<UIWindowSceneActivationConfigurationClass, UIWindowSceneActivationConfiguration>) end;

  UIWindowSceneActivationActionClass = interface(UIActionClass)
    ['{B6E04ACC-A294-4EA1-96F4-E200FF762B8C}']
    {class} function actionWithHandler(handler: UIActionHandler): Pointer; cdecl;
    {class} function actionWithIdentifier(identifier: UIActionIdentifier; alternateAction: UIAction;
      configurationProvider: UIWindowSceneActivationActionConfigurationProvider): Pointer; cdecl;
    {class} function actionWithTitle(title: NSString; image: UIImage; identifier: UIActionIdentifier; handler: UIActionHandler): Pointer; cdecl;
  end;

  UIWindowSceneActivationAction = interface(UIAction)
    ['{72214C92-4493-4639-AF33-1DC96EBB21F1}']
    procedure setTitle(title: NSString); cdecl;
    function title: NSString; cdecl;
  end;
  TUIWindowSceneActivationAction = class(TOCGenericImport<UIWindowSceneActivationActionClass, UIWindowSceneActivationAction>) end;

  UIWindowSceneActivationInteractionClass = interface(NSObjectClass)
    ['{66A1750E-0A68-4D51-9BD3-7422771A119D}']
    {class} function new: Pointer; cdecl;
  end;

  UIWindowSceneActivationInteraction = interface(NSObject)
    ['{114FB8F7-5DFF-4A28-B59C-9C48F9FB9098}']
    function initWithConfigurationProvider(configurationProvider: UIWindowSceneActivationInteractionConfigurationProvider;
      errorHandler: TUIWindowSceneActivationInteractionBlockMethod1): Pointer; cdecl;
  end;
  TUIWindowSceneActivationInteraction = class(TOCGenericImport<UIWindowSceneActivationInteractionClass, UIWindowSceneActivationInteraction>) end;

  UIWindowSceneDragInteractionClass = interface(NSObjectClass)
    ['{53CCD633-5551-4292-9B17-B4379D1651C4}']
  end;

  UIWindowSceneDragInteraction = interface(NSObject)
    ['{7FED39C4-D5A1-4199-BFDA-2E628C7073B9}']
    function gestureForFailureRelationships: UIGestureRecognizer; cdecl;
  end;
  TUIWindowSceneDragInteraction = class(TOCGenericImport<UIWindowSceneDragInteractionClass, UIWindowSceneDragInteraction>) end;

  UIFocusEffectClass = interface(NSObjectClass)
    ['{84BCF70B-E53D-49EF-B7A0-E74BF8E5DDB3}']
    {class} function effect: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIFocusEffect = interface(NSObject)
    ['{328F838D-680D-4F6E-8B60-988428FE0824}']
  end;
  TUIFocusEffect = class(TOCGenericImport<UIFocusEffectClass, UIFocusEffect>) end;

  UIFocusHaloEffectClass = interface(UIFocusEffectClass)
    ['{4ABE047D-0936-4ED4-B003-9B09C26046DC}']
    {class} function effectWithPath(bezierPath: UIBezierPath): Pointer; cdecl;
    {class} function effectWithRect(rect: CGRect): Pointer; cdecl;
    {class} function effectWithRoundedRect(rect: CGRect; cornerRadius: CGFloat; curve: CALayerCornerCurve): Pointer; cdecl;
  end;

  UIFocusHaloEffect = interface(UIFocusEffect)
    ['{71024D5C-16D9-44E7-B6AC-57D155A5514F}']
    function containerView: UIView; cdecl;
    function position: UIFocusHaloEffectPosition; cdecl;
    function referenceView: UIView; cdecl;
    procedure setContainerView(containerView: UIView); cdecl;
    procedure setPosition(position: UIFocusHaloEffectPosition); cdecl;
    procedure setReferenceView(referenceView: UIView); cdecl;
  end;
  TUIFocusHaloEffect = class(TOCGenericImport<UIFocusHaloEffectClass, UIFocusHaloEffect>) end;

  UIToolTipInteractionClass = interface(NSObjectClass)
    ['{A6848F4F-68C3-48E5-ADF8-505F970F7CF5}']
  end;

  UIToolTipInteraction = interface(NSObject)
    ['{ADD373E4-E81E-42BC-896F-6930F4ADF03B}']
    function defaultToolTip: NSString; cdecl;
    function delegate: Pointer; cdecl;
    function initWithDefaultToolTip(defaultToolTip: NSString): Pointer; cdecl;
    function isEnabled: Boolean; cdecl;
    procedure setDefaultToolTip(defaultToolTip: NSString); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
  end;
  TUIToolTipInteraction = class(TOCGenericImport<UIToolTipInteractionClass, UIToolTipInteraction>) end;

  UIToolTipConfigurationClass = interface(NSObjectClass)
    ['{5A4282AC-A883-42A3-8236-284D807464F0}']
    {class} function configurationWithToolTip(toolTip: NSString; inRect: CGRect): Pointer; overload; cdecl;
    {class} function configurationWithToolTip(toolTip: NSString): Pointer; overload; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIToolTipConfiguration = interface(NSObject)
    ['{EF8CBBF4-4E86-46F3-92DD-0623A6878060}']
    function sourceRect: CGRect; cdecl;
    function toolTip: NSString; cdecl;
  end;
  TUIToolTipConfiguration = class(TOCGenericImport<UIToolTipConfigurationClass, UIToolTipConfiguration>) end;

  UIToolTipInteractionDelegate = interface(IObjectiveC)
    ['{2F4712BE-A2D8-4BF0-8717-CE6BEA6D1535}']
    function toolTipInteraction(interaction: UIToolTipInteraction; configurationAtPoint: CGPoint): UIToolTipConfiguration; cdecl;
  end;

  UICalendarViewClass = interface(UIViewClass)
    ['{7D036B99-0666-4C27-93E9-556918294D84}']
  end;

  UICalendarView = interface(UIView)
    ['{336A3862-EE89-4553-9720-2324D34B6986}']
    function availableDateRange: NSDateInterval; cdecl;
    function calendar: NSCalendar; cdecl;
    function delegate: Pointer; cdecl;
    function fontDesign: UIFontDescriptorSystemDesign; cdecl;
    function locale: NSLocale; cdecl;
    procedure reloadDecorationsForDateComponents(dates: NSArray; animated: Boolean); cdecl;
    function selectionBehavior: UICalendarSelection; cdecl;
    procedure setAvailableDateRange(availableDateRange: NSDateInterval); cdecl;
    procedure setCalendar(calendar: NSCalendar); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setFontDesign(fontDesign: UIFontDescriptorSystemDesign); cdecl;
    procedure setLocale(locale: NSLocale); cdecl;
    procedure setSelectionBehavior(selectionBehavior: UICalendarSelection); cdecl;
    procedure setTimeZone(timeZone: NSTimeZone); cdecl;
    procedure setVisibleDateComponents(visibleDateComponents: NSDateComponents); overload; cdecl;
    procedure setVisibleDateComponents(dateComponents: NSDateComponents; animated: Boolean); overload; cdecl;
    procedure setWantsDateDecorations(wantsDateDecorations: Boolean); cdecl;
    function timeZone: NSTimeZone; cdecl;
    function visibleDateComponents: NSDateComponents; cdecl;
    function wantsDateDecorations: Boolean; cdecl;
  end;
  TUICalendarView = class(TOCGenericImport<UICalendarViewClass, UICalendarView>) end;

  UICalendarViewDelegate = interface(IObjectiveC)
    ['{AD7E55FB-15FE-44D6-8106-2B9AA539C9DA}']
    function calendarView(calendarView: UICalendarView; decorationForDateComponents: NSDateComponents): UICalendarViewDecoration; cdecl;
    [MethodName('calendarView:didChangeVisibleDateComponentsFrom:')]
    procedure calendarViewDidChangeVisibleDateComponentsFrom(calendarView: UICalendarView;
      didChangeVisibleDateComponentsFrom: NSDateComponents); cdecl;
  end;

  UICalendarViewDecorationClass = interface(NSObjectClass)
    ['{B6B6C893-A617-464C-B558-058A0B40F51E}']
    {class} function decorationWithColor(color: UIColor; size: UICalendarViewDecorationSize): Pointer; cdecl;
    {class} function decorationWithCustomViewProvider(customViewProvider: TUICalendarViewDecorationBlockMethod1): Pointer; cdecl;
    {class} function decorationWithImage(image: UIImage; color: UIColor; size: UICalendarViewDecorationSize): Pointer; overload; cdecl;
    {class} function decorationWithImage(image: UIImage): Pointer; overload; cdecl;
  end;

  UICalendarViewDecoration = interface(NSObject)
    ['{ACA14039-47CA-49A7-908C-88A2A948EF18}']
    function initWithCustomViewProvider(customViewProvider: TUICalendarViewDecorationBlockMethod1): Pointer; cdecl;
    function initWithImage(image: UIImage; color: UIColor; size: UICalendarViewDecorationSize): Pointer; cdecl;
  end;
  TUICalendarViewDecoration = class(TOCGenericImport<UICalendarViewDecorationClass, UICalendarViewDecoration>) end;

  UICalendarSelectionClass = interface(NSObjectClass)
    ['{E2BA0BFB-4709-4B4C-8262-2DD996FF2F09}']
    {class} function new: Pointer; cdecl;
  end;

  UICalendarSelection = interface(NSObject)
    ['{B8C18819-4664-40C7-AD20-06017BE5F383}']
    procedure updateSelectableDates; cdecl;
  end;
  TUICalendarSelection = class(TOCGenericImport<UICalendarSelectionClass, UICalendarSelection>) end;

  UICalendarSelectionSingleDateClass = interface(UICalendarSelectionClass)
    ['{54C09815-A639-43CC-857E-E57FBD6BD676}']
  end;

  UICalendarSelectionSingleDate = interface(UICalendarSelection)
    ['{52175EDF-B208-4869-A2D4-287E363D7B96}']
    function delegate: Pointer; cdecl;
    function initWithDelegate(delegate: Pointer): Pointer; cdecl;
    function selectedDate: NSDateComponents; cdecl;
    procedure setSelectedDate(selectedDate: NSDateComponents); overload; cdecl;
    procedure setSelectedDate(selectedDate: NSDateComponents; animated: Boolean); overload; cdecl;
  end;
  TUICalendarSelectionSingleDate = class(TOCGenericImport<UICalendarSelectionSingleDateClass, UICalendarSelectionSingleDate>) end;

  UICalendarSelectionSingleDateDelegate = interface(IObjectiveC)
    ['{C62F8E7D-729F-444D-AD08-7897C7F2A8E7}']
    procedure dateSelection(selection: UICalendarSelectionSingleDate; didSelectDate: NSDateComponents); cdecl;
    [MethodName('dateSelection:canSelectDate:')]
    function dateSelectionCanSelectDate(selection: UICalendarSelectionSingleDate; canSelectDate: NSDateComponents): Boolean; cdecl;
  end;

  UICalendarSelectionMultiDateClass = interface(UICalendarSelectionClass)
    ['{06B01414-204E-48E4-A4B9-A81DAE84FC0A}']
  end;

  UICalendarSelectionMultiDate = interface(UICalendarSelection)
    ['{A9741DBF-B7C3-4758-AB33-9A378966E6BD}']
    function delegate: Pointer; cdecl;
    function initWithDelegate(delegate: Pointer): Pointer; cdecl;
    function selectedDates: NSArray; cdecl;
    procedure setSelectedDates(selectedDates: NSArray); overload; cdecl;
    procedure setSelectedDates(selectedDates: NSArray; animated: Boolean); overload; cdecl;
  end;
  TUICalendarSelectionMultiDate = class(TOCGenericImport<UICalendarSelectionMultiDateClass, UICalendarSelectionMultiDate>) end;

  UICalendarSelectionMultiDateDelegate = interface(IObjectiveC)
    ['{A3561722-BFC2-4C5B-9D73-C2A77A27DAFF}']
    procedure multiDateSelection(selection: UICalendarSelectionMultiDate; didSelectDate: NSDateComponents); cdecl;
    [MethodName('multiDateSelection:canDeselectDate:')]
    function multiDateSelectionCanDeselectDate(selection: UICalendarSelectionMultiDate; canDeselectDate: NSDateComponents): Boolean; cdecl;
    [MethodName('multiDateSelection:canSelectDate:')]
    function multiDateSelectionCanSelectDate(selection: UICalendarSelectionMultiDate; canSelectDate: NSDateComponents): Boolean; cdecl;
    [MethodName('multiDateSelection:didDeselectDate:')]
    procedure multiDateSelectionDidDeselectDate(selection: UICalendarSelectionMultiDate; didDeselectDate: NSDateComponents); cdecl;
  end;

  UIEditMenuConfigurationClass = interface(NSObjectClass)
    ['{8D6F1B7D-1D68-4A51-9C82-45908CC34869}']
    {class} function configurationWithIdentifier(identifier: Pointer; sourcePoint: CGPoint): Pointer; cdecl;
    {class} function new: Pointer; cdecl;
  end;

  UIEditMenuConfiguration = interface(NSObject)
    ['{48584C5A-E935-4200-81BD-8D991AC51AEC}']
    function identifier: Pointer; cdecl;
    function preferredArrowDirection: UIEditMenuArrowDirection; cdecl;
    procedure setPreferredArrowDirection(preferredArrowDirection: UIEditMenuArrowDirection); cdecl;
    function sourcePoint: CGPoint; cdecl;
  end;
  TUIEditMenuConfiguration = class(TOCGenericImport<UIEditMenuConfigurationClass, UIEditMenuConfiguration>) end;

  UIEditMenuInteractionClass = interface(NSObjectClass)
    ['{A16BDDBA-7275-4A48-9B0E-841ACB350D63}']
    {class} function new: Pointer; cdecl;
  end;

  UIEditMenuInteraction = interface(NSObject)
    ['{00B7BF4C-3B8B-4B5A-A262-AB292A5BD9C7}']
    function delegate: Pointer; cdecl;
    procedure dismissMenu; cdecl;
    function initWithDelegate(delegate: Pointer): Pointer; cdecl;
    function locationInView(view: UIView): CGPoint; cdecl;
    procedure presentEditMenuWithConfiguration(configuration: UIEditMenuConfiguration); cdecl;
    procedure reloadVisibleMenu; cdecl;
    procedure updateVisibleMenuPositionAnimated(animated: Boolean); cdecl;
  end;
  TUIEditMenuInteraction = class(TOCGenericImport<UIEditMenuInteractionClass, UIEditMenuInteraction>) end;

  UIEditMenuInteractionAnimating = interface(IObjectiveC)
    ['{21EDF463-5332-475A-8D62-1F5199531B18}']
    procedure addAnimations(animations: Pointer); cdecl;
    procedure addCompletion(completion: Pointer); cdecl;
  end;

  UIEditMenuInteractionDelegate = interface(IObjectiveC)
    ['{EF5251A5-DE5D-4CE5-B81B-34218495C18B}']
    procedure editMenuInteraction(interaction: UIEditMenuInteraction; willPresentMenuForConfiguration: UIEditMenuConfiguration;
      animator: Pointer); overload; cdecl;
    function editMenuInteraction(interaction: UIEditMenuInteraction; targetRectForConfiguration: UIEditMenuConfiguration): CGRect; overload; cdecl;
    function editMenuInteraction(interaction: UIEditMenuInteraction; menuForConfiguration: UIEditMenuConfiguration;
      suggestedActions: NSArray): UIMenu; overload; cdecl;
    [MethodName('editMenuInteraction:willDismissMenuForConfiguration:animator:')]
    procedure editMenuInteractionWillDismissMenuForConfiguration(interaction: UIEditMenuInteraction;
      willDismissMenuForConfiguration: UIEditMenuConfiguration; animator: Pointer); cdecl;
  end;

  UIContentUnavailableImagePropertiesClass = interface(NSObjectClass)
    ['{FE7B2D33-FE49-4424-8D2C-339A998E903F}']
  end;

  UIContentUnavailableImageProperties = interface(NSObject)
    ['{4C81B687-794E-4DAE-B32E-BCD3D754AE9D}']
    function accessibilityIgnoresInvertColors: Boolean; cdecl;
    function cornerRadius: CGFloat; cdecl;
    function maximumSize: CGSize; cdecl;
    function preferredSymbolConfiguration: UIImageSymbolConfiguration; cdecl;
    procedure setAccessibilityIgnoresInvertColors(accessibilityIgnoresInvertColors: Boolean); cdecl;
    procedure setCornerRadius(cornerRadius: CGFloat); cdecl;
    procedure setMaximumSize(maximumSize: CGSize); cdecl;
    procedure setPreferredSymbolConfiguration(preferredSymbolConfiguration: UIImageSymbolConfiguration); cdecl;
    procedure setTintColor(tintColor: UIColor); cdecl;
    function tintColor: UIColor; cdecl;
  end;
  TUIContentUnavailableImageProperties = class(TOCGenericImport<UIContentUnavailableImagePropertiesClass, UIContentUnavailableImageProperties>) end;

  UIContentUnavailableTextPropertiesClass = interface(NSObjectClass)
    ['{C59D0EB7-BC13-4881-B0CA-C68F7A907C6F}']
  end;

  UIContentUnavailableTextProperties = interface(NSObject)
    ['{751CC7D6-4C30-449D-8BDD-47D586C30CC5}']
    function adjustsFontSizeToFitWidth: Boolean; cdecl;
    function allowsDefaultTighteningForTruncation: Boolean; cdecl;
    function color: UIColor; cdecl;
    function font: UIFont; cdecl;
    function lineBreakMode: NSLineBreakMode; cdecl;
    function minimumScaleFactor: CGFloat; cdecl;
    function numberOfLines: NSInteger; cdecl;
    procedure setAdjustsFontSizeToFitWidth(adjustsFontSizeToFitWidth: Boolean); cdecl;
    procedure setAllowsDefaultTighteningForTruncation(allowsDefaultTighteningForTruncation: Boolean); cdecl;
    procedure setColor(color: UIColor); cdecl;
    procedure setFont(font: UIFont); cdecl;
    procedure setLineBreakMode(lineBreakMode: NSLineBreakMode); cdecl;
    procedure setMinimumScaleFactor(minimumScaleFactor: CGFloat); cdecl;
    procedure setNumberOfLines(numberOfLines: NSInteger); cdecl;
  end;
  TUIContentUnavailableTextProperties = class(TOCGenericImport<UIContentUnavailableTextPropertiesClass, UIContentUnavailableTextProperties>) end;

  UIContentUnavailableButtonPropertiesClass = interface(NSObjectClass)
    ['{896782D6-1E4E-4942-9816-85BC4A85394A}']
  end;

  UIContentUnavailableButtonProperties = interface(NSObject)
    ['{7F640FE1-C7A4-40E7-9316-2833A75C7E14}']
    function isEnabled: Boolean; cdecl;
    function menu: UIMenu; cdecl;
    function primaryAction: UIAction; cdecl;
    function role: UIButtonRole; cdecl;
    procedure setEnabled(enabled: Boolean); cdecl;
    procedure setMenu(menu: UIMenu); cdecl;
    procedure setPrimaryAction(primaryAction: UIAction); cdecl;
    procedure setRole(role: UIButtonRole); cdecl;
  end;
  TUIContentUnavailableButtonProperties = class(TOCGenericImport<UIContentUnavailableButtonPropertiesClass, UIContentUnavailableButtonProperties>) end;

  UIContentUnavailableConfigurationClass = interface(NSObjectClass)
    ['{90A39D04-63C4-4971-8C85-3C0D3E4F9AC0}']
    {class} function emptyConfiguration: Pointer; cdecl;
    {class} function loadingConfiguration: Pointer; cdecl;
    {class} function new: Pointer; cdecl;
    {class} function searchConfiguration: Pointer; cdecl;
  end;

  UIContentUnavailableConfiguration = interface(NSObject)
    ['{F4937889-19BF-4C7D-96B7-961283A1C181}']
    function alignment: UIContentUnavailableAlignment; cdecl;
    function attributedText: NSAttributedString; cdecl;
    function axesPreservingSuperviewLayoutMargins: UIAxis; cdecl;
    function background: UIBackgroundConfiguration; cdecl;
    function button: UIButtonConfiguration; cdecl;
    function buttonProperties: UIContentUnavailableButtonProperties; cdecl;
    function buttonToSecondaryButtonPadding: CGFloat; cdecl;
    function directionalLayoutMargins: NSDirectionalEdgeInsets; cdecl;
    function image: UIImage; cdecl;
    function imageProperties: UIContentUnavailableImageProperties; cdecl;
    function imageToTextPadding: CGFloat; cdecl;
    function secondaryAttributedText: NSAttributedString; cdecl;
    function secondaryButton: UIButtonConfiguration; cdecl;
    function secondaryButtonProperties: UIContentUnavailableButtonProperties; cdecl;
    function secondaryText: NSString; cdecl;
    function secondaryTextProperties: UIContentUnavailableTextProperties; cdecl;
    procedure setAlignment(alignment: UIContentUnavailableAlignment); cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    procedure setAxesPreservingSuperviewLayoutMargins(axesPreservingSuperviewLayoutMargins: UIAxis); cdecl;
    procedure setBackground(background: UIBackgroundConfiguration); cdecl;
    procedure setButton(button: UIButtonConfiguration); cdecl;
    procedure setButtonToSecondaryButtonPadding(buttonToSecondaryButtonPadding: CGFloat); cdecl;
    procedure setDirectionalLayoutMargins(directionalLayoutMargins: NSDirectionalEdgeInsets); cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setImageToTextPadding(imageToTextPadding: CGFloat); cdecl;
    procedure setSecondaryAttributedText(secondaryAttributedText: NSAttributedString); cdecl;
    procedure setSecondaryButton(secondaryButton: UIButtonConfiguration); cdecl;
    procedure setSecondaryText(secondaryText: NSString); cdecl;
    procedure setText(text: NSString); cdecl;
    procedure setTextToButtonPadding(textToButtonPadding: CGFloat); cdecl;
    procedure setTextToSecondaryTextPadding(textToSecondaryTextPadding: CGFloat); cdecl;
    function text: NSString; cdecl;
    function textProperties: UIContentUnavailableTextProperties; cdecl;
    function textToButtonPadding: CGFloat; cdecl;
    function textToSecondaryTextPadding: CGFloat; cdecl;
  end;
  TUIContentUnavailableConfiguration = class(TOCGenericImport<UIContentUnavailableConfigurationClass, UIContentUnavailableConfiguration>) end;

  UIContentUnavailableConfigurationStateClass = interface(NSObjectClass)
    ['{C64C0D29-A29B-46FB-A2AB-6006EA3018F4}']
    {class} function new: Pointer; cdecl;
  end;

  UIContentUnavailableConfigurationState = interface(NSObject)
    ['{CA91C8B3-C1B2-4082-8535-31568518B803}']
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithTraitCollection(traitCollection: UITraitCollection): Pointer; cdecl;
    function searchText: NSString; cdecl;
    procedure setSearchText(searchText: NSString); cdecl;
    procedure setTraitCollection(traitCollection: UITraitCollection); cdecl;
    function traitCollection: UITraitCollection; cdecl;
  end;
  TUIContentUnavailableConfigurationState = class(TOCGenericImport<UIContentUnavailableConfigurationStateClass, UIContentUnavailableConfigurationState>) end;

  UIContentUnavailableViewClass = interface(UIViewClass)
    ['{544F2EE8-DC73-46A4-8D6D-57827F3A7BC5}']
    {class} function new: Pointer; cdecl;
  end;

  UIContentUnavailableView = interface(UIView)
    ['{E29CE237-68A6-43F4-84C3-8F1254221EBD}']
    function configuration: UIContentUnavailableConfiguration; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithConfiguration(configuration: UIContentUnavailableConfiguration): Pointer; cdecl;
    function initWithFrame(frame: CGRect): Pointer; cdecl;
    function isScrollEnabled: Boolean; cdecl;
    procedure setConfiguration(configuration: UIContentUnavailableConfiguration); cdecl;
    procedure setScrollEnabled(scrollEnabled: Boolean); cdecl;
  end;
  TUIContentUnavailableView = class(TOCGenericImport<UIContentUnavailableViewClass, UIContentUnavailableView>) end;

  NSTextLocation = interface(IObjectiveC)
    ['{56B4D701-C839-4C50-BA32-8DA20EE1F47B}']
    function compare(location: Pointer): NSComparisonResult; cdecl;
  end;

  NSTextRangeClass = interface(NSObjectClass)
    ['{2F8C3460-9B9C-4875-83AD-1C263341CE9A}']
    {class} function new: Pointer; cdecl;
  end;

  NSTextRange = interface(NSObject)
    ['{FC153C20-F35E-4DDB-9EC5-FD53E20AC40C}']
    function containsLocation(location: Pointer): Boolean; cdecl;
    function containsRange(textRange: NSTextRange): Boolean; cdecl;
    function endLocation: Pointer; cdecl;
    function initWithLocation(location: Pointer): Pointer; overload; cdecl;
    function initWithLocation(location: Pointer; endLocation: Pointer): Pointer; overload; cdecl;
    function intersectsWithTextRange(textRange: NSTextRange): Boolean; cdecl;
    function isEmpty: Boolean; cdecl;
    function isEqualToTextRange(textRange: NSTextRange): Boolean; cdecl;
    function location: Pointer; cdecl;
    function textRangeByFormingUnionWithTextRange(textRange: NSTextRange): Pointer; cdecl;
    function textRangeByIntersectingWithTextRange(textRange: NSTextRange): Pointer; cdecl;
  end;
  TNSTextRange = class(TOCGenericImport<NSTextRangeClass, NSTextRange>) end;

  NSTextSelectionClass = interface(NSObjectClass)
    ['{F6A539D3-DB44-4FEC-AB41-2F5183B6C9CF}']
  end;

  NSTextSelection = interface(NSObject)
    ['{0EDB6C27-DA7D-4B00-8E00-28DEB0EAE674}']
    function affinity: NSTextSelectionAffinity; cdecl;
    function anchorPositionOffset: CGFloat; cdecl;
    function granularity: NSTextSelectionGranularity; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithLocation(location: Pointer; affinity: NSTextSelectionAffinity): Pointer; cdecl;
    function initWithRange(range: NSTextRange; affinity: NSTextSelectionAffinity; granularity: NSTextSelectionGranularity): Pointer; cdecl;
    function initWithRanges(textRanges: NSArray; affinity: NSTextSelectionAffinity; granularity: NSTextSelectionGranularity): Pointer; cdecl;
    function isLogical: Boolean; cdecl;
    function isTransient: Boolean; cdecl;
    function secondarySelectionLocation: Pointer; cdecl;
    procedure setAnchorPositionOffset(anchorPositionOffset: CGFloat); cdecl;
    procedure setLogical(logical: Boolean); cdecl;
    procedure setSecondarySelectionLocation(secondarySelectionLocation: Pointer); cdecl;
    procedure setTypingAttributes(typingAttributes: NSDictionary); cdecl;
    function textRanges: NSArray; cdecl;
    function textSelectionWithTextRanges(textRanges: NSArray): NSTextSelection; cdecl;
    function typingAttributes: NSDictionary; cdecl;
  end;
  TNSTextSelection = class(TOCGenericImport<NSTextSelectionClass, NSTextSelection>) end;

  NSTextSelectionNavigationClass = interface(NSObjectClass)
    ['{D06691E4-BBAA-42E6-B530-82EFED48C49C}']
    {class} function new: Pointer; cdecl;
  end;

  NSTextSelectionNavigation = interface(NSObject)
    ['{99FF112B-3DB5-495C-9AE1-E6F5D06BCF0C}']
    function allowsNonContiguousRanges: Boolean; cdecl;
    function deletionRangesForTextSelection(textSelection: NSTextSelection; direction: NSTextSelectionNavigationDirection;
      destination: NSTextSelectionNavigationDestination; allowsDecomposition: Boolean): NSArray; cdecl;
    function destinationSelectionForTextSelection(textSelection: NSTextSelection; direction: NSTextSelectionNavigationDirection;
      destination: NSTextSelectionNavigationDestination; extending: Boolean; confined: Boolean): NSTextSelection; cdecl;
    procedure flushLayoutCache; cdecl;
    function initWithDataSource(dataSource: Pointer): Pointer; cdecl;
    function resolvedInsertionLocationForTextSelection(textSelection: NSTextSelection;
      writingDirection: NSTextSelectionNavigationWritingDirection): Pointer; cdecl;
    function rotatesCoordinateSystemForLayoutOrientation: Boolean; cdecl;
    procedure setAllowsNonContiguousRanges(allowsNonContiguousRanges: Boolean); cdecl;
    procedure setRotatesCoordinateSystemForLayoutOrientation(rotatesCoordinateSystemForLayoutOrientation: Boolean); cdecl;
    function textSelectionDataSource: Pointer; cdecl;
    function textSelectionForSelectionGranularity(selectionGranularity: NSTextSelectionGranularity; enclosingPoint: CGPoint;
      inContainerAtLocation: Pointer): NSTextSelection; overload; cdecl;
    function textSelectionForSelectionGranularity(selectionGranularity: NSTextSelectionGranularity;
      enclosingTextSelection: NSTextSelection): NSTextSelection; overload; cdecl;
    function textSelectionsInteractingAtPoint(point: CGPoint; inContainerAtLocation: Pointer; anchors: NSArray;
      modifiers: NSTextSelectionNavigationModifier; selecting: Boolean; bounds: CGRect): NSArray; cdecl;
  end;
  TNSTextSelectionNavigation = class(TOCGenericImport<NSTextSelectionNavigationClass, NSTextSelectionNavigation>) end;

  NSTextSelectionDataSource = interface(IObjectiveC)
    ['{F1A55DF9-3D6E-42D1-B85E-F97913591897}']
    function baseWritingDirectionAtLocation(location: Pointer): NSTextSelectionNavigationWritingDirection; cdecl;
    function documentRange: NSTextRange; cdecl;
    procedure enumerateCaretOffsetsInLineFragmentAtLocation(location: Pointer; usingBlock: Pointer); cdecl;
    procedure enumerateContainerBoundariesFromLocation(location: Pointer; reverse: Boolean; usingBlock: Pointer); cdecl;
    procedure enumerateSubstringsFromLocation(location: Pointer; options: NSStringEnumerationOptions; usingBlock: Pointer); cdecl;
    function lineFragmentRangeForPoint(point: CGPoint; inContainerAtLocation: Pointer): NSTextRange; cdecl;
    function locationFromLocation(location: Pointer; withOffset: NSInteger): Pointer; cdecl;
    function offsetFromLocation(from: Pointer; toLocation: Pointer): NSInteger; cdecl;
    function textLayoutOrientationAtLocation(location: Pointer): NSTextSelectionNavigationLayoutOrientation; cdecl;
    function textRangeForSelectionGranularity(selectionGranularity: NSTextSelectionGranularity; enclosingLocation: Pointer): NSTextRange; cdecl;
  end;

  NSTextViewportLayoutControllerDelegate = interface(IObjectiveC)
    ['{50294D90-5A1D-477C-87DB-8AF19EDCE2D8}']
    procedure textViewportLayoutController(textViewportLayoutController: NSTextViewportLayoutController;
      configureRenderingSurfaceForTextLayoutFragment: NSTextLayoutFragment); cdecl;
    procedure textViewportLayoutControllerDidLayout(textViewportLayoutController: NSTextViewportLayoutController); cdecl;
    procedure textViewportLayoutControllerWillLayout(textViewportLayoutController: NSTextViewportLayoutController); cdecl;
    function viewportBoundsForTextViewportLayoutController(textViewportLayoutController: NSTextViewportLayoutController): CGRect; cdecl;
  end;

  NSTextViewportLayoutControllerClass = interface(NSObjectClass)
    ['{35350D70-10FC-4E5A-9F99-CF8857895DB1}']
    {class} function new: Pointer; cdecl;
  end;

  NSTextViewportLayoutController = interface(NSObject)
    ['{559B64C6-45AF-4891-ADB8-ABA3054953BB}']
    procedure adjustViewportByVerticalOffset(verticalOffset: CGFloat); cdecl;
    function delegate: Pointer; cdecl;
    function initWithTextLayoutManager(textLayoutManager: NSTextLayoutManager): Pointer; cdecl;
    procedure layoutViewport; cdecl;
    function relocateViewportToTextLocation(textLocation: Pointer): CGFloat; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function textLayoutManager: NSTextLayoutManager; cdecl;
    function viewportBounds: CGRect; cdecl;
    function viewportRange: NSTextRange; cdecl;
  end;
  TNSTextViewportLayoutController = class(TOCGenericImport<NSTextViewportLayoutControllerClass, NSTextViewportLayoutController>) end;

  NSTextElementProvider = interface(IObjectiveC)
    ['{6ED9165E-6F76-48FE-9762-2AFD5643EA71}']
    function adjustedRangeFromRange(textRange: NSTextRange; forEditingTextSelection: Boolean): NSTextRange; cdecl;
    function documentRange: NSTextRange; cdecl;
    function enumerateTextElementsFromLocation(textLocation: Pointer; options: NSTextContentManagerEnumerationOptions;
      usingBlock: Pointer): Pointer; cdecl;
    function locationFromLocation(location: Pointer; withOffset: NSInteger): Pointer; cdecl;
    function offsetFromLocation(from: Pointer; toLocation: Pointer): NSInteger; cdecl;
    procedure replaceContentsInRange(range: NSTextRange; withTextElements: NSArray); cdecl;
    procedure synchronizeToBackingStore(completionHandler: Pointer); cdecl;
  end;

  NSTextContentManagerClass = interface(NSObjectClass)
    ['{385700F4-9ED7-414D-BFD3-7A113D70E289}']
  end;

  NSTextContentManager = interface(NSObject)
    ['{656E0553-E931-4AF2-92E6-FC40BB505ED7}']
    procedure addTextLayoutManager(textLayoutManager: NSTextLayoutManager); cdecl;
    function automaticallySynchronizesTextLayoutManagers: Boolean; cdecl;
    function automaticallySynchronizesToBackingStore: Boolean; cdecl;
    function delegate: Pointer; cdecl;
    function hasEditingTransaction: Boolean; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    procedure performEditingTransactionUsingBlock(transaction: TNSTextContentManagerBlockMethod2); cdecl;
    function primaryTextLayoutManager: NSTextLayoutManager; cdecl;
    procedure recordEditActionInRange(originalTextRange: NSTextRange; newTextRange: NSTextRange); cdecl;
    procedure removeTextLayoutManager(textLayoutManager: NSTextLayoutManager); cdecl;
    procedure setAutomaticallySynchronizesTextLayoutManagers(automaticallySynchronizesTextLayoutManagers: Boolean); cdecl;
    procedure setAutomaticallySynchronizesToBackingStore(automaticallySynchronizesToBackingStore: Boolean); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setPrimaryTextLayoutManager(primaryTextLayoutManager: NSTextLayoutManager); cdecl;
    procedure synchronizeTextLayoutManagers(completionHandler: TNSTextContentManagerBlockMethod1); cdecl;
    function textElementsForRange(range: NSTextRange): NSArray; cdecl;
    function textLayoutManagers: NSArray; cdecl;
  end;
  TNSTextContentManager = class(TOCGenericImport<NSTextContentManagerClass, NSTextContentManager>) end;

  NSTextContentManagerDelegate = interface(IObjectiveC)
    ['{6B3218F5-CF3E-4837-AE86-9887A92190EA}']
    function textContentManager(textContentManager: NSTextContentManager; textElementAtLocation: Pointer): NSTextElement; overload; cdecl;
    function textContentManager(textContentManager: NSTextContentManager; shouldEnumerateTextElement: NSTextElement;
      options: NSTextContentManagerEnumerationOptions): Boolean; overload; cdecl;
  end;

  NSTextContentStorageDelegate = interface(IObjectiveC)
    ['{B53025A1-14AE-425F-AA8D-4497B7D59A42}']
    function textContentStorage(textContentStorage: NSTextContentStorage; textParagraphWithRange: NSRange): NSTextParagraph; cdecl;
  end;

  NSTextContentStorageClass = interface(NSTextContentManagerClass)
    ['{CD35661B-9A24-42E9-8422-CE51B3875F0B}']
  end;

  NSTextContentStorage = interface(NSTextContentManager)
    ['{C7E1A9A4-08EC-4AC8-BCF3-620FFCBD55A6}']
    function adjustedRangeFromRange(textRange: NSTextRange; forEditingTextSelection: Boolean): NSTextRange; cdecl;
    function attributedString: NSAttributedString; cdecl;
    function attributedStringForTextElement(textElement: NSTextElement): NSAttributedString; cdecl;
    function delegate: Pointer; cdecl;
    function locationFromLocation(location: Pointer; withOffset: NSInteger): Pointer; cdecl;
    function offsetFromLocation(from: Pointer; toLocation: Pointer): NSInteger; cdecl;
    procedure setAttributedString(attributedString: NSAttributedString); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    function textElementForAttributedString(attributedString: NSAttributedString): NSTextElement; cdecl;
  end;
  TNSTextContentStorage = class(TOCGenericImport<NSTextContentStorageClass, NSTextContentStorage>) end;

  NSTextElementClass = interface(NSObjectClass)
    ['{DC48F97B-AC0B-4259-9DA5-B19A310106AA}']
  end;

  NSTextElement = interface(NSObject)
    ['{7A2614D2-85F2-451E-8EB3-E0AE932A51EA}']
    function childElements: NSArray; cdecl;
    function elementRange: NSTextRange; cdecl;
    function initWithTextContentManager(textContentManager: NSTextContentManager): Pointer; cdecl;
    function isRepresentedElement: Boolean; cdecl;
    function parentElement: NSTextElement; cdecl;
    procedure setElementRange(elementRange: NSTextRange); cdecl;
    procedure setTextContentManager(textContentManager: NSTextContentManager); cdecl;
    function textContentManager: NSTextContentManager; cdecl;
  end;
  TNSTextElement = class(TOCGenericImport<NSTextElementClass, NSTextElement>) end;

  NSTextParagraphClass = interface(NSTextElementClass)
    ['{AB536227-9884-4159-9807-9BAB387AEEC7}']
  end;

  NSTextParagraph = interface(NSTextElement)
    ['{8BB72515-ED61-4067-8489-DE34B5823A89}']
    function attributedString: NSAttributedString; cdecl;
    function initWithAttributedString(attributedString: NSAttributedString): Pointer; cdecl;
    function paragraphContentRange: NSTextRange; cdecl;
    function paragraphSeparatorRange: NSTextRange; cdecl;
  end;
  TNSTextParagraph = class(TOCGenericImport<NSTextParagraphClass, NSTextParagraph>) end;

  NSTextLayoutFragmentClass = interface(NSObjectClass)
    ['{57E6CE03-024E-48F0-AB87-001F45497F25}']
  end;

  NSTextLayoutFragment = interface(NSObject)
    ['{DCE63632-EF7C-484B-8E4A-D79804509D54}']
    function bottomMargin: CGFloat; cdecl;
    procedure drawAtPoint(point: CGPoint; inContext: CGContextRef); cdecl;
    function frameForTextAttachmentAtLocation(location: Pointer): CGRect; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithTextElement(textElement: NSTextElement; range: NSTextRange): Pointer; cdecl;
    procedure invalidateLayout; cdecl;
    function layoutFragmentFrame: CGRect; cdecl;
    function layoutQueue: NSOperationQueue; cdecl;
    function leadingPadding: CGFloat; cdecl;
    function rangeInElement: NSTextRange; cdecl;
    function renderingSurfaceBounds: CGRect; cdecl;
    procedure setLayoutQueue(layoutQueue: NSOperationQueue); cdecl;
    function state: NSTextLayoutFragmentState; cdecl;
    function textAttachmentViewProviders: NSArray; cdecl;
    function textElement: NSTextElement; cdecl;
    function textLayoutManager: NSTextLayoutManager; cdecl;
    function textLineFragmentForTextLocation(textLocation: Pointer; isUpstreamAffinity: Boolean): NSTextLineFragment; cdecl;
    function textLineFragmentForVerticalOffset(verticalOffset: CGFloat; requiresExactMatch: Boolean): NSTextLineFragment; cdecl;
    function textLineFragments: NSArray; cdecl;
    function topMargin: CGFloat; cdecl;
    function trailingPadding: CGFloat; cdecl;
  end;
  TNSTextLayoutFragment = class(TOCGenericImport<NSTextLayoutFragmentClass, NSTextLayoutFragment>) end;

  NSTextLayoutManagerClass = interface(NSObjectClass)
    ['{E2F00903-38B9-4B2D-B245-457CFB3FB8A8}']
    {class} function linkRenderingAttributes: NSDictionary; cdecl;
  end;

  NSTextLayoutManager = interface(NSObject)
    ['{D5663F33-E33E-4234-A60F-7CC51CF87325}']
    procedure addRenderingAttribute(renderingAttribute: NSAttributedStringKey; value: Pointer; forTextRange: NSTextRange); cdecl;
    function delegate: Pointer; cdecl;
    procedure ensureLayoutForBounds(bounds: CGRect); cdecl;
    procedure ensureLayoutForRange(range: NSTextRange); cdecl;
    procedure enumerateRenderingAttributesFromLocation(location: Pointer; reverse: Boolean; usingBlock: TNSTextLayoutManagerBlockMethod2); cdecl;
    function enumerateTextLayoutFragmentsFromLocation(location: Pointer; options: NSTextLayoutFragmentEnumerationOptions;
      usingBlock: TNSTextLayoutManagerBlockMethod1): Pointer; cdecl;
    procedure enumerateTextSegmentsInRange(textRange: NSTextRange; &type: NSTextLayoutManagerSegmentType; options: NSTextLayoutManagerSegmentOptions;
      usingBlock: TNSTextLayoutManagerBlockMethod3); cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    procedure invalidateLayoutForRange(range: NSTextRange); cdecl;
    procedure invalidateRenderingAttributesForTextRange(textRange: NSTextRange); cdecl;
    function layoutQueue: NSOperationQueue; cdecl;
    function limitsLayoutForSuspiciousContents: Boolean; cdecl;
    procedure removeRenderingAttribute(renderingAttribute: NSAttributedStringKey; forTextRange: NSTextRange); cdecl;
    function renderingAttributesForLink(link: Pointer; atLocation: Pointer): NSDictionary; cdecl;
    function renderingAttributesValidator: TNSTextLayoutManagerBlockMethod4; cdecl;
    procedure replaceContentsInRange(range: NSTextRange; withTextElements: NSArray); overload; cdecl;
    procedure replaceContentsInRange(range: NSTextRange; withAttributedString: NSAttributedString); overload; cdecl;
    procedure replaceTextContentManager(textContentManager: NSTextContentManager); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setLayoutQueue(layoutQueue: NSOperationQueue); cdecl;
    procedure setLimitsLayoutForSuspiciousContents(limitsLayoutForSuspiciousContents: Boolean); cdecl;
    procedure setRenderingAttributes(renderingAttributes: NSDictionary; forTextRange: NSTextRange); cdecl;
    procedure setRenderingAttributesValidator(renderingAttributesValidator: TNSTextLayoutManagerBlockMethod5); cdecl;
    procedure setTextContainer(textContainer: NSTextContainer); cdecl;
    procedure setTextSelectionNavigation(textSelectionNavigation: NSTextSelectionNavigation); cdecl;
    procedure setTextSelections(textSelections: NSArray); cdecl;
    procedure setUsesFontLeading(usesFontLeading: Boolean); cdecl;
    procedure setUsesHyphenation(usesHyphenation: Boolean); cdecl;
    function textContainer: NSTextContainer; cdecl;
    function textContentManager: NSTextContentManager; cdecl;
    function textLayoutFragmentForLocation(location: Pointer): NSTextLayoutFragment; cdecl;
    function textLayoutFragmentForPosition(position: CGPoint): NSTextLayoutFragment; cdecl;
    function textSelectionNavigation: NSTextSelectionNavigation; cdecl;
    function textSelections: NSArray; cdecl;
    function textViewportLayoutController: NSTextViewportLayoutController; cdecl;
    function usageBoundsForTextContainer: CGRect; cdecl;
    function usesFontLeading: Boolean; cdecl;
    function usesHyphenation: Boolean; cdecl;
  end;
  TNSTextLayoutManager = class(TOCGenericImport<NSTextLayoutManagerClass, NSTextLayoutManager>) end;

  NSTextLayoutManagerDelegate = interface(IObjectiveC)
    ['{7E46118E-A45C-44DD-B286-D8D5D85C8370}']
    function textLayoutManager(textLayoutManager: NSTextLayoutManager; renderingAttributesForLink: Pointer; atLocation: Pointer;
      defaultAttributes: NSDictionary): NSDictionary; overload; cdecl;
    function textLayoutManager(textLayoutManager: NSTextLayoutManager; shouldBreakLineBeforeLocation: Pointer;
      hyphenating: Boolean): Boolean; overload; cdecl;
    function textLayoutManager(textLayoutManager: NSTextLayoutManager; textLayoutFragmentForLocation: Pointer;
      inTextElement: NSTextElement): NSTextLayoutFragment; overload; cdecl;
  end;

  NSTextLineFragmentClass = interface(NSObjectClass)
    ['{EECD8045-BED7-44D2-A42E-1654B13DCB24}']
  end;

  NSTextLineFragment = interface(NSObject)
    ['{142B9E05-EEEB-4BD1-9D86-D9588C157372}']
    function attributedString: NSAttributedString; cdecl;
    function characterIndexForPoint(point: CGPoint): NSInteger; cdecl;
    function characterRange: NSRange; cdecl;
    procedure drawAtPoint(point: CGPoint; inContext: CGContextRef); cdecl;
    function fractionOfDistanceThroughGlyphForPoint(point: CGPoint): CGFloat; cdecl;
    function glyphOrigin: CGPoint; cdecl;
    function initWithAttributedString(attributedString: NSAttributedString; range: NSRange): Pointer; cdecl;
    function initWithCoder(aDecoder: NSCoder): Pointer; cdecl;
    function initWithString(&string: NSString; attributes: NSDictionary; range: NSRange): Pointer; cdecl;
    function locationForCharacterAtIndex(index: NSInteger): CGPoint; cdecl;
    function typographicBounds: CGRect; cdecl;
  end;
  TNSTextLineFragment = class(TOCGenericImport<NSTextLineFragmentClass, NSTextLineFragment>) end;

  NSTextListClass = interface(NSObjectClass)
    ['{3AA5D170-8297-49D6-BDDD-9781EC2C95CA}']
  end;

  NSTextList = interface(NSObject)
    ['{52897A06-B515-4BE9-B98F-ECD08A1D1534}']
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithMarkerFormat(markerFormat: NSTextListMarkerFormat; options: NSTextListOptions;
      startingItemNumber: NSInteger): Pointer; overload; cdecl;
    function initWithMarkerFormat(markerFormat: NSTextListMarkerFormat; options: NSUInteger): Pointer; overload; cdecl;
    function isOrdered: Boolean; cdecl;
    function listOptions: NSTextListOptions; cdecl;
    function markerForItemNumber(itemNumber: NSInteger): NSString; cdecl;
    function markerFormat: NSTextListMarkerFormat; cdecl;
    procedure setStartingItemNumber(startingItemNumber: NSInteger); cdecl;
    function startingItemNumber: NSInteger; cdecl;
  end;
  TNSTextList = class(TOCGenericImport<NSTextListClass, NSTextList>) end;

  NSTextListElementClass = interface(NSTextParagraphClass)
    ['{DDAD9C99-74AB-4ECD-B2CE-9164AD939CEC}']
    {class} function textListElementWithChildElements(children: NSArray; textList: NSTextList; nestingLevel: NSInteger): Pointer; cdecl;
    {class} function textListElementWithContents(contents: NSAttributedString; markerAttributes: NSDictionary; textList: NSTextList;
      childElements: NSArray): Pointer; cdecl;
  end;

  NSTextListElement = interface(NSTextParagraph)
    ['{3C10A204-1431-4277-A278-E6212698DA56}']
    function attributedString: NSAttributedString; cdecl;
    function childElements: NSArray; cdecl;
    function contents: NSAttributedString; cdecl;
    function initWithAttributedString(attributedString: NSAttributedString): Pointer; cdecl;
    function initWithParentElement(parent: NSTextListElement; textList: NSTextList; contents: NSAttributedString; markerAttributes: NSDictionary;
      childElements: NSArray): Pointer; cdecl;
    function markerAttributes: NSDictionary; cdecl;
    function parentElement: NSTextListElement; cdecl;
    function textList: NSTextList; cdecl;
  end;
  TNSTextListElement = class(TOCGenericImport<NSTextListElementClass, NSTextListElement>) end;

  UIDocumentBrowserViewControllerClass = interface(UIViewControllerClass)
    ['{7E72CC93-0C54-42DD-ADFE-B1D15F1B46A3}']
  end;

  UIDocumentBrowserViewController = interface(UIViewController)
    ['{82CE06DA-83AD-49BD-8EFC-33D146B66C30}']
    function additionalLeadingNavigationBarButtonItems: NSArray; cdecl;
    function additionalTrailingNavigationBarButtonItems: NSArray; cdecl;
    function allowedContentTypes: NSArray; cdecl; // API_DEPRECATED("allowedContentTypes is no longer supported", ios(11.0, 14.0))
    function allowsDocumentCreation: Boolean; cdecl;
    function allowsPickingMultipleItems: Boolean; cdecl;
    function browserUserInterfaceStyle: UIDocumentBrowserUserInterfaceStyle; cdecl;
    function contentTypesForRecentDocuments: NSArray; cdecl;
    function customActions: NSArray; cdecl;
    function defaultDocumentAspectRatio: CGFloat; cdecl;
    function delegate: Pointer; cdecl;
    procedure importDocumentAtURL(documentURL: NSURL; nextToDocumentAtURL: NSURL; mode: UIDocumentBrowserImportMode;
      completionHandler: TUIDocumentBrowserViewControllerBlockMethod2); cdecl;
    function initForOpeningContentTypes(contentTypes: NSArray): Pointer; cdecl;
    function initForOpeningFilesWithContentTypes(allowedContentTypes: NSArray): Pointer; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("use initForOpeningContentTypes: instead", ios(11.0,14.0))
    function initWithNibName(nibName: NSString; bundle: NSBundle): Pointer; cdecl;
    function localizedCreateDocumentActionTitle: NSString; cdecl;
    function recentDocumentsContentTypes: NSArray; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("use contentTypesForRecentDocuments instead", ios(11.0,14.0))
    procedure renameDocumentAtURL(documentURL: NSURL; proposedName: NSString; completionHandler: TUIDocumentBrowserViewControllerBlockMethod3); cdecl;
    procedure revealDocumentAtURL(url: NSURL; importIfNeeded: Boolean; completion: TUIDocumentBrowserViewControllerBlockMethod1); cdecl;
    procedure setAdditionalLeadingNavigationBarButtonItems(additionalLeadingNavigationBarButtonItems: NSArray); cdecl;
    procedure setAdditionalTrailingNavigationBarButtonItems(additionalTrailingNavigationBarButtonItems: NSArray); cdecl;
    procedure setAllowsDocumentCreation(allowsDocumentCreation: Boolean); cdecl;
    procedure setAllowsPickingMultipleItems(allowsPickingMultipleItems: Boolean); cdecl;
    procedure setBrowserUserInterfaceStyle(browserUserInterfaceStyle: UIDocumentBrowserUserInterfaceStyle); cdecl;
    procedure setCustomActions(customActions: NSArray); cdecl;
    procedure setDefaultDocumentAspectRatio(defaultDocumentAspectRatio: CGFloat); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setLocalizedCreateDocumentActionTitle(localizedCreateDocumentActionTitle: NSString); cdecl;
    procedure setShouldShowFileExtensions(shouldShowFileExtensions: Boolean); cdecl;
    function shouldShowFileExtensions: Boolean; cdecl;
    function transitionControllerForDocumentAtURL(documentURL: NSURL): UIDocumentBrowserTransitionController; cdecl;
    function transitionControllerForDocumentURL(documentURL: NSURL): UIDocumentBrowserTransitionController; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("transitionControllerForDocumentAtURL:", ios(11.0,12.0))
  end;
  TUIDocumentBrowserViewController = class(TOCGenericImport<UIDocumentBrowserViewControllerClass, UIDocumentBrowserViewController>) end;

  UIDocumentBrowserViewControllerDelegate = interface(IObjectiveC)
    ['{65F5F648-E151-44CD-AB95-9DC29B8C5C36}']
    procedure documentBrowser(controller: UIDocumentBrowserViewController; didImportDocumentAtURL: NSURL; toDestinationURL: NSURL); overload; cdecl;
    procedure documentBrowser(controller: UIDocumentBrowserViewController; failedToImportDocumentAtURL: NSURL; error: NSError); overload; cdecl;
    procedure documentBrowser(controller: UIDocumentBrowserViewController;
      willPresentActivityViewController: UIActivityViewController); overload; cdecl;
    procedure documentBrowser(controller: UIDocumentBrowserViewController; didPickDocumentURLs: NSArray); overload; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("documentBrowser:didPickDocumentsAtURLs:", ios(11.0, 12.0))
    procedure documentBrowser(controller: UIDocumentBrowserViewController; didRequestDocumentCreationWithHandler: Pointer); overload; cdecl;
    [MethodName('documentBrowser:applicationActivitiesForDocumentURLs:')]
    function documentBrowserApplicationActivitiesForDocumentURLs(controller: UIDocumentBrowserViewController;
      applicationActivitiesForDocumentURLs: NSArray): NSArray; cdecl;
    [MethodName('documentBrowser:didPickDocumentsAtURLs:')]
    procedure documentBrowserDidPickDocumentsAtURLs(controller: UIDocumentBrowserViewController; didPickDocumentsAtURLs: NSArray); cdecl;
  end;

  UIDocumentBrowserTransitionControllerClass = interface(NSObjectClass)
    ['{C3327C11-011B-4243-BAA1-12DFEFE7DF7C}']
  end;

  UIDocumentBrowserTransitionController = interface(NSObject)
    ['{30FB2475-8D3C-491B-B3F7-1BFC4B505326}']
    function loadingProgress: NSProgress; cdecl;
    procedure setLoadingProgress(loadingProgress: NSProgress); cdecl;
    procedure setTargetView(targetView: UIView); cdecl;
    function targetView: UIView; cdecl;
  end;
  TUIDocumentBrowserTransitionController = class(TOCGenericImport<UIDocumentBrowserTransitionControllerClass, UIDocumentBrowserTransitionController>) end;

  UIDocumentBrowserActionClass = interface(NSObjectClass)
    ['{A1A0EA98-56A3-4AEC-A86F-B52FCAC4E2D2}']
  end;

  UIDocumentBrowserAction = interface(NSObject)
    ['{8795F21F-5503-43F3-8501-18F75BE787A1}']
    function availability: UIDocumentBrowserActionAvailability; cdecl;
    function identifier: NSString; cdecl;
    function image: UIImage; cdecl;
    function initWithIdentifier(identifier: NSString; localizedTitle: NSString; availability: UIDocumentBrowserActionAvailability;
      handler: TUIDocumentBrowserActionBlockMethod1): Pointer; cdecl;
    function localizedTitle: NSString; cdecl;
    procedure setImage(image: UIImage); cdecl;
    procedure setSupportedContentTypes(supportedContentTypes: NSArray); cdecl;
    procedure setSupportsMultipleItems(supportsMultipleItems: Boolean); cdecl;
    function supportedContentTypes: NSArray; cdecl;
    function supportsMultipleItems: Boolean; cdecl;
  end;
  TUIDocumentBrowserAction = class(TOCGenericImport<UIDocumentBrowserActionClass, UIDocumentBrowserAction>) end;

  UIActivityClass = interface(NSObjectClass)
    ['{90A934C0-21DB-4455-9085-35704F9D1716}']
    {class} function activityCategory: UIActivityCategory; cdecl;
  end;

  UIActivity = interface(NSObject)
    ['{412CE9CD-8B26-4348-AB38-7FF17B5D20AB}']
    procedure activityDidFinish(completed: Boolean); cdecl;
    function activityImage: UIImage; cdecl;
    function activityTitle: NSString; cdecl;
    function activityType: UIActivityType; cdecl;
    function activityViewController: UIViewController; cdecl;
    function canPerformWithActivityItems(activityItems: NSArray): Boolean; cdecl;
    procedure performActivity; cdecl;
    procedure prepareWithActivityItems(activityItems: NSArray); cdecl;
  end;
  TUIActivity = class(TOCGenericImport<UIActivityClass, UIActivity>) end;

  UIActivityItemSource = interface(IObjectiveC)
    ['{F9E24162-3C73-4503-ADC5-A79C7F5EF0A4}']
    function activityViewController(activityViewController: UIActivityViewController; itemForActivityType: UIActivityType): Pointer; overload; cdecl;
    function activityViewController(activityViewController: UIActivityViewController; thumbnailImageForActivityType: UIActivityType;
      suggestedSize: CGSize): UIImage; overload; cdecl;
    [MethodName('activityViewController:dataTypeIdentifierForActivityType:')]
    function activityViewControllerDataTypeIdentifierForActivityType(activityViewController: UIActivityViewController;
      dataTypeIdentifierForActivityType: UIActivityType): NSString; cdecl;
    function activityViewControllerLinkMetadata(activityViewController: UIActivityViewController): LPLinkMetadata; cdecl;
    function activityViewControllerPlaceholderItem(activityViewController: UIActivityViewController): Pointer; cdecl;
    [MethodName('activityViewController:subjectForActivityType:')]
    function activityViewControllerSubjectForActivityType(activityViewController: UIActivityViewController;
      subjectForActivityType: UIActivityType): NSString; cdecl;
  end;

  UIActivityItemProviderClass = interface(NSOperationClass)
    ['{6573DB79-D220-48C7-AC35-BEEBC0638284}']
  end;

  UIActivityItemProvider = interface(NSOperation)
    ['{284C7996-AE24-456B-A709-1961BB336AC8}']
    function activityType: UIActivityType; cdecl;
    function initWithPlaceholderItem(placeholderItem: Pointer): Pointer; cdecl;
    function item: Pointer; cdecl;
    function placeholderItem: Pointer; cdecl;
  end;
  TUIActivityItemProvider = class(TOCGenericImport<UIActivityItemProviderClass, UIActivityItemProvider>) end;

  UIActivityViewControllerClass = interface(UIViewControllerClass)
    ['{8AAF06BA-1969-46A3-85F0-32EA7382C3E3}']
  end;

  UIActivityViewController = interface(UIViewController)
    ['{81B6571B-3FBB-4541-A7DA-B529B1843FC3}']
    function allowsProminentActivity: Boolean; cdecl;
    function completionHandler: UIActivityViewControllerCompletionHandler; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("completionWithItemsHandler", ios(6.0, 8.0))
    function completionWithItemsHandler: UIActivityViewControllerCompletionWithItemsHandler; cdecl;
    function excludedActivityTypes: NSArray; cdecl;
    function initWithActivityItems(activityItems: NSArray; applicationActivities: NSArray): Pointer; cdecl;
    function initWithActivityItemsConfiguration(activityItemsConfiguration: Pointer): Pointer; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function initWithNibName(nibNameOrNil: NSString; bundle: NSBundle): Pointer; cdecl;
    procedure setAllowsProminentActivity(allowsProminentActivity: Boolean); cdecl;
    procedure setCompletionHandler(completionHandler: UIActivityViewControllerCompletionHandler); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("completionWithItemsHandler", ios(6.0, 8.0))
    procedure setCompletionWithItemsHandler(completionWithItemsHandler: UIActivityViewControllerCompletionWithItemsHandler); cdecl;
    procedure setExcludedActivityTypes(excludedActivityTypes: NSArray); cdecl;
  end;
  TUIActivityViewController = class(TOCGenericImport<UIActivityViewControllerClass, UIActivityViewController>) end;

  UIDocumentInteractionControllerClass = interface(NSObjectClass)
    ['{54787889-F834-40F6-9A3A-D5F0979AAE1C}']
    {class} function interactionControllerWithURL(url: NSURL): UIDocumentInteractionController; cdecl;
  end;

  UIDocumentInteractionController = interface(NSObject)
    ['{5B59764A-A579-47E9-9E40-57616D44A9B0}']
    function annotation: Pointer; cdecl;
    function delegate: Pointer; cdecl;
    procedure dismissMenuAnimated(animated: Boolean); cdecl;
    procedure dismissPreviewAnimated(animated: Boolean); cdecl;
    function gestureRecognizers: NSArray; cdecl;
    function icons: NSArray; cdecl;
    function name: NSString; cdecl;
    function presentOpenInMenuFromBarButtonItem(item: UIBarButtonItem; animated: Boolean): Boolean; cdecl;
    function presentOpenInMenuFromRect(rect: CGRect; inView: UIView; animated: Boolean): Boolean; cdecl;
    function presentOptionsMenuFromBarButtonItem(item: UIBarButtonItem; animated: Boolean): Boolean; cdecl;
    function presentOptionsMenuFromRect(rect: CGRect; inView: UIView; animated: Boolean): Boolean; cdecl;
    function presentPreviewAnimated(animated: Boolean): Boolean; cdecl;
    procedure setAnnotation(annotation: Pointer); cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setName(name: NSString); cdecl;
    procedure setURL(URL: NSURL); cdecl;
    procedure setUTI(UTI: NSString); cdecl;
    function URL: NSURL; cdecl;
    function UTI: NSString; cdecl;
  end;
  TUIDocumentInteractionController = class(TOCGenericImport<UIDocumentInteractionControllerClass, UIDocumentInteractionController>) end;

  UIDocumentInteractionControllerDelegate = interface(IObjectiveC)
    ['{992B9600-4AEB-4FA6-B2A1-5881DE3EA6EE}']
    procedure documentInteractionController(controller: UIDocumentInteractionController; willBeginSendingToApplication: NSString); overload; cdecl;
    function documentInteractionController(controller: UIDocumentInteractionController; canPerformAction: SEL): Boolean; overload; cdecl;
    procedure documentInteractionControllerDidDismissOpenInMenu(controller: UIDocumentInteractionController); cdecl;
    procedure documentInteractionControllerDidDismissOptionsMenu(controller: UIDocumentInteractionController); cdecl;
    procedure documentInteractionControllerDidEndPreview(controller: UIDocumentInteractionController); cdecl;
    [MethodName('documentInteractionController:didEndSendingToApplication:')]
    procedure documentInteractionControllerDidEndSendingToApplication(controller: UIDocumentInteractionController;
      didEndSendingToApplication: NSString); cdecl;
    [MethodName('documentInteractionController:performAction:')]
    function documentInteractionControllerPerformAction(controller: UIDocumentInteractionController; performAction: SEL): Boolean; cdecl;
    function documentInteractionControllerRectForPreview(controller: UIDocumentInteractionController): CGRect; cdecl;
    function documentInteractionControllerViewControllerForPreview(controller: UIDocumentInteractionController): UIViewController; cdecl;
    function documentInteractionControllerViewForPreview(controller: UIDocumentInteractionController): UIView; cdecl;
    procedure documentInteractionControllerWillBeginPreview(controller: UIDocumentInteractionController); cdecl;
    procedure documentInteractionControllerWillPresentOpenInMenu(controller: UIDocumentInteractionController); cdecl;
    procedure documentInteractionControllerWillPresentOptionsMenu(controller: UIDocumentInteractionController); cdecl;
  end;

  UIPrinterClass = interface(NSObjectClass)
    ['{3BFBF7D9-EB27-43F5-A23C-21953874BF10}']
    {class} function printerWithURL(url: NSURL): UIPrinter; cdecl;
  end;

  UIPrinter = interface(NSObject)
    ['{29CAD5A0-39B8-4395-9824-BEC9D06BC50C}']
    procedure contactPrinter(completionHandler: TUIPrinterBlockMethod1); cdecl;
    function displayLocation: NSString; cdecl;
    function displayName: NSString; cdecl;
    function makeAndModel: NSString; cdecl;
    function supportedJobTypes: UIPrinterJobTypes; cdecl;
    function supportsColor: Boolean; cdecl;
    function supportsDuplex: Boolean; cdecl;
    function URL: NSURL; cdecl;
  end;
  TUIPrinter = class(TOCGenericImport<UIPrinterClass, UIPrinter>) end;

  UIPrinterPickerControllerDelegate = interface(IObjectiveC)
    ['{B5E51251-FB36-44FF-9094-49C9C1E79182}']
    function printerPickerController(printerPickerController: UIPrinterPickerController; shouldShowPrinter: UIPrinter): Boolean; cdecl;
    procedure printerPickerControllerDidDismiss(printerPickerController: UIPrinterPickerController); cdecl;
    procedure printerPickerControllerDidPresent(printerPickerController: UIPrinterPickerController); cdecl;
    procedure printerPickerControllerDidSelectPrinter(printerPickerController: UIPrinterPickerController); cdecl;
    function printerPickerControllerParentViewController(printerPickerController: UIPrinterPickerController): UIViewController; cdecl;
    procedure printerPickerControllerWillDismiss(printerPickerController: UIPrinterPickerController); cdecl;
    procedure printerPickerControllerWillPresent(printerPickerController: UIPrinterPickerController); cdecl;
  end;

  UIPrinterPickerControllerClass = interface(NSObjectClass)
    ['{DF305196-94B2-46A4-85C3-E36CFC305A44}']
    {class} function printerPickerControllerWithInitiallySelectedPrinter(printer: UIPrinter): UIPrinterPickerController; cdecl;
  end;

  UIPrinterPickerController = interface(NSObject)
    ['{D9B8CB91-EB4E-4D64-834F-FC5FAA2AB3F8}']
    function delegate: Pointer; cdecl;
    procedure dismissAnimated(animated: Boolean); cdecl;
    function presentAnimated(animated: Boolean; completionHandler: UIPrinterPickerCompletionHandler): Boolean; cdecl;
    function presentFromBarButtonItem(item: UIBarButtonItem; animated: Boolean; completionHandler: UIPrinterPickerCompletionHandler): Boolean; cdecl;
    function presentFromRect(rect: CGRect; inView: UIView; animated: Boolean; completionHandler: UIPrinterPickerCompletionHandler): Boolean; cdecl;
    function selectedPrinter: UIPrinter; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
  end;
  TUIPrinterPickerController = class(TOCGenericImport<UIPrinterPickerControllerClass, UIPrinterPickerController>) end;

  UIPrintFormatterClass = interface(NSObjectClass)
    ['{DF5EFB8D-76FF-4F47-B9A6-9ED21A72CD68}']
  end;

  UIPrintFormatter = interface(NSObject)
    ['{4EF7F074-A42F-4D34-88C0-E2A2AB9E8F11}']
    function contentInsets: UIEdgeInsets; cdecl; // API_DEPRECATED_WITH_REPLACEMENT("perPageContentInsets", ios(4.2, 10.0))
    procedure drawInRect(rect: CGRect; forPageAtIndex: NSInteger); cdecl;
    function maximumContentHeight: CGFloat; cdecl;
    function maximumContentWidth: CGFloat; cdecl;
    function pageCount: NSInteger; cdecl;
    function perPageContentInsets: UIEdgeInsets; cdecl;
    function printPageRenderer: UIPrintPageRenderer; cdecl;
    function rectForPageAtIndex(pageIndex: NSInteger): CGRect; cdecl;
    procedure removeFromPrintPageRenderer; cdecl;
    function requiresMainThread: Boolean; cdecl;
    procedure setContentInsets(contentInsets: UIEdgeInsets); cdecl; // API_DEPRECATED_WITH_REPLACEMENT("perPageContentInsets", ios(4.2, 10.0))
    procedure setMaximumContentHeight(maximumContentHeight: CGFloat); cdecl;
    procedure setMaximumContentWidth(maximumContentWidth: CGFloat); cdecl;
    procedure setPerPageContentInsets(perPageContentInsets: UIEdgeInsets); cdecl;
    procedure setStartPage(startPage: NSInteger); cdecl;
    function startPage: NSInteger; cdecl;
  end;
  TUIPrintFormatter = class(TOCGenericImport<UIPrintFormatterClass, UIPrintFormatter>) end;

  UISimpleTextPrintFormatterClass = interface(UIPrintFormatterClass)
    ['{F18D1A57-8277-476C-9E76-76C911581C0A}']
  end;

  UISimpleTextPrintFormatter = interface(UIPrintFormatter)
    ['{74FB13DF-A34A-4834-9156-1A17E1BEA4FC}']
    function attributedText: NSAttributedString; cdecl;
    function color: UIColor; cdecl;
    function font: UIFont; cdecl;
    function initWithAttributedText(attributedText: NSAttributedString): Pointer; cdecl;
    function initWithText(text: NSString): Pointer; cdecl;
    procedure setAttributedText(attributedText: NSAttributedString); cdecl;
    procedure setColor(color: UIColor); cdecl;
    procedure setFont(font: UIFont); cdecl;
    procedure setText(text: NSString); cdecl;
    procedure setTextAlignment(textAlignment: NSTextAlignment); cdecl;
    function text: NSString; cdecl;
    function textAlignment: NSTextAlignment; cdecl;
  end;
  TUISimpleTextPrintFormatter = class(TOCGenericImport<UISimpleTextPrintFormatterClass, UISimpleTextPrintFormatter>) end;

  UIMarkupTextPrintFormatterClass = interface(UIPrintFormatterClass)
    ['{03481865-2A0A-4978-BF39-C1A2E670D00E}']
  end;

  UIMarkupTextPrintFormatter = interface(UIPrintFormatter)
    ['{A1841318-DB22-4920-A81B-EC486F098E35}']
    function initWithMarkupText(markupText: NSString): Pointer; cdecl;
    function markupText: NSString; cdecl;
    procedure setMarkupText(markupText: NSString); cdecl;
  end;
  TUIMarkupTextPrintFormatter = class(TOCGenericImport<UIMarkupTextPrintFormatterClass, UIMarkupTextPrintFormatter>) end;

  UIViewPrintFormatterClass = interface(UIPrintFormatterClass)
    ['{2923C5EC-8A51-4F62-9F82-2D133898F904}']
  end;

  UIViewPrintFormatter = interface(UIPrintFormatter)
    ['{535F3034-68E1-4D88-BB38-9C6CEB2A72EA}']
    function view: UIView; cdecl;
  end;
  TUIViewPrintFormatter = class(TOCGenericImport<UIViewPrintFormatterClass, UIViewPrintFormatter>) end;

  UIPrintInfoClass = interface(NSObjectClass)
    ['{24AC7397-862F-4A91-A0D4-5BBFDA89DAFE}']
    {class} function printInfo: UIPrintInfo; cdecl;
    {class} function printInfoWithDictionary(dictionary: NSDictionary): UIPrintInfo; cdecl;
  end;

  UIPrintInfo = interface(NSObject)
    ['{AB19CA25-255C-4FE0-B737-2AA8AD3AC84F}']
    function dictionaryRepresentation: NSDictionary; cdecl;
    function duplex: UIPrintInfoDuplex; cdecl;
    function initWithCoder(coder: NSCoder): Pointer; cdecl;
    function jobName: NSString; cdecl;
    function orientation: UIPrintInfoOrientation; cdecl;
    function outputType: UIPrintInfoOutputType; cdecl;
    function printerID: NSString; cdecl;
    procedure setDuplex(duplex: UIPrintInfoDuplex); cdecl;
    procedure setJobName(jobName: NSString); cdecl;
    procedure setOrientation(orientation: UIPrintInfoOrientation); cdecl;
    procedure setOutputType(outputType: UIPrintInfoOutputType); cdecl;
    procedure setPrinterID(printerID: NSString); cdecl;
  end;
  TUIPrintInfo = class(TOCGenericImport<UIPrintInfoClass, UIPrintInfo>) end;

  UIPrintInteractionControllerClass = interface(NSObjectClass)
    ['{AEE1EDFB-AD2B-4805-A734-BD6E9F3048DA}']
    {class} function canPrintData(data: NSData): Boolean; cdecl;
    {class} function canPrintURL(url: NSURL): Boolean; cdecl;
    {class} function isPrintingAvailable: Boolean; cdecl;
    {class} function printableUTIs: NSSet; cdecl;
    {class} function sharedPrintController: UIPrintInteractionController; cdecl;
  end;

  UIPrintInteractionController = interface(NSObject)
    ['{8E360254-F04F-47CA-A2C3-8EB275FBAD7C}']
    function delegate: Pointer; cdecl;
    procedure dismissAnimated(animated: Boolean); cdecl;
    function presentAnimated(animated: Boolean; completionHandler: UIPrintInteractionCompletionHandler): Boolean; cdecl;
    function presentFromBarButtonItem(item: UIBarButtonItem; animated: Boolean;
      completionHandler: UIPrintInteractionCompletionHandler): Boolean; cdecl;
    function presentFromRect(rect: CGRect; inView: UIView; animated: Boolean; completionHandler: UIPrintInteractionCompletionHandler): Boolean; cdecl;
    function printFormatter: UIPrintFormatter; cdecl;
    function printInfo: UIPrintInfo; cdecl;
    function printingItem: Pointer; cdecl;
    function printingItems: NSArray; cdecl;
    function printPageRenderer: UIPrintPageRenderer; cdecl;
    function printPaper: UIPrintPaper; cdecl;
    function printToPrinter(printer: UIPrinter; completionHandler: UIPrintInteractionCompletionHandler): Boolean; cdecl;
    procedure setDelegate(delegate: Pointer); cdecl;
    procedure setPrintFormatter(printFormatter: UIPrintFormatter); cdecl;
    procedure setPrintInfo(printInfo: UIPrintInfo); cdecl;
    procedure setPrintingItem(printingItem: Pointer); cdecl;
    procedure setPrintingItems(printingItems: NSArray); cdecl;
    procedure setPrintPageRenderer(printPageRenderer: UIPrintPageRenderer); cdecl;
    procedure setShowsNumberOfCopies(showsNumberOfCopies: Boolean); cdecl;
    procedure setShowsPageRange(showsPageRange: Boolean); cdecl; // API_DEPRECATED("Pages can be removed from the print preview, so page range is always shown.", ios(4.2, 10.0))
    procedure setShowsPaperOrientation(showsPaperOrientation: Boolean); cdecl;
    procedure setShowsPaperSelectionForLoadedPapers(showsPaperSelectionForLoadedPapers: Boolean); cdecl;
    function showsNumberOfCopies: Boolean; cdecl;
    function showsPageRange: Boolean; cdecl; // API_DEPRECATED("Pages can be removed from the print preview, so page range is always shown.", ios(4.2, 10.0))
    function showsPaperOrientation: Boolean; cdecl;
    function showsPaperSelectionForLoadedPapers: Boolean; cdecl;
  end;
  TUIPrintInteractionController = class(TOCGenericImport<UIPrintInteractionControllerClass, UIPrintInteractionController>) end;

  UIPrintInteractionControllerDelegate = interface(IObjectiveC)
    ['{A1692857-6B84-48DE-8EFE-AF122C497C20}']
    function printInteractionController(printInteractionController: UIPrintInteractionController;
      cutLengthForPaper: UIPrintPaper): CGFloat; overload; cdecl;
    function printInteractionController(printInteractionController: UIPrintInteractionController;
      choosePaper: NSArray): UIPrintPaper; overload; cdecl;
    [MethodName('printInteractionController:chooseCutterBehavior:')]
    function printInteractionControllerChooseCutterBehavior(printInteractionController: UIPrintInteractionController;
      chooseCutterBehavior: NSArray): UIPrinterCutterBehavior; cdecl;
    procedure printInteractionControllerDidDismissPrinterOptions(printInteractionController: UIPrintInteractionController); cdecl;
    procedure printInteractionControllerDidFinishJob(printInteractionController: UIPrintInteractionController); cdecl;
    procedure printInteractionControllerDidPresentPrinterOptions(printInteractionController: UIPrintInteractionController); cdecl;
    function printInteractionControllerParentViewController(printInteractionController: UIPrintInteractionController): UIViewController; cdecl;
    procedure printInteractionControllerWillDismissPrinterOptions(printInteractionController: UIPrintInteractionController); cdecl;
    procedure printInteractionControllerWillPresentPrinterOptions(printInteractionController: UIPrintInteractionController); cdecl;
    procedure printInteractionControllerWillStartJob(printInteractionController: UIPrintInteractionController); cdecl;
  end;

  UIPrintPageRendererClass = interface(NSObjectClass)
    ['{98B9EFE3-0BCE-47F0-B3AB-8F3B5178A172}']
  end;

  UIPrintPageRenderer = interface(NSObject)
    ['{71C7626C-AEA2-44B5-BD0A-FB89688C050B}']
    procedure addPrintFormatter(formatter: UIPrintFormatter; startingAtPageAtIndex: NSInteger); cdecl;
    function currentRenderingQualityForRequestedRenderingQuality(requestedRenderingQuality: UIPrintRenderingQuality): UIPrintRenderingQuality; cdecl;
    procedure drawContentForPageAtIndex(pageIndex: NSInteger; inRect: CGRect); cdecl;
    procedure drawFooterForPageAtIndex(pageIndex: NSInteger; inRect: CGRect); cdecl;
    procedure drawHeaderForPageAtIndex(pageIndex: NSInteger; inRect: CGRect); cdecl;
    procedure drawPageAtIndex(pageIndex: NSInteger; inRect: CGRect); cdecl;
    procedure drawPrintFormatter(printFormatter: UIPrintFormatter; forPageAtIndex: NSInteger); cdecl;
    function footerHeight: CGFloat; cdecl;
    function headerHeight: CGFloat; cdecl;
    function numberOfPages: NSInteger; cdecl;
    function paperRect: CGRect; cdecl;
    procedure prepareForDrawingPages(range: NSRange); cdecl;
    function printableRect: CGRect; cdecl;
    function printFormatters: NSArray; cdecl;
    function printFormattersForPageAtIndex(pageIndex: NSInteger): NSArray; cdecl;
    procedure setFooterHeight(footerHeight: CGFloat); cdecl;
    procedure setHeaderHeight(headerHeight: CGFloat); cdecl;
    procedure setPrintFormatters(printFormatters: NSArray); cdecl;
  end;
  TUIPrintPageRenderer = class(TOCGenericImport<UIPrintPageRendererClass, UIPrintPageRenderer>) end;

  UIPrintPaperClass = interface(NSObjectClass)
    ['{8C47DB6A-B506-4A35-B595-4073246632D1}']
    {class} function bestPaperForPageSize(contentSize: CGSize; withPapersFromArray: NSArray): UIPrintPaper; cdecl;
  end;

  UIPrintPaper = interface(NSObject)
    ['{A91A585F-B3D7-497F-9FDC-16BF524EDF42}']
    function paperSize: CGSize; cdecl;
    function printableRect: CGRect; cdecl;
    function printRect: CGRect; cdecl;
  end;
  TUIPrintPaper = class(TOCGenericImport<UIPrintPaperClass, UIPrintPaper>) end;

  UIPrinterDestinationClass = interface(NSObjectClass)
    ['{9274C0C6-372F-4587-845F-29553CC23CE7}']
  end;

  UIPrinterDestination = interface(NSObject)
    ['{654F969A-8849-4A1C-B2CE-E49DCCA7076C}']
    function displayName: NSString; cdecl;
    function initWithURL(url: NSURL): Pointer; cdecl;
    procedure setDisplayName(displayName: NSString); cdecl;
    procedure setTxtRecord(txtRecord: NSData); cdecl;
    procedure setURL(URL: NSURL); cdecl;
    function txtRecord: NSData; cdecl;
    function URL: NSURL; cdecl;
  end;
  TUIPrinterDestination = class(TOCGenericImport<UIPrinterDestinationClass, UIPrinterDestination>) end;

  UIPrintServiceExtensionClass = interface(NSObjectClass)
    ['{8D5E8DCE-FCE1-47CC-B8C5-FF5D2D9D8E0C}']
  end;

  UIPrintServiceExtension = interface(NSObject)
    ['{28EF3779-2F10-4857-9BFE-7AB4ACF8ABE5}']
    function printerDestinationsForPrintInfo(printInfo: UIPrintInfo): NSArray; cdecl;
  end;
  TUIPrintServiceExtension = class(TOCGenericImport<UIPrintServiceExtensionClass, UIPrintServiceExtension>) end;

  UISearchTextFieldClass = interface(UITextFieldClass)
    ['{E0D2E55D-3F7F-47DF-B095-FB0E565F8B32}']
  end;

  UISearchTextField = interface(UITextField)
    ['{0A95E536-6EDB-4EF4-A2DC-1093ABFAF3C0}']
    function tokens: NSArray; cdecl;
    procedure setTokens(tokens: NSArray); cdecl;
    procedure insertToken(token: UISearchToken; atIndex: NSInteger); cdecl;
    procedure removeTokenAtIndex(tokenIndex: NSInteger); cdecl;
    function positionOfTokenAtIndex(tokenIndex: NSInteger): UITextPosition; cdecl;
    function tokensInRange(textRange: UITextRange): NSArray; cdecl;
    function textualRange: UITextRange; cdecl;
    procedure replaceTextualPortionOfRange(textRange: UITextRange; withToken: UISearchToken; atIndex: NSUInteger); cdecl;
    function tokenBackgroundColor: UIColor; cdecl;
    procedure setTokenBackgroundColor(tokenBackgroundColor: UIColor); cdecl;
    function allowsDeletingTokens: Boolean; cdecl;
    procedure setAllowsDeletingTokens(allowsDeletingTokens: Boolean); cdecl;
    function allowsCopyingTokens: Boolean; cdecl;
    procedure setAllowsCopyingTokens(allowsCopyingTokens: Boolean); cdecl;
    function searchSuggestions: NSArray; cdecl;
    procedure setSearchSuggestions(searchSuggestions: NSArray); cdecl;
  end;

  TUISearchTextField = class(TOCGenericImport<UISearchTextFieldClass, UISearchTextField>)
  end;

  UISearchTokenClass = interface(NSObjectClass)
    ['{D56D7A6A-E7E2-48E5-B01C-CC1A9D3EBC85}']
    { class } function tokenWithIcon(icon: UIImage; text: NSString): UISearchToken; cdecl;
  end;

  UISearchToken = interface(NSObject)
    ['{2E68291C-4E02-44A0-8B5C-51A3C2E7D4FB}']
  end;

  TUISearchToken = class(TOCGenericImport<UISearchTokenClass, UISearchToken>)
  end;

  UISearchTextFieldDelegate = interface(UITextFieldDelegate)
    ['{FA8AB7D2-983B-4E3B-92DE-9C9D1D837D9E}']
    function searchTextField(searchTextField: UISearchTextField; itemProviderForCopyingToken: UISearchToken): NSItemProvider; overload; cdecl;
    procedure searchTextField(searchTextField: UISearchTextField; didSelectSuggestion: UISearchSuggestion); overload; cdecl;
  end;

  UISearchTextFieldPasteItem = interface(UITextPasteItem)
    ['{8722D456-FB8E-4CFB-88D4-5E8A3A0F1235}']
    procedure setSearchTokenResult(token: UISearchToken); cdecl;
  end;

function UIAccessibilityTraitNone: UIAccessibilityTraits;
function UIAccessibilityTraitButton: UIAccessibilityTraits;
function UIAccessibilityTraitLink: UIAccessibilityTraits;
function UIAccessibilityTraitHeader: UIAccessibilityTraits;
function UIAccessibilityTraitSearchField: UIAccessibilityTraits;
function UIAccessibilityTraitImage: UIAccessibilityTraits;
function UIAccessibilityTraitSelected: UIAccessibilityTraits;
function UIAccessibilityTraitPlaysSound: UIAccessibilityTraits;
function UIAccessibilityTraitKeyboardKey: UIAccessibilityTraits;
function UIAccessibilityTraitStaticText: UIAccessibilityTraits;
function UIAccessibilityTraitSummaryElement: UIAccessibilityTraits;
function UIAccessibilityTraitNotEnabled: UIAccessibilityTraits;
function UIAccessibilityTraitUpdatesFrequently: UIAccessibilityTraits;
function UIAccessibilityTraitStartsMediaSession: UIAccessibilityTraits;
function UIAccessibilityTraitAdjustable: UIAccessibilityTraits;
function UIAccessibilityTraitAllowsDirectInteraction: UIAccessibilityTraits;
function UIAccessibilityTraitCausesPageTurn: UIAccessibilityTraits;
function UIAccessibilityTraitTabBar: UIAccessibilityTraits;
function UIAccessibilityTraitToggleButton: UIAccessibilityTraits;
function UIAccessibilityTraitSupportsZoom: UIAccessibilityTraits;
function UIAccessibilityScreenChangedNotification: UIAccessibilityNotifications;
function UIAccessibilityLayoutChangedNotification: UIAccessibilityNotifications;
function UIAccessibilityAnnouncementNotification: UIAccessibilityNotifications;
function UIAccessibilityPageScrolledNotification: UIAccessibilityNotifications;
function UIAccessibilityPauseAssistiveTechnologyNotification: UIAccessibilityNotifications;
function UIAccessibilityResumeAssistiveTechnologyNotification: UIAccessibilityNotifications;
function UIAccessibilityAnnouncementDidFinishNotification: NSNotificationName;
function UIAccessibilityAnnouncementKeyStringValue: NSString;
function UIAccessibilityAnnouncementKeyWasSuccessful: NSString;
function UIAccessibilityElementFocusedNotification: NSNotificationName;
function UIAccessibilityFocusedElementKey: NSString;
function UIAccessibilityUnfocusedElementKey: NSString;
function UIAccessibilityAssistiveTechnologyKey: NSString;
function UIAccessibilityNotificationSwitchControlIdentifier: UIAccessibilityAssistiveTechnologyIdentifier;
function UIAccessibilityNotificationVoiceOverIdentifier: UIAccessibilityAssistiveTechnologyIdentifier;
function UIAccessibilityTextualContextWordProcessing: UIAccessibilityTextualContext;
function UIAccessibilityTextualContextNarrative: UIAccessibilityTextualContext;
function UIAccessibilityTextualContextMessaging: UIAccessibilityTextualContext;
function UIAccessibilityTextualContextSpreadsheet: UIAccessibilityTextualContext;
function UIAccessibilityTextualContextFileSystem: UIAccessibilityTextualContext;
function UIAccessibilityTextualContextSourceCode: UIAccessibilityTextualContext;
function UIAccessibilityTextualContextConsole: UIAccessibilityTextualContext;
function UIAccessibilityPriorityHigh: UIAccessibilityPriority;
function UIAccessibilityPriorityDefault: UIAccessibilityPriority;
function UIAccessibilityPriorityLow: UIAccessibilityPriority;
function UIAccessibilitySpeechAttributePunctuation: NSAttributedStringKey;
function UIAccessibilitySpeechAttributeLanguage: NSAttributedStringKey;
function UIAccessibilitySpeechAttributePitch: NSAttributedStringKey;
function UIAccessibilitySpeechAttributeQueueAnnouncement: NSAttributedStringKey;
function UIAccessibilitySpeechAttributeAnnouncementPriority: NSAttributedStringKey;
function UIAccessibilitySpeechAttributeIPANotation: NSAttributedStringKey;
function UIAccessibilitySpeechAttributeSpellOut: NSAttributedStringKey;
function UIAccessibilityTextAttributeHeadingLevel: NSAttributedStringKey;
function UIAccessibilityTextAttributeCustom: NSAttributedStringKey;
function UIAccessibilityTextAttributeContext: NSAttributedStringKey;
function UIFontDescriptorSystemDesignDefault: UIFontDescriptorSystemDesign;
function UIFontDescriptorSystemDesignRounded: UIFontDescriptorSystemDesign;
function UIFontDescriptorSystemDesignSerif: UIFontDescriptorSystemDesign;
function UIFontDescriptorSystemDesignMonospaced: UIFontDescriptorSystemDesign;
function UIFontDescriptorFamilyAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorNameAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorFaceAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorSizeAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorVisibleNameAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorMatrixAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorCharacterSetAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorCascadeListAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorTraitsAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorFixedAdvanceAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorFeatureSettingsAttribute: UIFontDescriptorAttributeName;
function UIFontDescriptorTextStyleAttribute: UIFontDescriptorAttributeName;
function UIFontSymbolicTrait: UIFontDescriptorTraitKey;
function UIFontWeightTrait: UIFontDescriptorTraitKey;
function UIFontWidthTrait: UIFontDescriptorTraitKey;
function UIFontSlantTrait: UIFontDescriptorTraitKey;
function UIFontWeightUltraLight: UIFontWeight;
function UIFontWeightThin: UIFontWeight;
function UIFontWeightLight: UIFontWeight;
function UIFontWeightRegular: UIFontWeight;
function UIFontWeightMedium: UIFontWeight;
function UIFontWeightSemibold: UIFontWeight;
function UIFontWeightBold: UIFontWeight;
function UIFontWeightHeavy: UIFontWeight;
function UIFontWeightBlack: UIFontWeight;
function UIFontWidthCondensed: UIFontWidth;
function UIFontWidthStandard: UIFontWidth;
function UIFontWidthExpanded: UIFontWidth;
function UIFontWidthCompressed: UIFontWidth;
function UIFontFeatureTypeIdentifierKey: UIFontDescriptorFeatureKey;
function UIFontFeatureSelectorIdentifierKey: UIFontDescriptorFeatureKey;
function UIFontTextStyleLargeTitle: UIFontTextStyle;
function UIFontTextStyleExtraLargeTitle: UIFontTextStyle;
function UIFontTextStyleExtraLargeTitle2: UIFontTextStyle;
function UIFontTextStyleTitle1: UIFontTextStyle;
function UIFontTextStyleTitle2: UIFontTextStyle;
function UIFontTextStyleTitle3: UIFontTextStyle;
function UIFontTextStyleHeadline: UIFontTextStyle;
function UIFontTextStyleSubheadline: UIFontTextStyle;
function UIFontTextStyleBody: UIFontTextStyle;
function UIFontTextStyleCallout: UIFontTextStyle;
function UIFontTextStyleFootnote: UIFontTextStyle;
function UIFontTextStyleCaption1: UIFontTextStyle;
function UIFontTextStyleCaption2: UIFontTextStyle;
function UILocalNotificationDefaultSoundName: NSString;
function NSFontAttributeName: NSAttributedStringKey;
function NSParagraphStyleAttributeName: NSAttributedStringKey;
function NSForegroundColorAttributeName: NSAttributedStringKey;
function NSBackgroundColorAttributeName: NSAttributedStringKey;
function NSLigatureAttributeName: NSAttributedStringKey;
function NSKernAttributeName: NSAttributedStringKey;
function NSTrackingAttributeName: NSAttributedStringKey;
function NSStrikethroughStyleAttributeName: NSAttributedStringKey;
function NSUnderlineStyleAttributeName: NSAttributedStringKey;
function NSStrokeColorAttributeName: NSAttributedStringKey;
function NSStrokeWidthAttributeName: NSAttributedStringKey;
function NSShadowAttributeName: NSAttributedStringKey;
function NSTextEffectAttributeName: NSAttributedStringKey;
function NSAttachmentAttributeName: NSAttributedStringKey;
function NSLinkAttributeName: NSAttributedStringKey;
function NSBaselineOffsetAttributeName: NSAttributedStringKey;
function NSUnderlineColorAttributeName: NSAttributedStringKey;
function NSStrikethroughColorAttributeName: NSAttributedStringKey;
function NSWritingDirectionAttributeName: NSAttributedStringKey;
function NSTextEffectLetterpressStyle: NSTextEffectStyle;
function NSPlainTextDocumentType: NSAttributedStringDocumentType;
function NSRTFTextDocumentType: NSAttributedStringDocumentType;
function NSRTFDTextDocumentType: NSAttributedStringDocumentType;
function NSHTMLTextDocumentType: NSAttributedStringDocumentType;
function NSTextLayoutSectionOrientation: NSTextLayoutSectionKey;
function NSTextLayoutSectionRange: NSTextLayoutSectionKey;
function NSDocumentTypeDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSCharacterEncodingDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSDefaultAttributesDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSPaperSizeDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSPaperMarginDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSViewSizeDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSViewZoomDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSViewModeDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSDefaultFontExcludedDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSReadOnlyDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSBackgroundColorDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSHyphenationFactorDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSDefaultTabIntervalDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSTextLayoutSectionsAttribute: NSAttributedStringDocumentAttributeKey;
function NSTextScalingDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSSourceTextScalingDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSCocoaVersionDocumentAttribute: NSAttributedStringDocumentAttributeKey;
function NSDocumentTypeDocumentOption: NSAttributedStringDocumentReadingOptionKey;
function NSDefaultAttributesDocumentOption: NSAttributedStringDocumentReadingOptionKey;
function NSCharacterEncodingDocumentOption: NSAttributedStringDocumentReadingOptionKey;
function NSTargetTextScalingDocumentOption: NSAttributedStringDocumentReadingOptionKey;
function NSSourceTextScalingDocumentOption: NSAttributedStringDocumentReadingOptionKey;
function NSObliquenessAttributeName: NSAttributedStringKey;
function NSExpansionAttributeName: NSAttributedStringKey;
function NSVerticalGlyphFormAttributeName: NSAttributedStringKey;
function NSTabColumnTerminatorsAttributeName: NSTextTabOptionKey;
function UIMenuApplication: UIMenuIdentifier;
function UIMenuFile: UIMenuIdentifier;
function UIMenuEdit: UIMenuIdentifier;
function UIMenuView: UIMenuIdentifier;
function UIMenuWindow: UIMenuIdentifier;
function UIMenuHelp: UIMenuIdentifier;
function UIMenuAbout: UIMenuIdentifier;
function UIMenuPreferences: UIMenuIdentifier;
function UIMenuServices: UIMenuIdentifier;
function UIMenuHide: UIMenuIdentifier;
function UIMenuQuit: UIMenuIdentifier;
function UIMenuNewScene: UIMenuIdentifier;
function UIMenuOpenRecent: UIMenuIdentifier;
function UIMenuClose: UIMenuIdentifier;
function UIMenuPrint: UIMenuIdentifier;
function UIMenuDocument: UIMenuIdentifier;
function UIMenuUndoRedo: UIMenuIdentifier;
function UIMenuStandardEdit: UIMenuIdentifier;
function UIMenuFind: UIMenuIdentifier;
function UIMenuReplace: UIMenuIdentifier;
function UIMenuShare: UIMenuIdentifier;
function UIMenuTextStyle: UIMenuIdentifier;
function UIMenuSpelling: UIMenuIdentifier;
function UIMenuSpellingPanel: UIMenuIdentifier;
function UIMenuSpellingOptions: UIMenuIdentifier;
function UIMenuSubstitutions: UIMenuIdentifier;
function UIMenuSubstitutionsPanel: UIMenuIdentifier;
function UIMenuSubstitutionOptions: UIMenuIdentifier;
function UIMenuTransformations: UIMenuIdentifier;
function UIMenuSpeech: UIMenuIdentifier;
function UIMenuLookup: UIMenuIdentifier;
function UIMenuLearn: UIMenuIdentifier;
function UIMenuFormat: UIMenuIdentifier;
function UIMenuAutoFill: UIMenuIdentifier;
function UIMenuFont: UIMenuIdentifier;
function UIMenuTextSize: UIMenuIdentifier;
function UIMenuTextColor: UIMenuIdentifier;
function UIMenuTextStylePasteboard: UIMenuIdentifier;
function UIMenuText: UIMenuIdentifier;
function UIMenuWritingDirection: UIMenuIdentifier;
function UIMenuAlignment: UIMenuIdentifier;
function UIMenuToolbar: UIMenuIdentifier;
function UIMenuSidebar: UIMenuIdentifier;
function UIMenuFullscreen: UIMenuIdentifier;
function UIMenuMinimizeAndZoom: UIMenuIdentifier;
function UIMenuBringAllToFront: UIMenuIdentifier;
function UIMenuRoot: UIMenuIdentifier;
function UICommandTagShare: NSString;
function UIKeyInputUpArrow: NSString;
function UIKeyInputDownArrow: NSString;
function UIKeyInputLeftArrow: NSString;
function UIKeyInputRightArrow: NSString;
function UIKeyInputEscape: NSString;
function UIKeyInputPageUp: NSString;
function UIKeyInputPageDown: NSString;
function UIKeyInputHome: NSString;
function UIKeyInputEnd: NSString;
function UIKeyInputF1: NSString;
function UIKeyInputF2: NSString;
function UIKeyInputF3: NSString;
function UIKeyInputF4: NSString;
function UIKeyInputF5: NSString;
function UIKeyInputF6: NSString;
function UIKeyInputF7: NSString;
function UIKeyInputF8: NSString;
function UIKeyInputF9: NSString;
function UIKeyInputF10: NSString;
function UIKeyInputF11: NSString;
function UIKeyInputF12: NSString;
function UIKeyInputDelete: NSString;
function UIDeviceOrientationDidChangeNotification: NSNotificationName;
function UIDeviceBatteryStateDidChangeNotification: NSNotificationName;
function UIDeviceBatteryLevelDidChangeNotification: NSNotificationName;
function UIDeviceProximityStateDidChangeNotification: NSNotificationName;
function UIContentSizeCategoryUnspecified: UIContentSizeCategory;
function UIContentSizeCategoryExtraSmall: UIContentSizeCategory;
function UIContentSizeCategorySmall: UIContentSizeCategory;
function UIContentSizeCategoryMedium: UIContentSizeCategory;
function UIContentSizeCategoryLarge: UIContentSizeCategory;
function UIContentSizeCategoryExtraLarge: UIContentSizeCategory;
function UIContentSizeCategoryExtraExtraLarge: UIContentSizeCategory;
function UIContentSizeCategoryExtraExtraExtraLarge: UIContentSizeCategory;
function UIContentSizeCategoryAccessibilityMedium: UIContentSizeCategory;
function UIContentSizeCategoryAccessibilityLarge: UIContentSizeCategory;
function UIContentSizeCategoryAccessibilityExtraLarge: UIContentSizeCategory;
function UIContentSizeCategoryAccessibilityExtraExtraLarge: UIContentSizeCategory;
function UIContentSizeCategoryAccessibilityExtraExtraExtraLarge: UIContentSizeCategory;
function UIContentSizeCategoryDidChangeNotification: NSNotificationName;
function UIContentSizeCategoryNewValueKey: NSString;
function UISceneErrorDomain: NSErrorDomain;
function UIFocusDidUpdateNotification: NSNotificationName;
function UIFocusMovementDidFailNotification: NSNotificationName;
function UIFocusUpdateContextKey: NSString;
function UIFocusUpdateAnimationCoordinatorKey: NSString;
function UIFocusSoundIdentifierNone: UIFocusSoundIdentifier;
function UIFocusSoundIdentifierDefault: UIFocusSoundIdentifier;
function UIActionPaste: UIActionIdentifier;
function UIActionPasteAndMatchStyle: UIActionIdentifier;
function UIActionPasteAndGo: UIActionIdentifier;
function UIActionPasteAndSearch: UIActionIdentifier;
function UIScrollViewDecelerationRateNormal: UIScrollViewDecelerationRate;
function UIScrollViewDecelerationRateFast: UIScrollViewDecelerationRate;
function UITextContentTypeName: UITextContentType;
function UITextContentTypeNamePrefix: UITextContentType;
function UITextContentTypeGivenName: UITextContentType;
function UITextContentTypeMiddleName: UITextContentType;
function UITextContentTypeFamilyName: UITextContentType;
function UITextContentTypeNameSuffix: UITextContentType;
function UITextContentTypeNickname: UITextContentType;
function UITextContentTypeJobTitle: UITextContentType;
function UITextContentTypeOrganizationName: UITextContentType;
function UITextContentTypeLocation: UITextContentType;
function UITextContentTypeFullStreetAddress: UITextContentType;
function UITextContentTypeStreetAddressLine1: UITextContentType;
function UITextContentTypeStreetAddressLine2: UITextContentType;
function UITextContentTypeAddressCity: UITextContentType;
function UITextContentTypeAddressState: UITextContentType;
function UITextContentTypeAddressCityAndState: UITextContentType;
function UITextContentTypeSublocality: UITextContentType;
function UITextContentTypeCountryName: UITextContentType;
function UITextContentTypePostalCode: UITextContentType;
function UITextContentTypeTelephoneNumber: UITextContentType;
function UITextContentTypeEmailAddress: UITextContentType;
function UITextContentTypeURL: UITextContentType;
function UITextContentTypeCreditCardNumber: UITextContentType;
function UITextContentTypeUsername: UITextContentType;
function UITextContentTypePassword: UITextContentType;
function UITextContentTypeNewPassword: UITextContentType;
function UITextContentTypeOneTimeCode: UITextContentType;
function UITextContentTypeShipmentTrackingNumber: UITextContentType;
function UITextContentTypeFlightNumber: UITextContentType;
function UITextContentTypeDateTime: UITextContentType;
function UITextContentTypeBirthdate: UITextContentType;
function UITextContentTypeBirthdateDay: UITextContentType;
function UITextContentTypeBirthdateMonth: UITextContentType;
function UITextContentTypeBirthdateYear: UITextContentType;
function UITextContentTypeCreditCardSecurityCode: UITextContentType;
function UITextContentTypeCreditCardName: UITextContentType;
function UITextContentTypeCreditCardGivenName: UITextContentType;
function UITextContentTypeCreditCardMiddleName: UITextContentType;
function UITextContentTypeCreditCardFamilyName: UITextContentType;
function UITextContentTypeCreditCardExpiration: UITextContentType;
function UITextContentTypeCreditCardExpirationMonth: UITextContentType;
function UITextContentTypeCreditCardExpirationYear: UITextContentType;
function UITextContentTypeCreditCardType: UITextContentType;
function UITextContentTypeCellularEID: UITextContentType;
function UITextContentTypeCellularIMEI: UITextContentType;
function UITextInputTextBackgroundColorKey: NSString;
function UITextInputTextColorKey: NSString;
function UITextInputTextFontKey: NSString;
function UITextInputCurrentInputModeDidChangeNotification: NSNotificationName;
function UITextAttributeFont: NSString;
function UITextAttributeTextColor: NSString;
function UITextAttributeTextShadowColor: NSString;
function UITextAttributeTextShadowOffset: NSString;
function UITextFieldTextDidBeginEditingNotification: NSNotificationName;
function UITextFieldTextDidEndEditingNotification: NSNotificationName;
function UITextFieldTextDidChangeNotification: NSNotificationName;
function UITextFieldDidEndEditingReasonKey: NSString;
function UIApplicationInvalidInterfaceOrientationException: NSExceptionName;
function UIBackgroundTaskInvalid: UIBackgroundTaskIdentifier;
function UIMinimumKeepAliveTimeout: NSTimeInterval;
function UIApplicationBackgroundFetchIntervalMinimum: NSTimeInterval;
function UIApplicationBackgroundFetchIntervalNever: NSTimeInterval;
function UITrackingRunLoopMode: NSRunLoopMode;
function UIApplicationDidEnterBackgroundNotification: NSNotificationName;
function UIApplicationWillEnterForegroundNotification: NSNotificationName;
function UIApplicationDidFinishLaunchingNotification: NSNotificationName;
function UIApplicationDidBecomeActiveNotification: NSNotificationName;
function UIApplicationWillResignActiveNotification: NSNotificationName;
function UIApplicationDidReceiveMemoryWarningNotification: NSNotificationName;
function UIApplicationWillTerminateNotification: NSNotificationName;
function UIApplicationSignificantTimeChangeNotification: NSNotificationName;
function UIApplicationWillChangeStatusBarOrientationNotification: NSNotificationName;
function UIApplicationDidChangeStatusBarOrientationNotification: NSNotificationName;
function UIApplicationStatusBarOrientationUserInfoKey: NSString;
function UIApplicationWillChangeStatusBarFrameNotification: NSNotificationName;
function UIApplicationDidChangeStatusBarFrameNotification: NSNotificationName;
function UIApplicationStatusBarFrameUserInfoKey: NSString;
function UIApplicationBackgroundRefreshStatusDidChangeNotification: NSNotificationName;
function UIApplicationProtectedDataWillBecomeUnavailable: NSNotificationName;
function UIApplicationProtectedDataDidBecomeAvailable: NSNotificationName;
function UIApplicationLaunchOptionsURLKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsSourceApplicationKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsRemoteNotificationKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsLocalNotificationKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsAnnotationKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsLocationKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsNewsstandDownloadsKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsBluetoothCentralsKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsBluetoothPeripheralsKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsShortcutItemKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsEventAttributionKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsUserActivityDictionaryKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsUserActivityTypeKey: UIApplicationLaunchOptionsKey;
function UIApplicationLaunchOptionsCloudKitShareMetadataKey: UIApplicationLaunchOptionsKey;
function UIApplicationOpenSettingsURLString: NSString;
function UIApplicationOpenNotificationSettingsURLString: NSString;
function UIApplicationOpenURLOptionsSourceApplicationKey: UIApplicationOpenURLOptionsKey;
function UIApplicationOpenURLOptionsAnnotationKey: UIApplicationOpenURLOptionsKey;
function UIApplicationOpenURLOptionsOpenInPlaceKey: UIApplicationOpenURLOptionsKey;
function UIApplicationOpenURLOptionsEventAttributionKey: UIApplicationOpenURLOptionsKey;
function UIApplicationUserDidTakeScreenshotNotification: NSNotificationName;
function UIApplicationKeyboardExtensionPointIdentifier: UIApplicationExtensionPointIdentifier;
function UIApplicationOpenURLOptionUniversalLinksOnly: UIApplicationOpenExternalURLOptionsKey;
function UIApplicationOpenExternalURLOptionsEventAttributionKey: UIApplicationOpenExternalURLOptionsKey;
function UIStateRestorationViewControllerStoryboardKey: NSString;
function UIApplicationStateRestorationBundleVersionKey: NSString;
function UIApplicationStateRestorationUserInterfaceIdiomKey: NSString;
function UIApplicationStateRestorationTimestampKey: NSString;
function UIApplicationStateRestorationSystemVersionKey: NSString;
function UISceneWillConnectNotification: NSNotificationName;
function UISceneDidDisconnectNotification: NSNotificationName;
function UISceneDidActivateNotification: NSNotificationName;
function UISceneWillDeactivateNotification: NSNotificationName;
function UISceneWillEnterForegroundNotification: NSNotificationName;
function UISceneDidEnterBackgroundNotification: NSNotificationName;
function UISceneSessionRoleImmersiveSpaceApplication: UISceneSessionRole;
function UIPointerLockStateDidChangeNotification: NSNotificationName;
function UIPointerLockStateSceneUserInfoKey: NSString;
function UIViewControllerShowDetailTargetDidChangeNotification: NSNotificationName;
function UIViewControllerHierarchyInconsistencyException: NSExceptionName;
function UIGuidedAccessErrorDomain: NSErrorDomain;
function UIAccessibilityVoiceOverStatusChanged: NSString;
function UIAccessibilityVoiceOverStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityMonoAudioStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityClosedCaptioningStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityInvertColorsStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityGuidedAccessStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityBoldTextStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityButtonShapesEnabledStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityGrayscaleStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityReduceTransparencyStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityReduceMotionStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityPrefersCrossFadeTransitionsStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityVideoAutoplayStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityDarkerSystemColorsStatusDidChangeNotification: NSNotificationName;
function UIAccessibilitySwitchControlStatusDidChangeNotification: NSNotificationName;
function UIAccessibilitySpeakSelectionStatusDidChangeNotification: NSNotificationName;
function UIAccessibilitySpeakScreenStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityShakeToUndoDidChangeNotification: NSNotificationName;
function UIAccessibilityAssistiveTouchStatusDidChangeNotification: NSNotificationName;
function UIAccessibilityShouldDifferentiateWithoutColorDidChangeNotification: NSNotificationName;
function UIAccessibilityOnOffSwitchLabelsDidChangeNotification: NSNotificationName;
function UIAccessibilityHearingDevicePairedEarDidChangeNotification: NSNotificationName;
function UICollectionElementKindSectionHeader: NSString;
function UICollectionElementKindSectionFooter: NSString;
function UICollectionLayoutSectionOrthogonalScrollingDecelerationRateAutomatic: UICollectionLayoutSectionOrthogonalScrollingDecelerationRate;
function UICollectionLayoutSectionOrthogonalScrollingDecelerationRateNormal: UICollectionLayoutSectionOrthogonalScrollingDecelerationRate;
function UICollectionLayoutSectionOrthogonalScrollingDecelerationRateFast: UICollectionLayoutSectionOrthogonalScrollingDecelerationRate;
function UITableViewIndexSearch: NSString;
function UITableViewSelectionDidChangeNotification: NSNotificationName;
function UIDocumentStateChangedNotification: NSNotificationName;
function NSUserActivityDocumentURLKey: NSString;
function UIImagePickerControllerMediaType: UIImagePickerControllerInfoKey;
function UIImagePickerControllerOriginalImage: UIImagePickerControllerInfoKey;
function UIImagePickerControllerEditedImage: UIImagePickerControllerInfoKey;
function UIImagePickerControllerCropRect: UIImagePickerControllerInfoKey;
function UIImagePickerControllerMediaURL: UIImagePickerControllerInfoKey;
function UIImagePickerControllerReferenceURL: UIImagePickerControllerInfoKey;
function UIImagePickerControllerMediaMetadata: UIImagePickerControllerInfoKey;
function UIImagePickerControllerLivePhoto: UIImagePickerControllerInfoKey;
function UIImagePickerControllerPHAsset: UIImagePickerControllerInfoKey;
function UIImagePickerControllerImageURL: UIImagePickerControllerInfoKey;
function UIUserNotificationTextInputActionButtonTitleKey: NSString;
function UIUserNotificationActionResponseTypedTextKey: NSString;
function UIWindowSceneSessionRoleApplication: UISceneSessionRole;
function UIWindowSceneSessionRoleExternalDisplayNonInteractive: UISceneSessionRole;
function UIWindowSceneSessionRoleExternalDisplay: UISceneSessionRole;
function UIWindowSceneSessionRoleVolumetricApplication: UISceneSessionRole;
function UIMenuControllerWillShowMenuNotification: NSNotificationName;
function UIMenuControllerDidShowMenuNotification: NSNotificationName;
function UIMenuControllerWillHideMenuNotification: NSNotificationName;
function UIMenuControllerDidHideMenuNotification: NSNotificationName;
function UIMenuControllerMenuFrameDidChangeNotification: NSNotificationName;
function UINibExternalObjects: UINibOptionsKey;
function UINibProxiedObjectsKey: NSString;
function UIPageViewControllerOptionSpineLocationKey: UIPageViewControllerOptionsKey;
function UIPageViewControllerOptionInterPageSpacingKey: UIPageViewControllerOptionsKey;
function UIPasteboardNameGeneral: UIPasteboardName;
function UIPasteboardNameFind: NSString;
function UIPasteboardDetectionPatternProbableWebURL: UIPasteboardDetectionPattern;
function UIPasteboardDetectionPatternProbableWebSearch: UIPasteboardDetectionPattern;
function UIPasteboardDetectionPatternNumber: UIPasteboardDetectionPattern;
function UIPasteboardDetectionPatternLink: UIPasteboardDetectionPattern;
function UIPasteboardDetectionPatternPhoneNumber: UIPasteboardDetectionPattern;
function UIPasteboardDetectionPatternEmailAddress: UIPasteboardDetectionPattern;
function UIPasteboardDetectionPatternPostalAddress: UIPasteboardDetectionPattern;
function UIPasteboardDetectionPatternCalendarEvent: UIPasteboardDetectionPattern;
function UIPasteboardDetectionPatternShipmentTrackingNumber: UIPasteboardDetectionPattern;
function UIPasteboardDetectionPatternFlightNumber: UIPasteboardDetectionPattern;
function UIPasteboardDetectionPatternMoneyAmount: UIPasteboardDetectionPattern;
function UIPasteboardOptionExpirationDate: UIPasteboardOption;
function UIPasteboardOptionLocalOnly: UIPasteboardOption;
function UIPasteboardChangedNotification: NSNotificationName;
function UIPasteboardChangedTypesAddedKey: NSString;
function UIPasteboardChangedTypesRemovedKey: NSString;
function UIPasteboardRemovedNotification: NSNotificationName;
function UIPasteboardTypeAutomatic: NSString;
function UIScreenDidConnectNotification: NSNotificationName;
function UIScreenDidDisconnectNotification: NSNotificationName;
function UIScreenModeDidChangeNotification: NSNotificationName;
function UIScreenBrightnessDidChangeNotification: NSNotificationName;
function UIScreenCapturedDidChangeNotification: NSNotificationName;
function UIScreenReferenceDisplayModeStatusDidChangeNotification: NSNotificationName;
function UITransitionContextFromViewControllerKey: UITransitionContextViewControllerKey;
function UITransitionContextToViewControllerKey: UITransitionContextViewControllerKey;
function UITransitionContextFromViewKey: UITransitionContextViewKey;
function UITransitionContextToViewKey: UITransitionContextViewKey;
function UITextViewTextDidBeginEditingNotification: NSNotificationName;
function UITextViewTextDidChangeNotification: NSNotificationName;
function UITextViewTextDidEndEditingNotification: NSNotificationName;
function UIWindowLevelNormal: UIWindowLevel;
function UIWindowLevelAlert: UIWindowLevel;
function UIWindowLevelStatusBar: UIWindowLevel;
function UIWindowDidBecomeVisibleNotification: NSNotificationName;
function UIWindowDidBecomeHiddenNotification: NSNotificationName;
function UIWindowDidBecomeKeyNotification: NSNotificationName;
function UIWindowDidResignKeyNotification: NSNotificationName;
function UIKeyboardWillShowNotification: NSNotificationName;
function UIKeyboardDidShowNotification: NSNotificationName;
function UIKeyboardWillHideNotification: NSNotificationName;
function UIKeyboardDidHideNotification: NSNotificationName;
function UIKeyboardFrameBeginUserInfoKey: NSString;
function UIKeyboardFrameEndUserInfoKey: NSString;
function UIKeyboardAnimationDurationUserInfoKey: NSString;
function UIKeyboardAnimationCurveUserInfoKey: NSString;
function UIKeyboardIsLocalUserInfoKey: NSString;
function UIKeyboardWillChangeFrameNotification: NSNotificationName;
function UIKeyboardDidChangeFrameNotification: NSNotificationName;
function UIKeyboardCenterBeginUserInfoKey: NSString;
function UIKeyboardCenterEndUserInfoKey: NSString;
function UIKeyboardBoundsUserInfoKey: NSString;
function UIActivityItemsConfigurationMetadataKeyTitle: UIActivityItemsConfigurationMetadataKey;
function UIActivityItemsConfigurationMetadataKeyMessageBody: UIActivityItemsConfigurationMetadataKey;
function UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata: UIActivityItemsConfigurationMetadataKey;
function UIActivityItemsConfigurationPreviewIntentFullSize: UIActivityItemsConfigurationPreviewIntent;
function UIActivityItemsConfigurationPreviewIntentThumbnail: UIActivityItemsConfigurationPreviewIntent;
function UIActivityItemsConfigurationInteractionShare: UIActivityItemsConfigurationInteraction;
function UIActivityItemsConfigurationInteractionCopy: UIActivityItemsConfigurationInteraction;
function NSTextStorageWillProcessEditingNotification: NSNotificationName;
function NSTextStorageDidProcessEditingNotification: NSNotificationName;
function UISheetPresentationControllerDetentIdentifierMedium: UISheetPresentationControllerDetentIdentifier;
function UISheetPresentationControllerDetentIdentifierLarge: UISheetPresentationControllerDetentIdentifier;
function UITextItemTagAttributeName: NSAttributedStringKey;
function NSTextContentStorageUnsupportedAttributeAddedNotification: NSNotificationName;
function NSTextListMarkerBox: NSTextListMarkerFormat;
function NSTextListMarkerCheck: NSTextListMarkerFormat;
function NSTextListMarkerCircle: NSTextListMarkerFormat;
function NSTextListMarkerDiamond: NSTextListMarkerFormat;
function NSTextListMarkerDisc: NSTextListMarkerFormat;
function NSTextListMarkerHyphen: NSTextListMarkerFormat;
function NSTextListMarkerSquare: NSTextListMarkerFormat;
function NSTextListMarkerLowercaseHexadecimal: NSTextListMarkerFormat;
function NSTextListMarkerUppercaseHexadecimal: NSTextListMarkerFormat;
function NSTextListMarkerOctal: NSTextListMarkerFormat;
function NSTextListMarkerLowercaseAlpha: NSTextListMarkerFormat;
function NSTextListMarkerUppercaseAlpha: NSTextListMarkerFormat;
function NSTextListMarkerLowercaseLatin: NSTextListMarkerFormat;
function NSTextListMarkerUppercaseLatin: NSTextListMarkerFormat;
function NSTextListMarkerLowercaseRoman: NSTextListMarkerFormat;
function NSTextListMarkerUppercaseRoman: NSTextListMarkerFormat;
function NSTextListMarkerDecimal: NSTextListMarkerFormat;
function UIDocumentBrowserErrorDomain: NSErrorDomain;
function UIActivityTypePostToFacebook: UIActivityType;
function UIActivityTypePostToTwitter: UIActivityType;
function UIActivityTypePostToWeibo: UIActivityType;
function UIActivityTypeMessage: UIActivityType;
function UIActivityTypeMail: UIActivityType;
function UIActivityTypePrint: UIActivityType;
function UIActivityTypeCopyToPasteboard: UIActivityType;
function UIActivityTypeAssignToContact: UIActivityType;
function UIActivityTypeSaveToCameraRoll: UIActivityType;
function UIActivityTypeAddToReadingList: UIActivityType;
function UIActivityTypePostToFlickr: UIActivityType;
function UIActivityTypePostToVimeo: UIActivityType;
function UIActivityTypePostToTencentWeibo: UIActivityType;
function UIActivityTypeAirDrop: UIActivityType;
function UIActivityTypeOpenInIBooks: UIActivityType;
function UIActivityTypeMarkupAsPDF: UIActivityType;
function UIActivityTypeSharePlay: UIActivityType;
function UIActivityTypeCollaborationInviteWithLink: UIActivityType;
function UIActivityTypeCollaborationCopyLink: UIActivityType;
function UIActivityTypeAddToHomeScreen: UIActivityType;
function UIPrintErrorDomain: NSErrorDomain;

const
  libUIKit = '/System/Library/Frameworks/UIKit.framework/UIKit';

function NSStringFromCGPoint(point: CGPoint): Pointer; cdecl;
  external libUIKit name _PU + 'NSStringFromCGPoint';

function NSStringFromCGVector(vector: CGVector): Pointer; cdecl;
  external libUIKit name _PU + 'NSStringFromCGVector';

function NSStringFromCGSize(size: CGSize): Pointer; cdecl;
  external libUIKit name _PU + 'NSStringFromCGSize';

function NSStringFromCGRect(rect: CGRect): Pointer; cdecl;
  external libUIKit name _PU + 'NSStringFromCGRect';

function NSStringFromCGAffineTransform(transform: CGAffineTransform): Pointer; cdecl;
  external libUIKit name _PU + 'NSStringFromCGAffineTransform';

function NSStringFromUIEdgeInsets(insets: UIEdgeInsets): Pointer; cdecl;
  external libUIKit name _PU + 'NSStringFromUIEdgeInsets';

function NSStringFromDirectionalEdgeInsets(insets: NSDirectionalEdgeInsets): Pointer; cdecl;
  external libUIKit name _PU + 'NSStringFromDirectionalEdgeInsets';

function NSStringFromUIOffset(offset: UIOffset): Pointer; cdecl;
  external libUIKit name _PU + 'NSStringFromUIOffset';

function CGPointFromString(&string: Pointer): CGPoint; cdecl;
  external libUIKit name _PU + 'CGPointFromString';

function CGVectorFromString(&string: Pointer): CGVector; cdecl;
  external libUIKit name _PU + 'CGVectorFromString';

function CGSizeFromString(&string: Pointer): CGSize; cdecl;
  external libUIKit name _PU + 'CGSizeFromString';

function CGRectFromString(&string: Pointer): CGRect; cdecl;
  external libUIKit name _PU + 'CGRectFromString';

function CGAffineTransformFromString(&string: Pointer): CGAffineTransform; cdecl;
  external libUIKit name _PU + 'CGAffineTransformFromString';

function UIEdgeInsetsFromString(&string: Pointer): UIEdgeInsets; cdecl;
  external libUIKit name _PU + 'UIEdgeInsetsFromString';

function NSDirectionalEdgeInsetsFromString(&string: Pointer): NSDirectionalEdgeInsets; cdecl;
  external libUIKit name _PU + 'NSDirectionalEdgeInsetsFromString';

function UIOffsetFromString(&string: Pointer): UIOffset; cdecl;
  external libUIKit name _PU + 'UIOffsetFromString';

function UIGraphicsGetCurrentContext: CGContextRef; cdecl;
  external libUIKit name _PU + 'UIGraphicsGetCurrentContext';

procedure UIGraphicsPushContext(context: CGContextRef); cdecl;
  external libUIKit name _PU + 'UIGraphicsPushContext';

procedure UIGraphicsPopContext; cdecl;
  external libUIKit name _PU + 'UIGraphicsPopContext';

procedure UIRectFillUsingBlendMode(rect: CGRect; blendMode: CGBlendMode); cdecl;
  external libUIKit name _PU + 'UIRectFillUsingBlendMode';

procedure UIRectFill(rect: CGRect); cdecl;
  external libUIKit name _PU + 'UIRectFill';

procedure UIRectFrameUsingBlendMode(rect: CGRect; blendMode: CGBlendMode); cdecl;
  external libUIKit name _PU + 'UIRectFrameUsingBlendMode';

procedure UIRectFrame(rect: CGRect); cdecl;
  external libUIKit name _PU + 'UIRectFrame';

procedure UIRectClip(rect: CGRect); cdecl;
  external libUIKit name _PU + 'UIRectClip';

procedure UIGraphicsBeginImageContext(size: CGSize); cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginImageContext';

procedure UIGraphicsBeginImageContextWithOptions(size: CGSize; opaque: Boolean; scale: CGFloat); cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginImageContextWithOptions';

function UIGraphicsGetImageFromCurrentImageContext: Pointer; cdecl;
  external libUIKit name _PU + 'UIGraphicsGetImageFromCurrentImageContext';

procedure UIGraphicsEndImageContext; cdecl;
  external libUIKit name _PU + 'UIGraphicsEndImageContext';

function UIGraphicsBeginPDFContextToFile(path: Pointer; bounds: CGRect; documentInfo: Pointer): Boolean; cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginPDFContextToFile';

procedure UIGraphicsBeginPDFContextToData(data: Pointer; bounds: CGRect; documentInfo: Pointer); cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginPDFContextToData';

procedure UIGraphicsEndPDFContext; cdecl;
  external libUIKit name _PU + 'UIGraphicsEndPDFContext';

procedure UIGraphicsBeginPDFPage; cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginPDFPage';

procedure UIGraphicsBeginPDFPageWithInfo(bounds: CGRect; pageInfo: Pointer); cdecl;
  external libUIKit name _PU + 'UIGraphicsBeginPDFPageWithInfo';

function UIGraphicsGetPDFContextBounds: CGRect; cdecl;
  external libUIKit name _PU + 'UIGraphicsGetPDFContextBounds';

procedure UIGraphicsSetPDFContextURLForRect(url: Pointer; rect: CGRect); cdecl;
  external libUIKit name _PU + 'UIGraphicsSetPDFContextURLForRect';

procedure UIGraphicsAddPDFContextDestinationAtPoint(name: Pointer; point: CGPoint); cdecl;
  external libUIKit name _PU + 'UIGraphicsAddPDFContextDestinationAtPoint';

procedure UIGraphicsSetPDFContextDestinationForRect(name: Pointer; rect: CGRect); cdecl;
  external libUIKit name _PU + 'UIGraphicsSetPDFContextDestinationForRect';

function UIImagePNGRepresentation(image: Pointer): Pointer; cdecl;
  external libUIKit name _PU + 'UIImagePNGRepresentation';

function UIImageJPEGRepresentation(image: Pointer; compressionQuality: CGFloat): Pointer; cdecl;
  external libUIKit name _PU + 'UIImageJPEGRepresentation';

function UIImageHEICRepresentation(image: Pointer): Pointer; cdecl;
  external libUIKit name _PU + 'UIImageHEICRepresentation';

function UIFontWeightForImageSymbolWeight(symbolWeight: UIImageSymbolWeight): UIFontWeight; cdecl;
  external libUIKit name _PU + 'UIFontWeightForImageSymbolWeight';

function UIImageSymbolWeightForFontWeight(fontWeight: UIFontWeight): UIImageSymbolWeight; cdecl;
  external libUIKit name _PU + 'UIImageSymbolWeightForFontWeight';

function NSTextAlignmentToCTTextAlignment(nsTextAlignment: NSTextAlignment): CTTextAlignment; cdecl;
  external libUIKit name _PU + 'NSTextAlignmentToCTTextAlignment';

function NSTextAlignmentFromCTTextAlignment(ctTextAlignment: CTTextAlignment): NSTextAlignment; cdecl;
  external libUIKit name _PU + 'NSTextAlignmentFromCTTextAlignment';

function UIEventButtonMaskForButtonNumber(buttonNumber: NSInteger): UIEventButtonMask; cdecl;
  external libUIKit name _PU + 'UIEventButtonMaskForButtonNumber';

function _NSDictionaryOfVariableBindings(commaSeparatedKeysString: Pointer; firstValue: Pointer): Pointer varargs; cdecl;
  external libUIKit name _PU + '_NSDictionaryOfVariableBindings';

function UIContentSizeCategoryIsAccessibilityCategory(category: Pointer): Boolean; cdecl;
  external libUIKit name _PU + 'UIContentSizeCategoryIsAccessibilityCategory';

function UIContentSizeCategoryCompareToCategory(lhs: Pointer; rhs: Pointer): NSComparisonResult; cdecl;
  external libUIKit name _PU + 'UIContentSizeCategoryCompareToCategory';

function UIApplicationMain(argc: Integer; argv: PMarshaledAString; principalClassName: Pointer; delegateClassName: Pointer): Integer; cdecl;
  external libUIKit name _PU + 'UIApplicationMain';

procedure UIAccessibilityZoomFocusChanged(&type: UIAccessibilityZoomType; frame: CGRect; view: Pointer); cdecl;
  external libUIKit name _PU + 'UIAccessibilityZoomFocusChanged';

procedure UIAccessibilityRegisterGestureConflictWithZoom; cdecl;
  external libUIKit name _PU + 'UIAccessibilityRegisterGestureConflictWithZoom';

function UIGuidedAccessRestrictionStateForIdentifier(restrictionIdentifier: Pointer): UIGuidedAccessRestrictionState; cdecl;
  external libUIKit name _PU + 'UIGuidedAccessRestrictionStateForIdentifier';

type
  UIGuidedAccessConfigureAccessibilityFeatures_completion = procedure(success: Boolean; error: NSError); cdecl;

procedure UIGuidedAccessConfigureAccessibilityFeatures(features: UIGuidedAccessAccessibilityFeature; enabled: Boolean;
  completion: UIGuidedAccessConfigureAccessibilityFeatures_completion); cdecl;
  external libUIKit name _PU + 'UIGuidedAccessConfigureAccessibilityFeatures';

function UIAccessibilityConvertFrameToScreenCoordinates(rect: CGRect; view: Pointer): CGRect; cdecl;
  external libUIKit name _PU + 'UIAccessibilityConvertFrameToScreenCoordinates';

function UIAccessibilityConvertPathToScreenCoordinates(path: UIBezierPath; view: Pointer): Pointer; cdecl;
  external libUIKit name _PU + 'UIAccessibilityConvertPathToScreenCoordinates';

function UIAccessibilityFocusedElement(assistiveTechnologyIdentifier: Pointer): Pointer; cdecl;
  external libUIKit name _PU + 'UIAccessibilityFocusedElement';

procedure UIAccessibilityPostNotification(notification: UIAccessibilityNotifications; argument: Pointer); cdecl;
  external libUIKit name _PU + 'UIAccessibilityPostNotification';

function UIAccessibilityIsVoiceOverRunning: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsVoiceOverRunning';

function UIAccessibilityIsMonoAudioEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsMonoAudioEnabled';

function UIAccessibilityIsClosedCaptioningEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsClosedCaptioningEnabled';

function UIAccessibilityIsInvertColorsEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsInvertColorsEnabled';

function UIAccessibilityIsGuidedAccessEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsGuidedAccessEnabled';

function UIAccessibilityIsBoldTextEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsBoldTextEnabled';

function UIAccessibilityButtonShapesEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityButtonShapesEnabled';

function UIAccessibilityIsGrayscaleEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsGrayscaleEnabled';

function UIAccessibilityIsReduceTransparencyEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsReduceTransparencyEnabled';

function UIAccessibilityIsReduceMotionEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsReduceMotionEnabled';

function UIAccessibilityPrefersCrossFadeTransitions: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityPrefersCrossFadeTransitions';

function UIAccessibilityIsVideoAutoplayEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsVideoAutoplayEnabled';

function UIAccessibilityDarkerSystemColorsEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityDarkerSystemColorsEnabled';

function UIAccessibilityIsSwitchControlRunning: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsSwitchControlRunning';

function UIAccessibilityIsSpeakSelectionEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsSpeakSelectionEnabled';

function UIAccessibilityIsSpeakScreenEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsSpeakScreenEnabled';

function UIAccessibilityIsShakeToUndoEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsShakeToUndoEnabled';

function UIAccessibilityIsAssistiveTouchRunning: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsAssistiveTouchRunning';

function UIAccessibilityShouldDifferentiateWithoutColor: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityShouldDifferentiateWithoutColor';

function UIAccessibilityIsOnOffSwitchLabelsEnabled: Boolean; cdecl;
  external libUIKit name _PU + 'UIAccessibilityIsOnOffSwitchLabelsEnabled';

type
  UIAccessibilityRequestGuidedAccessSession_completionHandler = procedure(didSucceed: Boolean); cdecl;

procedure UIAccessibilityRequestGuidedAccessSession(enable: Boolean;
  completionHandler: UIAccessibilityRequestGuidedAccessSession_completionHandler); cdecl;
  external libUIKit name _PU + 'UIAccessibilityRequestGuidedAccessSession';

function UIAccessibilityHearingDevicePairedEar: UIAccessibilityHearingDeviceEar; cdecl;
  external libUIKit name _PU + 'UIAccessibilityHearingDevicePairedEar';

function UICellAccessoryPositionBeforeAccessoryOfClass(accessoryClass: Pointer): UICellAccessoryPosition; cdecl;
  external libUIKit name _PU + 'UICellAccessoryPositionBeforeAccessoryOfClass';

function UICellAccessoryPositionAfterAccessoryOfClass(accessoryClass: Pointer): UICellAccessoryPosition; cdecl;
  external libUIKit name _PU + 'UICellAccessoryPositionAfterAccessoryOfClass';

procedure UIImageWriteToSavedPhotosAlbum(image: Pointer; completionTarget: Pointer; completionSelector: SEL; contextInfo: Pointer); cdecl;
  external libUIKit name _PU + 'UIImageWriteToSavedPhotosAlbum';

function UIVideoAtPathIsCompatibleWithSavedPhotosAlbum(videoPath: Pointer): Boolean; cdecl;
  external libUIKit name _PU + 'UIVideoAtPathIsCompatibleWithSavedPhotosAlbum';

procedure UISaveVideoAtPathToSavedPhotosAlbum(videoPath: Pointer; completionTarget: Pointer; completionSelector: SEL; contextInfo: Pointer); cdecl;
  external libUIKit name _PU + 'UISaveVideoAtPathToSavedPhotosAlbum';

function UIFloatRangeIsInfinite(range: UIFloatRange): Boolean; cdecl;
  external libUIKit name _PU + 'UIFloatRangeIsInfinite';

implementation

uses
  Posix.Dlfcn;

var
  UIKitModule: THandle;

function UIAccessibilityTraitNone: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitNone'))^;
end;

function UIAccessibilityTraitButton: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitButton'))^;
end;

function UIAccessibilityTraitLink: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitLink'))^;
end;

function UIAccessibilityTraitHeader: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitHeader'))^;
end;

function UIAccessibilityTraitSearchField: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitSearchField'))^;
end;

function UIAccessibilityTraitImage: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitImage'))^;
end;

function UIAccessibilityTraitSelected: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitSelected'))^;
end;

function UIAccessibilityTraitPlaysSound: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitPlaysSound'))^;
end;

function UIAccessibilityTraitKeyboardKey: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitKeyboardKey'))^;
end;

function UIAccessibilityTraitStaticText: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitStaticText'))^;
end;

function UIAccessibilityTraitSummaryElement: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitSummaryElement'))^;
end;

function UIAccessibilityTraitNotEnabled: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitNotEnabled'))^;
end;

function UIAccessibilityTraitUpdatesFrequently: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitUpdatesFrequently'))^;
end;

function UIAccessibilityTraitStartsMediaSession: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitStartsMediaSession'))^;
end;

function UIAccessibilityTraitAdjustable: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitAdjustable'))^;
end;

function UIAccessibilityTraitAllowsDirectInteraction: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitAllowsDirectInteraction'))^;
end;

function UIAccessibilityTraitCausesPageTurn: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitCausesPageTurn'))^;
end;

function UIAccessibilityTraitTabBar: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitTabBar'))^;
end;

function UIAccessibilityTraitToggleButton: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitToggleButton'))^;
end;

function UIAccessibilityTraitSupportsZoom: UIAccessibilityTraits;
begin
  Result := PUInt64(CocoaPointerConst(libUIKit, 'UIAccessibilityTraitSupportsZoom'))^;
end;

function UIAccessibilityScreenChangedNotification: UIAccessibilityNotifications;
begin
  Result := PUInt32(CocoaPointerConst(libUIKit, 'UIAccessibilityScreenChangedNotification'))^;
end;

function UIAccessibilityLayoutChangedNotification: UIAccessibilityNotifications;
begin
  Result := PUInt32(CocoaPointerConst(libUIKit, 'UIAccessibilityLayoutChangedNotification'))^;
end;

function UIAccessibilityAnnouncementNotification: UIAccessibilityNotifications;
begin
  Result := PUInt32(CocoaPointerConst(libUIKit, 'UIAccessibilityAnnouncementNotification'))^;
end;

function UIAccessibilityPageScrolledNotification: UIAccessibilityNotifications;
begin
  Result := PUInt32(CocoaPointerConst(libUIKit, 'UIAccessibilityPageScrolledNotification'))^;
end;

function UIAccessibilityPauseAssistiveTechnologyNotification: UIAccessibilityNotifications;
begin
  Result := PUInt32(CocoaPointerConst(libUIKit, 'UIAccessibilityPauseAssistiveTechnologyNotification'))^;
end;

function UIAccessibilityResumeAssistiveTechnologyNotification: UIAccessibilityNotifications;
begin
  Result := PUInt32(CocoaPointerConst(libUIKit, 'UIAccessibilityResumeAssistiveTechnologyNotification'))^;
end;

function UIAccessibilityAnnouncementDidFinishNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityAnnouncementDidFinishNotification');
end;

function UIAccessibilityAnnouncementKeyStringValue: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityAnnouncementKeyStringValue');
end;

function UIAccessibilityAnnouncementKeyWasSuccessful: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityAnnouncementKeyWasSuccessful');
end;

function UIAccessibilityElementFocusedNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityElementFocusedNotification');
end;

function UIAccessibilityFocusedElementKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityFocusedElementKey');
end;

function UIAccessibilityUnfocusedElementKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityUnfocusedElementKey');
end;

function UIAccessibilityAssistiveTechnologyKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityAssistiveTechnologyKey');
end;

function UIAccessibilityNotificationSwitchControlIdentifier: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityNotificationSwitchControlIdentifier');
end;

function UIAccessibilityNotificationVoiceOverIdentifier: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityNotificationVoiceOverIdentifier');
end;

function UIAccessibilityTextualContextWordProcessing: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityTextualContextWordProcessing');
end;

function UIAccessibilityTextualContextNarrative: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityTextualContextNarrative');
end;

function UIAccessibilityTextualContextMessaging: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityTextualContextMessaging');
end;

function UIAccessibilityTextualContextSpreadsheet: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityTextualContextSpreadsheet');
end;

function UIAccessibilityTextualContextFileSystem: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityTextualContextFileSystem');
end;

function UIAccessibilityTextualContextSourceCode: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityTextualContextSourceCode');
end;

function UIAccessibilityTextualContextConsole: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityTextualContextConsole');
end;

function UIAccessibilityPriorityHigh: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityPriorityHigh');
end;

function UIAccessibilityPriorityDefault: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityPriorityDefault');
end;

function UIAccessibilityPriorityLow: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityPriorityLow');
end;

function UIAccessibilitySpeechAttributePunctuation: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilitySpeechAttributePunctuation');
end;

function UIAccessibilitySpeechAttributeLanguage: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilitySpeechAttributeLanguage');
end;

function UIAccessibilitySpeechAttributePitch: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilitySpeechAttributePitch');
end;

function UIAccessibilitySpeechAttributeQueueAnnouncement: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilitySpeechAttributeQueueAnnouncement');
end;

function UIAccessibilitySpeechAttributeAnnouncementPriority: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilitySpeechAttributeAnnouncementPriority');
end;

function UIAccessibilitySpeechAttributeIPANotation: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilitySpeechAttributeIPANotation');
end;

function UIAccessibilitySpeechAttributeSpellOut: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilitySpeechAttributeSpellOut');
end;

function UIAccessibilityTextAttributeHeadingLevel: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityTextAttributeHeadingLevel');
end;

function UIAccessibilityTextAttributeCustom: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityTextAttributeCustom');
end;

function UIAccessibilityTextAttributeContext: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityTextAttributeContext');
end;

function UIFontDescriptorSystemDesignDefault: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorSystemDesignDefault');
end;

function UIFontDescriptorSystemDesignRounded: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorSystemDesignRounded');
end;

function UIFontDescriptorSystemDesignSerif: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorSystemDesignSerif');
end;

function UIFontDescriptorSystemDesignMonospaced: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorSystemDesignMonospaced');
end;

function UIFontDescriptorFamilyAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorFamilyAttribute');
end;

function UIFontDescriptorNameAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorNameAttribute');
end;

function UIFontDescriptorFaceAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorFaceAttribute');
end;

function UIFontDescriptorSizeAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorSizeAttribute');
end;

function UIFontDescriptorVisibleNameAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorVisibleNameAttribute');
end;

function UIFontDescriptorMatrixAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorMatrixAttribute');
end;

function UIFontDescriptorCharacterSetAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorCharacterSetAttribute');
end;

function UIFontDescriptorCascadeListAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorCascadeListAttribute');
end;

function UIFontDescriptorTraitsAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorTraitsAttribute');
end;

function UIFontDescriptorFixedAdvanceAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorFixedAdvanceAttribute');
end;

function UIFontDescriptorFeatureSettingsAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorFeatureSettingsAttribute');
end;

function UIFontDescriptorTextStyleAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontDescriptorTextStyleAttribute');
end;

function UIFontSymbolicTrait: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontSymbolicTrait');
end;

function UIFontWeightTrait: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontWeightTrait');
end;

function UIFontWidthTrait: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontWidthTrait');
end;

function UIFontSlantTrait: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontSlantTrait');
end;

function UIFontWeightUltraLight: UIFontWeight;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWeightUltraLight'))^;
end;

function UIFontWeightThin: UIFontWeight;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWeightThin'))^;
end;

function UIFontWeightLight: UIFontWeight;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWeightLight'))^;
end;

function UIFontWeightRegular: UIFontWeight;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWeightRegular'))^;
end;

function UIFontWeightMedium: UIFontWeight;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWeightMedium'))^;
end;

function UIFontWeightSemibold: UIFontWeight;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWeightSemibold'))^;
end;

function UIFontWeightBold: UIFontWeight;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWeightBold'))^;
end;

function UIFontWeightHeavy: UIFontWeight;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWeightHeavy'))^;
end;

function UIFontWeightBlack: UIFontWeight;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWeightBlack'))^;
end;

function UIFontWidthCondensed: UIFontWidth;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWidthCondensed'))^;
end;

function UIFontWidthStandard: UIFontWidth;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWidthStandard'))^;
end;

function UIFontWidthExpanded: UIFontWidth;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWidthExpanded'))^;
end;

function UIFontWidthCompressed: UIFontWidth;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIFontWidthCompressed'))^;
end;

function UIFontFeatureTypeIdentifierKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontFeatureTypeIdentifierKey');
end;

function UIFontFeatureSelectorIdentifierKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontFeatureSelectorIdentifierKey');
end;

function UIFontTextStyleLargeTitle: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleLargeTitle');
end;

function UIFontTextStyleExtraLargeTitle: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleExtraLargeTitle');
end;

function UIFontTextStyleExtraLargeTitle2: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleExtraLargeTitle2');
end;

function UIFontTextStyleTitle1: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleTitle1');
end;

function UIFontTextStyleTitle2: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleTitle2');
end;

function UIFontTextStyleTitle3: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleTitle3');
end;

function UIFontTextStyleHeadline: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleHeadline');
end;

function UIFontTextStyleSubheadline: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleSubheadline');
end;

function UIFontTextStyleBody: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleBody');
end;

function UIFontTextStyleCallout: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleCallout');
end;

function UIFontTextStyleFootnote: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleFootnote');
end;

function UIFontTextStyleCaption1: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleCaption1');
end;

function UIFontTextStyleCaption2: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFontTextStyleCaption2');
end;

function UILocalNotificationDefaultSoundName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UILocalNotificationDefaultSoundName');
end;

function NSFontAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSFontAttributeName');
end;

function NSParagraphStyleAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSParagraphStyleAttributeName');
end;

function NSForegroundColorAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSForegroundColorAttributeName');
end;

function NSBackgroundColorAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSBackgroundColorAttributeName');
end;

function NSLigatureAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSLigatureAttributeName');
end;

function NSKernAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSKernAttributeName');
end;

function NSTrackingAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTrackingAttributeName');
end;

function NSStrikethroughStyleAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSStrikethroughStyleAttributeName');
end;

function NSUnderlineStyleAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSUnderlineStyleAttributeName');
end;

function NSStrokeColorAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSStrokeColorAttributeName');
end;

function NSStrokeWidthAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSStrokeWidthAttributeName');
end;

function NSShadowAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSShadowAttributeName');
end;

function NSTextEffectAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextEffectAttributeName');
end;

function NSAttachmentAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSAttachmentAttributeName');
end;

function NSLinkAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSLinkAttributeName');
end;

function NSBaselineOffsetAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSBaselineOffsetAttributeName');
end;

function NSUnderlineColorAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSUnderlineColorAttributeName');
end;

function NSStrikethroughColorAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSStrikethroughColorAttributeName');
end;

function NSWritingDirectionAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSWritingDirectionAttributeName');
end;

function NSTextEffectLetterpressStyle: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextEffectLetterpressStyle');
end;

function NSPlainTextDocumentType: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSPlainTextDocumentType');
end;

function NSRTFTextDocumentType: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSRTFTextDocumentType');
end;

function NSRTFDTextDocumentType: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSRTFDTextDocumentType');
end;

function NSHTMLTextDocumentType: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSHTMLTextDocumentType');
end;

function NSTextLayoutSectionOrientation: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextLayoutSectionOrientation');
end;

function NSTextLayoutSectionRange: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextLayoutSectionRange');
end;

function NSDocumentTypeDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSDocumentTypeDocumentAttribute');
end;

function NSCharacterEncodingDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSCharacterEncodingDocumentAttribute');
end;

function NSDefaultAttributesDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSDefaultAttributesDocumentAttribute');
end;

function NSPaperSizeDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSPaperSizeDocumentAttribute');
end;

function NSPaperMarginDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSPaperMarginDocumentAttribute');
end;

function NSViewSizeDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSViewSizeDocumentAttribute');
end;

function NSViewZoomDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSViewZoomDocumentAttribute');
end;

function NSViewModeDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSViewModeDocumentAttribute');
end;

function NSDefaultFontExcludedDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSDefaultFontExcludedDocumentAttribute');
end;

function NSReadOnlyDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSReadOnlyDocumentAttribute');
end;

function NSBackgroundColorDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSBackgroundColorDocumentAttribute');
end;

function NSHyphenationFactorDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSHyphenationFactorDocumentAttribute');
end;

function NSDefaultTabIntervalDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSDefaultTabIntervalDocumentAttribute');
end;

function NSTextLayoutSectionsAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextLayoutSectionsAttribute');
end;

function NSTextScalingDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextScalingDocumentAttribute');
end;

function NSSourceTextScalingDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSSourceTextScalingDocumentAttribute');
end;

function NSCocoaVersionDocumentAttribute: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSCocoaVersionDocumentAttribute');
end;

function NSDocumentTypeDocumentOption: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSDocumentTypeDocumentOption');
end;

function NSDefaultAttributesDocumentOption: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSDefaultAttributesDocumentOption');
end;

function NSCharacterEncodingDocumentOption: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSCharacterEncodingDocumentOption');
end;

function NSTargetTextScalingDocumentOption: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTargetTextScalingDocumentOption');
end;

function NSSourceTextScalingDocumentOption: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSSourceTextScalingDocumentOption');
end;

function NSObliquenessAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSObliquenessAttributeName');
end;

function NSExpansionAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSExpansionAttributeName');
end;

function NSVerticalGlyphFormAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSVerticalGlyphFormAttributeName');
end;

function NSTabColumnTerminatorsAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTabColumnTerminatorsAttributeName');
end;

function UIMenuApplication: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuApplication');
end;

function UIMenuFile: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuFile');
end;

function UIMenuEdit: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuEdit');
end;

function UIMenuView: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuView');
end;

function UIMenuWindow: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuWindow');
end;

function UIMenuHelp: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuHelp');
end;

function UIMenuAbout: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuAbout');
end;

function UIMenuPreferences: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuPreferences');
end;

function UIMenuServices: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuServices');
end;

function UIMenuHide: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuHide');
end;

function UIMenuQuit: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuQuit');
end;

function UIMenuNewScene: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuNewScene');
end;

function UIMenuOpenRecent: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuOpenRecent');
end;

function UIMenuClose: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuClose');
end;

function UIMenuPrint: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuPrint');
end;

function UIMenuDocument: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuDocument');
end;

function UIMenuUndoRedo: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuUndoRedo');
end;

function UIMenuStandardEdit: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuStandardEdit');
end;

function UIMenuFind: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuFind');
end;

function UIMenuReplace: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuReplace');
end;

function UIMenuShare: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuShare');
end;

function UIMenuTextStyle: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuTextStyle');
end;

function UIMenuSpelling: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuSpelling');
end;

function UIMenuSpellingPanel: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuSpellingPanel');
end;

function UIMenuSpellingOptions: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuSpellingOptions');
end;

function UIMenuSubstitutions: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuSubstitutions');
end;

function UIMenuSubstitutionsPanel: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuSubstitutionsPanel');
end;

function UIMenuSubstitutionOptions: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuSubstitutionOptions');
end;

function UIMenuTransformations: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuTransformations');
end;

function UIMenuSpeech: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuSpeech');
end;

function UIMenuLookup: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuLookup');
end;

function UIMenuLearn: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuLearn');
end;

function UIMenuFormat: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuFormat');
end;

function UIMenuAutoFill: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuAutoFill');
end;

function UIMenuFont: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuFont');
end;

function UIMenuTextSize: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuTextSize');
end;

function UIMenuTextColor: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuTextColor');
end;

function UIMenuTextStylePasteboard: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuTextStylePasteboard');
end;

function UIMenuText: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuText');
end;

function UIMenuWritingDirection: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuWritingDirection');
end;

function UIMenuAlignment: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuAlignment');
end;

function UIMenuToolbar: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuToolbar');
end;

function UIMenuSidebar: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuSidebar');
end;

function UIMenuFullscreen: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuFullscreen');
end;

function UIMenuMinimizeAndZoom: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuMinimizeAndZoom');
end;

function UIMenuBringAllToFront: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuBringAllToFront');
end;

function UIMenuRoot: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuRoot');
end;

function UICommandTagShare: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UICommandTagShare');
end;

function UIKeyInputUpArrow: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputUpArrow');
end;

function UIKeyInputDownArrow: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputDownArrow');
end;

function UIKeyInputLeftArrow: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputLeftArrow');
end;

function UIKeyInputRightArrow: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputRightArrow');
end;

function UIKeyInputEscape: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputEscape');
end;

function UIKeyInputPageUp: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputPageUp');
end;

function UIKeyInputPageDown: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputPageDown');
end;

function UIKeyInputHome: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputHome');
end;

function UIKeyInputEnd: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputEnd');
end;

function UIKeyInputF1: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF1');
end;

function UIKeyInputF2: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF2');
end;

function UIKeyInputF3: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF3');
end;

function UIKeyInputF4: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF4');
end;

function UIKeyInputF5: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF5');
end;

function UIKeyInputF6: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF6');
end;

function UIKeyInputF7: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF7');
end;

function UIKeyInputF8: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF8');
end;

function UIKeyInputF9: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF9');
end;

function UIKeyInputF10: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF10');
end;

function UIKeyInputF11: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF11');
end;

function UIKeyInputF12: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputF12');
end;

function UIKeyInputDelete: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyInputDelete');
end;

function UIDeviceOrientationDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIDeviceOrientationDidChangeNotification');
end;

function UIDeviceBatteryStateDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIDeviceBatteryStateDidChangeNotification');
end;

function UIDeviceBatteryLevelDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIDeviceBatteryLevelDidChangeNotification');
end;

function UIDeviceProximityStateDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIDeviceProximityStateDidChangeNotification');
end;

function UIContentSizeCategoryUnspecified: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryUnspecified');
end;

function UIContentSizeCategoryExtraSmall: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryExtraSmall');
end;

function UIContentSizeCategorySmall: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategorySmall');
end;

function UIContentSizeCategoryMedium: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryMedium');
end;

function UIContentSizeCategoryLarge: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryLarge');
end;

function UIContentSizeCategoryExtraLarge: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryExtraLarge');
end;

function UIContentSizeCategoryExtraExtraLarge: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryExtraExtraLarge');
end;

function UIContentSizeCategoryExtraExtraExtraLarge: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryExtraExtraExtraLarge');
end;

function UIContentSizeCategoryAccessibilityMedium: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryAccessibilityMedium');
end;

function UIContentSizeCategoryAccessibilityLarge: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryAccessibilityLarge');
end;

function UIContentSizeCategoryAccessibilityExtraLarge: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryAccessibilityExtraLarge');
end;

function UIContentSizeCategoryAccessibilityExtraExtraLarge: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryAccessibilityExtraExtraLarge');
end;

function UIContentSizeCategoryAccessibilityExtraExtraExtraLarge: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryAccessibilityExtraExtraExtraLarge');
end;

function UIContentSizeCategoryDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryDidChangeNotification');
end;

function UIContentSizeCategoryNewValueKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIContentSizeCategoryNewValueKey');
end;

function UISceneErrorDomain: NSErrorDomain;
begin
  Result := CocoaNSStringConst(libUIKit, 'UISceneErrorDomain');
end;

function UIFocusDidUpdateNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFocusDidUpdateNotification');
end;

function UIFocusMovementDidFailNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFocusMovementDidFailNotification');
end;

function UIFocusUpdateContextKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFocusUpdateContextKey');
end;

function UIFocusUpdateAnimationCoordinatorKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFocusUpdateAnimationCoordinatorKey');
end;

function UIFocusSoundIdentifierNone: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFocusSoundIdentifierNone');
end;

function UIFocusSoundIdentifierDefault: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIFocusSoundIdentifierDefault');
end;

function UIActionPaste: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActionPaste');
end;

function UIActionPasteAndMatchStyle: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActionPasteAndMatchStyle');
end;

function UIActionPasteAndGo: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActionPasteAndGo');
end;

function UIActionPasteAndSearch: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActionPasteAndSearch');
end;

function UIScrollViewDecelerationRateNormal: UIScrollViewDecelerationRate;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIScrollViewDecelerationRateNormal'))^;
end;

function UIScrollViewDecelerationRateFast: UIScrollViewDecelerationRate;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIScrollViewDecelerationRateFast'))^;
end;

function UITextContentTypeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeName');
end;

function UITextContentTypeNamePrefix: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeNamePrefix');
end;

function UITextContentTypeGivenName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeGivenName');
end;

function UITextContentTypeMiddleName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeMiddleName');
end;

function UITextContentTypeFamilyName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeFamilyName');
end;

function UITextContentTypeNameSuffix: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeNameSuffix');
end;

function UITextContentTypeNickname: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeNickname');
end;

function UITextContentTypeJobTitle: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeJobTitle');
end;

function UITextContentTypeOrganizationName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeOrganizationName');
end;

function UITextContentTypeLocation: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeLocation');
end;

function UITextContentTypeFullStreetAddress: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeFullStreetAddress');
end;

function UITextContentTypeStreetAddressLine1: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeStreetAddressLine1');
end;

function UITextContentTypeStreetAddressLine2: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeStreetAddressLine2');
end;

function UITextContentTypeAddressCity: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeAddressCity');
end;

function UITextContentTypeAddressState: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeAddressState');
end;

function UITextContentTypeAddressCityAndState: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeAddressCityAndState');
end;

function UITextContentTypeSublocality: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeSublocality');
end;

function UITextContentTypeCountryName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCountryName');
end;

function UITextContentTypePostalCode: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypePostalCode');
end;

function UITextContentTypeTelephoneNumber: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeTelephoneNumber');
end;

function UITextContentTypeEmailAddress: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeEmailAddress');
end;

function UITextContentTypeURL: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeURL');
end;

function UITextContentTypeCreditCardNumber: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCreditCardNumber');
end;

function UITextContentTypeUsername: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeUsername');
end;

function UITextContentTypePassword: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypePassword');
end;

function UITextContentTypeNewPassword: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeNewPassword');
end;

function UITextContentTypeOneTimeCode: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeOneTimeCode');
end;

function UITextContentTypeShipmentTrackingNumber: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeShipmentTrackingNumber');
end;

function UITextContentTypeFlightNumber: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeFlightNumber');
end;

function UITextContentTypeDateTime: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeDateTime');
end;

function UITextContentTypeBirthdate: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeBirthdate');
end;

function UITextContentTypeBirthdateDay: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeBirthdateDay');
end;

function UITextContentTypeBirthdateMonth: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeBirthdateMonth');
end;

function UITextContentTypeBirthdateYear: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeBirthdateYear');
end;

function UITextContentTypeCreditCardSecurityCode: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCreditCardSecurityCode');
end;

function UITextContentTypeCreditCardName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCreditCardName');
end;

function UITextContentTypeCreditCardGivenName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCreditCardGivenName');
end;

function UITextContentTypeCreditCardMiddleName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCreditCardMiddleName');
end;

function UITextContentTypeCreditCardFamilyName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCreditCardFamilyName');
end;

function UITextContentTypeCreditCardExpiration: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCreditCardExpiration');
end;

function UITextContentTypeCreditCardExpirationMonth: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCreditCardExpirationMonth');
end;

function UITextContentTypeCreditCardExpirationYear: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCreditCardExpirationYear');
end;

function UITextContentTypeCreditCardType: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCreditCardType');
end;

function UITextContentTypeCellularEID: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCellularEID');
end;

function UITextContentTypeCellularIMEI: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextContentTypeCellularIMEI');
end;

function UITextInputTextBackgroundColorKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextInputTextBackgroundColorKey');
end;

function UITextInputTextColorKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextInputTextColorKey');
end;

function UITextInputTextFontKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextInputTextFontKey');
end;

function UITextInputCurrentInputModeDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextInputCurrentInputModeDidChangeNotification');
end;

function UITextAttributeFont: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextAttributeFont');
end;

function UITextAttributeTextColor: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextAttributeTextColor');
end;

function UITextAttributeTextShadowColor: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextAttributeTextShadowColor');
end;

function UITextAttributeTextShadowOffset: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextAttributeTextShadowOffset');
end;

function UITextFieldTextDidBeginEditingNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextFieldTextDidBeginEditingNotification');
end;

function UITextFieldTextDidEndEditingNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextFieldTextDidEndEditingNotification');
end;

function UITextFieldTextDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextFieldTextDidChangeNotification');
end;

function UITextFieldDidEndEditingReasonKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextFieldDidEndEditingReasonKey');
end;

function UIApplicationInvalidInterfaceOrientationException: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationInvalidInterfaceOrientationException');
end;

function UIBackgroundTaskInvalid: UIBackgroundTaskIdentifier;
begin
  Result := PNSUInteger(CocoaPointerConst(libUIKit, 'UIBackgroundTaskInvalid'))^;
end;

function UIMinimumKeepAliveTimeout: NSTimeInterval;
begin
  Result := CocoaDoubleConst(libUIKit, 'UIMinimumKeepAliveTimeout');
end;

function UIApplicationBackgroundFetchIntervalMinimum: NSTimeInterval;
begin
  Result := CocoaDoubleConst(libUIKit, 'UIApplicationBackgroundFetchIntervalMinimum');
end;

function UIApplicationBackgroundFetchIntervalNever: NSTimeInterval;
begin
  Result := CocoaDoubleConst(libUIKit, 'UIApplicationBackgroundFetchIntervalNever');
end;

function UITrackingRunLoopMode: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITrackingRunLoopMode');
end;

function UIApplicationDidEnterBackgroundNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationDidEnterBackgroundNotification');
end;

function UIApplicationWillEnterForegroundNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationWillEnterForegroundNotification');
end;

function UIApplicationDidFinishLaunchingNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationDidFinishLaunchingNotification');
end;

function UIApplicationDidBecomeActiveNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationDidBecomeActiveNotification');
end;

function UIApplicationWillResignActiveNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationWillResignActiveNotification');
end;

function UIApplicationDidReceiveMemoryWarningNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationDidReceiveMemoryWarningNotification');
end;

function UIApplicationWillTerminateNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationWillTerminateNotification');
end;

function UIApplicationSignificantTimeChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationSignificantTimeChangeNotification');
end;

function UIApplicationWillChangeStatusBarOrientationNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationWillChangeStatusBarOrientationNotification');
end;

function UIApplicationDidChangeStatusBarOrientationNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationDidChangeStatusBarOrientationNotification');
end;

function UIApplicationStatusBarOrientationUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationStatusBarOrientationUserInfoKey');
end;

function UIApplicationWillChangeStatusBarFrameNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationWillChangeStatusBarFrameNotification');
end;

function UIApplicationDidChangeStatusBarFrameNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationDidChangeStatusBarFrameNotification');
end;

function UIApplicationStatusBarFrameUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationStatusBarFrameUserInfoKey');
end;

function UIApplicationBackgroundRefreshStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationBackgroundRefreshStatusDidChangeNotification');
end;

function UIApplicationProtectedDataWillBecomeUnavailable: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationProtectedDataWillBecomeUnavailable');
end;

function UIApplicationProtectedDataDidBecomeAvailable: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationProtectedDataDidBecomeAvailable');
end;

function UIApplicationLaunchOptionsURLKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsURLKey');
end;

function UIApplicationLaunchOptionsSourceApplicationKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsSourceApplicationKey');
end;

function UIApplicationLaunchOptionsRemoteNotificationKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsRemoteNotificationKey');
end;

function UIApplicationLaunchOptionsLocalNotificationKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsLocalNotificationKey');
end;

function UIApplicationLaunchOptionsAnnotationKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsAnnotationKey');
end;

function UIApplicationLaunchOptionsLocationKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsLocationKey');
end;

function UIApplicationLaunchOptionsNewsstandDownloadsKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsNewsstandDownloadsKey');
end;

function UIApplicationLaunchOptionsBluetoothCentralsKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsBluetoothCentralsKey');
end;

function UIApplicationLaunchOptionsBluetoothPeripheralsKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsBluetoothPeripheralsKey');
end;

function UIApplicationLaunchOptionsShortcutItemKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsShortcutItemKey');
end;

function UIApplicationLaunchOptionsEventAttributionKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsEventAttributionKey');
end;

function UIApplicationLaunchOptionsUserActivityDictionaryKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsUserActivityDictionaryKey');
end;

function UIApplicationLaunchOptionsUserActivityTypeKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsUserActivityTypeKey');
end;

function UIApplicationLaunchOptionsCloudKitShareMetadataKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationLaunchOptionsCloudKitShareMetadataKey');
end;

function UIApplicationOpenSettingsURLString: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationOpenSettingsURLString');
end;

function UIApplicationOpenNotificationSettingsURLString: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationOpenNotificationSettingsURLString');
end;

function UIApplicationOpenURLOptionsSourceApplicationKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationOpenURLOptionsSourceApplicationKey');
end;

function UIApplicationOpenURLOptionsAnnotationKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationOpenURLOptionsAnnotationKey');
end;

function UIApplicationOpenURLOptionsOpenInPlaceKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationOpenURLOptionsOpenInPlaceKey');
end;

function UIApplicationOpenURLOptionsEventAttributionKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationOpenURLOptionsEventAttributionKey');
end;

function UIApplicationUserDidTakeScreenshotNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationUserDidTakeScreenshotNotification');
end;

function UIApplicationKeyboardExtensionPointIdentifier: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationKeyboardExtensionPointIdentifier');
end;

function UIApplicationOpenURLOptionUniversalLinksOnly: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationOpenURLOptionUniversalLinksOnly');
end;

function UIApplicationOpenExternalURLOptionsEventAttributionKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationOpenExternalURLOptionsEventAttributionKey');
end;

function UIStateRestorationViewControllerStoryboardKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIStateRestorationViewControllerStoryboardKey');
end;

function UIApplicationStateRestorationBundleVersionKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationStateRestorationBundleVersionKey');
end;

function UIApplicationStateRestorationUserInterfaceIdiomKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationStateRestorationUserInterfaceIdiomKey');
end;

function UIApplicationStateRestorationTimestampKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationStateRestorationTimestampKey');
end;

function UIApplicationStateRestorationSystemVersionKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIApplicationStateRestorationSystemVersionKey');
end;

function UISceneWillConnectNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UISceneWillConnectNotification');
end;

function UISceneDidDisconnectNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UISceneDidDisconnectNotification');
end;

function UISceneDidActivateNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UISceneDidActivateNotification');
end;

function UISceneWillDeactivateNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UISceneWillDeactivateNotification');
end;

function UISceneWillEnterForegroundNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UISceneWillEnterForegroundNotification');
end;

function UISceneDidEnterBackgroundNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UISceneDidEnterBackgroundNotification');
end;

function UISceneSessionRoleImmersiveSpaceApplication: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UISceneSessionRoleImmersiveSpaceApplication');
end;

function UIPointerLockStateDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPointerLockStateDidChangeNotification');
end;

function UIPointerLockStateSceneUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPointerLockStateSceneUserInfoKey');
end;

function UIViewControllerShowDetailTargetDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIViewControllerShowDetailTargetDidChangeNotification');
end;

function UIViewControllerHierarchyInconsistencyException: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIViewControllerHierarchyInconsistencyException');
end;

function UIGuidedAccessErrorDomain: NSErrorDomain;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIGuidedAccessErrorDomain');
end;

function UIAccessibilityVoiceOverStatusChanged: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityVoiceOverStatusChanged');
end;

function UIAccessibilityVoiceOverStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityVoiceOverStatusDidChangeNotification');
end;

function UIAccessibilityMonoAudioStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityMonoAudioStatusDidChangeNotification');
end;

function UIAccessibilityClosedCaptioningStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityClosedCaptioningStatusDidChangeNotification');
end;

function UIAccessibilityInvertColorsStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityInvertColorsStatusDidChangeNotification');
end;

function UIAccessibilityGuidedAccessStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityGuidedAccessStatusDidChangeNotification');
end;

function UIAccessibilityBoldTextStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityBoldTextStatusDidChangeNotification');
end;

function UIAccessibilityButtonShapesEnabledStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityButtonShapesEnabledStatusDidChangeNotification');
end;

function UIAccessibilityGrayscaleStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityGrayscaleStatusDidChangeNotification');
end;

function UIAccessibilityReduceTransparencyStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityReduceTransparencyStatusDidChangeNotification');
end;

function UIAccessibilityReduceMotionStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityReduceMotionStatusDidChangeNotification');
end;

function UIAccessibilityPrefersCrossFadeTransitionsStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityPrefersCrossFadeTransitionsStatusDidChangeNotification');
end;

function UIAccessibilityVideoAutoplayStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityVideoAutoplayStatusDidChangeNotification');
end;

function UIAccessibilityDarkerSystemColorsStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityDarkerSystemColorsStatusDidChangeNotification');
end;

function UIAccessibilitySwitchControlStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilitySwitchControlStatusDidChangeNotification');
end;

function UIAccessibilitySpeakSelectionStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilitySpeakSelectionStatusDidChangeNotification');
end;

function UIAccessibilitySpeakScreenStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilitySpeakScreenStatusDidChangeNotification');
end;

function UIAccessibilityShakeToUndoDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityShakeToUndoDidChangeNotification');
end;

function UIAccessibilityAssistiveTouchStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityAssistiveTouchStatusDidChangeNotification');
end;

function UIAccessibilityShouldDifferentiateWithoutColorDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityShouldDifferentiateWithoutColorDidChangeNotification');
end;

function UIAccessibilityOnOffSwitchLabelsDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityOnOffSwitchLabelsDidChangeNotification');
end;

function UIAccessibilityHearingDevicePairedEarDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIAccessibilityHearingDevicePairedEarDidChangeNotification');
end;

function UICollectionElementKindSectionHeader: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UICollectionElementKindSectionHeader');
end;

function UICollectionElementKindSectionFooter: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UICollectionElementKindSectionFooter');
end;

function UICollectionLayoutSectionOrthogonalScrollingDecelerationRateAutomatic: UICollectionLayoutSectionOrthogonalScrollingDecelerationRate;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UICollectionLayoutSectionOrthogonalScrollingDecelerationRateAutomatic'))^;
end;

function UICollectionLayoutSectionOrthogonalScrollingDecelerationRateNormal: UICollectionLayoutSectionOrthogonalScrollingDecelerationRate;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UICollectionLayoutSectionOrthogonalScrollingDecelerationRateNormal'))^;
end;

function UICollectionLayoutSectionOrthogonalScrollingDecelerationRateFast: UICollectionLayoutSectionOrthogonalScrollingDecelerationRate;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UICollectionLayoutSectionOrthogonalScrollingDecelerationRateFast'))^;
end;

function UITableViewIndexSearch: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITableViewIndexSearch');
end;

function UITableViewSelectionDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITableViewSelectionDidChangeNotification');
end;

function UIDocumentStateChangedNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIDocumentStateChangedNotification');
end;

function NSUserActivityDocumentURLKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSUserActivityDocumentURLKey');
end;

function UIImagePickerControllerMediaType: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIImagePickerControllerMediaType');
end;

function UIImagePickerControllerOriginalImage: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIImagePickerControllerOriginalImage');
end;

function UIImagePickerControllerEditedImage: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIImagePickerControllerEditedImage');
end;

function UIImagePickerControllerCropRect: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIImagePickerControllerCropRect');
end;

function UIImagePickerControllerMediaURL: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIImagePickerControllerMediaURL');
end;

function UIImagePickerControllerReferenceURL: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIImagePickerControllerReferenceURL');
end;

function UIImagePickerControllerMediaMetadata: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIImagePickerControllerMediaMetadata');
end;

function UIImagePickerControllerLivePhoto: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIImagePickerControllerLivePhoto');
end;

function UIImagePickerControllerPHAsset: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIImagePickerControllerPHAsset');
end;

function UIImagePickerControllerImageURL: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIImagePickerControllerImageURL');
end;

function UIUserNotificationTextInputActionButtonTitleKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIUserNotificationTextInputActionButtonTitleKey');
end;

function UIUserNotificationActionResponseTypedTextKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIUserNotificationActionResponseTypedTextKey');
end;

function UIWindowSceneSessionRoleApplication: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIWindowSceneSessionRoleApplication');
end;

function UIWindowSceneSessionRoleExternalDisplayNonInteractive: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIWindowSceneSessionRoleExternalDisplayNonInteractive');
end;

function UIWindowSceneSessionRoleExternalDisplay: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIWindowSceneSessionRoleExternalDisplay');
end;

function UIWindowSceneSessionRoleVolumetricApplication: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIWindowSceneSessionRoleVolumetricApplication');
end;

function UIMenuControllerWillShowMenuNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuControllerWillShowMenuNotification');
end;

function UIMenuControllerDidShowMenuNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuControllerDidShowMenuNotification');
end;

function UIMenuControllerWillHideMenuNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuControllerWillHideMenuNotification');
end;

function UIMenuControllerDidHideMenuNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuControllerDidHideMenuNotification');
end;

function UIMenuControllerMenuFrameDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIMenuControllerMenuFrameDidChangeNotification');
end;

function UINibExternalObjects: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UINibExternalObjects');
end;

function UINibProxiedObjectsKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UINibProxiedObjectsKey');
end;

function UIPageViewControllerOptionSpineLocationKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPageViewControllerOptionSpineLocationKey');
end;

function UIPageViewControllerOptionInterPageSpacingKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPageViewControllerOptionInterPageSpacingKey');
end;

function UIPasteboardNameGeneral: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardNameGeneral');
end;

function UIPasteboardNameFind: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardNameFind');
end;

function UIPasteboardDetectionPatternProbableWebURL: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternProbableWebURL');
end;

function UIPasteboardDetectionPatternProbableWebSearch: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternProbableWebSearch');
end;

function UIPasteboardDetectionPatternNumber: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternNumber');
end;

function UIPasteboardDetectionPatternLink: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternLink');
end;

function UIPasteboardDetectionPatternPhoneNumber: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternPhoneNumber');
end;

function UIPasteboardDetectionPatternEmailAddress: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternEmailAddress');
end;

function UIPasteboardDetectionPatternPostalAddress: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternPostalAddress');
end;

function UIPasteboardDetectionPatternCalendarEvent: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternCalendarEvent');
end;

function UIPasteboardDetectionPatternShipmentTrackingNumber: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternShipmentTrackingNumber');
end;

function UIPasteboardDetectionPatternFlightNumber: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternFlightNumber');
end;

function UIPasteboardDetectionPatternMoneyAmount: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardDetectionPatternMoneyAmount');
end;

function UIPasteboardOptionExpirationDate: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardOptionExpirationDate');
end;

function UIPasteboardOptionLocalOnly: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardOptionLocalOnly');
end;

function UIPasteboardChangedNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardChangedNotification');
end;

function UIPasteboardChangedTypesAddedKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardChangedTypesAddedKey');
end;

function UIPasteboardChangedTypesRemovedKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardChangedTypesRemovedKey');
end;

function UIPasteboardRemovedNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardRemovedNotification');
end;

function UIPasteboardTypeAutomatic: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPasteboardTypeAutomatic');
end;

function UIScreenDidConnectNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIScreenDidConnectNotification');
end;

function UIScreenDidDisconnectNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIScreenDidDisconnectNotification');
end;

function UIScreenModeDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIScreenModeDidChangeNotification');
end;

function UIScreenBrightnessDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIScreenBrightnessDidChangeNotification');
end;

function UIScreenCapturedDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIScreenCapturedDidChangeNotification');
end;

function UIScreenReferenceDisplayModeStatusDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIScreenReferenceDisplayModeStatusDidChangeNotification');
end;

function UITransitionContextFromViewControllerKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITransitionContextFromViewControllerKey');
end;

function UITransitionContextToViewControllerKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITransitionContextToViewControllerKey');
end;

function UITransitionContextFromViewKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITransitionContextFromViewKey');
end;

function UITransitionContextToViewKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITransitionContextToViewKey');
end;

function UITextViewTextDidBeginEditingNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextViewTextDidBeginEditingNotification');
end;

function UITextViewTextDidChangeNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextViewTextDidChangeNotification');
end;

function UITextViewTextDidEndEditingNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextViewTextDidEndEditingNotification');
end;

function UIWindowLevelNormal: UIWindowLevel;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIWindowLevelNormal'))^;
end;

function UIWindowLevelAlert: UIWindowLevel;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIWindowLevelAlert'))^;
end;

function UIWindowLevelStatusBar: UIWindowLevel;
begin
  Result := PCGFloat(CocoaPointerConst(libUIKit, 'UIWindowLevelStatusBar'))^;
end;

function UIWindowDidBecomeVisibleNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIWindowDidBecomeVisibleNotification');
end;

function UIWindowDidBecomeHiddenNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIWindowDidBecomeHiddenNotification');
end;

function UIWindowDidBecomeKeyNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIWindowDidBecomeKeyNotification');
end;

function UIWindowDidResignKeyNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIWindowDidResignKeyNotification');
end;

function UIKeyboardWillShowNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardWillShowNotification');
end;

function UIKeyboardDidShowNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardDidShowNotification');
end;

function UIKeyboardWillHideNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardWillHideNotification');
end;

function UIKeyboardDidHideNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardDidHideNotification');
end;

function UIKeyboardFrameBeginUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardFrameBeginUserInfoKey');
end;

function UIKeyboardFrameEndUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardFrameEndUserInfoKey');
end;

function UIKeyboardAnimationDurationUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardAnimationDurationUserInfoKey');
end;

function UIKeyboardAnimationCurveUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardAnimationCurveUserInfoKey');
end;

function UIKeyboardIsLocalUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardIsLocalUserInfoKey');
end;

function UIKeyboardWillChangeFrameNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardWillChangeFrameNotification');
end;

function UIKeyboardDidChangeFrameNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardDidChangeFrameNotification');
end;

function UIKeyboardCenterBeginUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardCenterBeginUserInfoKey');
end;

function UIKeyboardCenterEndUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardCenterEndUserInfoKey');
end;

function UIKeyboardBoundsUserInfoKey: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIKeyboardBoundsUserInfoKey');
end;

function UIActivityItemsConfigurationMetadataKeyTitle: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityItemsConfigurationMetadataKeyTitle');
end;

function UIActivityItemsConfigurationMetadataKeyMessageBody: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityItemsConfigurationMetadataKeyMessageBody');
end;

function UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata');
end;

function UIActivityItemsConfigurationPreviewIntentFullSize: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityItemsConfigurationPreviewIntentFullSize');
end;

function UIActivityItemsConfigurationPreviewIntentThumbnail: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityItemsConfigurationPreviewIntentThumbnail');
end;

function UIActivityItemsConfigurationInteractionShare: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityItemsConfigurationInteractionShare');
end;

function UIActivityItemsConfigurationInteractionCopy: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityItemsConfigurationInteractionCopy');
end;

function NSTextStorageWillProcessEditingNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextStorageWillProcessEditingNotification');
end;

function NSTextStorageDidProcessEditingNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextStorageDidProcessEditingNotification');
end;

function UISheetPresentationControllerDetentIdentifierMedium: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UISheetPresentationControllerDetentIdentifierMedium');
end;

function UISheetPresentationControllerDetentIdentifierLarge: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UISheetPresentationControllerDetentIdentifierLarge');
end;

function UITextItemTagAttributeName: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UITextItemTagAttributeName');
end;

function NSTextContentStorageUnsupportedAttributeAddedNotification: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextContentStorageUnsupportedAttributeAddedNotification');
end;

function NSTextListMarkerBox: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerBox');
end;

function NSTextListMarkerCheck: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerCheck');
end;

function NSTextListMarkerCircle: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerCircle');
end;

function NSTextListMarkerDiamond: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerDiamond');
end;

function NSTextListMarkerDisc: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerDisc');
end;

function NSTextListMarkerHyphen: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerHyphen');
end;

function NSTextListMarkerSquare: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerSquare');
end;

function NSTextListMarkerLowercaseHexadecimal: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerLowercaseHexadecimal');
end;

function NSTextListMarkerUppercaseHexadecimal: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerUppercaseHexadecimal');
end;

function NSTextListMarkerOctal: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerOctal');
end;

function NSTextListMarkerLowercaseAlpha: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerLowercaseAlpha');
end;

function NSTextListMarkerUppercaseAlpha: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerUppercaseAlpha');
end;

function NSTextListMarkerLowercaseLatin: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerLowercaseLatin');
end;

function NSTextListMarkerUppercaseLatin: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerUppercaseLatin');
end;

function NSTextListMarkerLowercaseRoman: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerLowercaseRoman');
end;

function NSTextListMarkerUppercaseRoman: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerUppercaseRoman');
end;

function NSTextListMarkerDecimal: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'NSTextListMarkerDecimal');
end;

function UIDocumentBrowserErrorDomain: NSErrorDomain;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIDocumentBrowserErrorDomain');
end;

function UIActivityTypePostToFacebook: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypePostToFacebook');
end;

function UIActivityTypePostToTwitter: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypePostToTwitter');
end;

function UIActivityTypePostToWeibo: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypePostToWeibo');
end;

function UIActivityTypeMessage: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeMessage');
end;

function UIActivityTypeMail: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeMail');
end;

function UIActivityTypePrint: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypePrint');
end;

function UIActivityTypeCopyToPasteboard: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeCopyToPasteboard');
end;

function UIActivityTypeAssignToContact: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeAssignToContact');
end;

function UIActivityTypeSaveToCameraRoll: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeSaveToCameraRoll');
end;

function UIActivityTypeAddToReadingList: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeAddToReadingList');
end;

function UIActivityTypePostToFlickr: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypePostToFlickr');
end;

function UIActivityTypePostToVimeo: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypePostToVimeo');
end;

function UIActivityTypePostToTencentWeibo: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypePostToTencentWeibo');
end;

function UIActivityTypeAirDrop: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeAirDrop');
end;

function UIActivityTypeOpenInIBooks: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeOpenInIBooks');
end;

function UIActivityTypeMarkupAsPDF: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeMarkupAsPDF');
end;

function UIActivityTypeSharePlay: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeSharePlay');
end;

function UIActivityTypeCollaborationInviteWithLink: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeCollaborationInviteWithLink');
end;

function UIActivityTypeCollaborationCopyLink: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeCollaborationCopyLink');
end;

function UIActivityTypeAddToHomeScreen: NSString;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIActivityTypeAddToHomeScreen');
end;

function UIPrintErrorDomain: NSErrorDomain;
begin
  Result := CocoaNSStringConst(libUIKit, 'UIPrintErrorDomain');
end;

initialization
  UIKitModule := dlopen(MarshaledAString(libUIKit), RTLD_LAZY);

finalization
  dlclose(UIKitModule);

end.
