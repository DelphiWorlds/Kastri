unit DW.REST.Json.Helpers;

{*******************************************************}
{                                                       }
{                      Kastri                           }
{                                                       }
{         Delphi Worlds Cross-Platform Library          }
{                                                       }
{  Copyright 2020-2024 Dave Nottage under MIT license   }
{  which is located in the root folder of this library  }
{                                                       }
{*******************************************************}

interface

uses
  // RTL
  System.JSON, REST.Json;

type
  TRESTJsonHelper = class helper for TJson
  public
    class function FileToObject<T: class, constructor>(out AObject: T; const AFileName: string;
      AOptions: TJsonOptions = [joDateIsUTC, joDateFormatISO8601]): Boolean; static;
    class procedure SaveToFile(const AObject: TObject; const AFileName: string); static;
    /// <summary>
    ///   Replacement functions for TJson.Format, which does not format correctly
    /// </summary>
    /// <remarks>
    ///   Overload that takes a string parameter has been modified so that it should also work for JSON which is not generated by TJsonValue.ToString
    ///   Please use this function with CAUTION!! It still may not cater for all situations, and is still not perfect
    /// </remarks>
    class function Tidy(const AJsonValue: TJsonValue; const AIndentSize: Integer = 2): string; overload; static; deprecated 'Use DW.Json.TJsonHelper.Tidy';
    class function Tidy(const AJson: string; const AIndentSize: Integer = 2): string; overload; static; deprecated 'Use DW.Json.TJsonHelper.Tidy';
  end;

implementation

uses
  // RTL
  System.Character, System.SysUtils, System.IOUtils,
  // DW
  DW.Json;

class function TRESTJsonHelper.FileToObject<T>(out AObject: T; const AFileName: string;
  AOptions: TJsonOptions = [joDateIsUTC, joDateFormatISO8601]): Boolean;
var
  LJSON: string;
begin
  Result := False;
  LJSON := '';
  if TFile.Exists(AFileName) then
    LJSON := TFile.ReadAllText(AFileName);
  if not LJSON.IsEmpty then
  begin
    AObject := JsonToObject<T>(LJSON, AOptions);
    Result := AObject <> nil;
  end;
end;

class procedure TRESTJsonHelper.SaveToFile(const AObject: TObject; const AFileName: string);
var
  LJSON: string;
begin
  if AObject = nil then
    LJSON := '{}'
  else
    LJSON := TJsonHelper.Tidy(ObjectToJsonString(AObject));
  TFile.WriteAllText(AFileName, LJSON);
end;

class function TRESTJsonHelper.Tidy(const AJsonValue: TJsonValue; const AIndentSize: Integer = 2): string;
begin
  Result := TJsonHelper.Tidy(AJsonValue.ToString, AIndentSize);
end;

class function TRESTJsonHelper.Tidy(const AJson: string; const AIndentSize: Integer = 2): string;
begin
  Result := TJsonHelper.Tidy(AJson, AIndentSize);
end;

end.
