program resmerge;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils,
  System.IOUtils,
  System.Win.ComObj,
  Winapi.ActiveX,
  DW.ResourcesMerger;

var
  LAppName, LSourceFolder, LTargetFolder, LOutputFolder: string;
  LIsInitialized: Boolean;

procedure ShowUsage;
begin
  Writeln(Format('%s merges resource files (such as from an Android library) with existing resource files, such as those generated by Delphi', [LAppName]));
  Writeln;
  Writeln(Format('Usage: %s <source> <target> [<outputfolder>]', [LAppName]));
  Writeln;
  Writeln('<source> folder containing resource files (such as from an Android library), or single file to be merged');
  Writeln('<target> folder containing resource files to be merged with, or single file to merge with');
  Writeln('<outputfolder> (optional) folder to output merged resource files to. If not provided, file(s) in <target> will be overwritten');
  ExitCode := 99;
end;

begin
  LAppName := TPath.GetFileNameWithoutExtension(ParamStr(0));
  if ParamCount > 1 then
  begin
    LSourceFolder := ParamStr(1);
    LTargetFolder := ParamStr(2);
    LOutputFolder := ParamStr(3);
    try
      LIsInitialized := Succeeded(CoInitialize(nil));
      try
        ExitCode := TResourcesMerger.MergeResources(LSourceFolder, LTargetFolder, LOutputFolder);
      finally
        if LIsInitialized then
          CoUninitialize;
      end;
    except
      on E: Exception do
      begin
        Writeln(Format('%s caused an unhandled exception - %s: %s', [LAppName, E.ClassName, E.Message]));
        ExitCode := MaxInt;
      end;
    end;
  end
  else
    ShowUsage;
end.

